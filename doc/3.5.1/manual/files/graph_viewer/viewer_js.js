// Generated by js_of_ocaml 3.5.1+git-b89555046
(function(joo_global_object)
   {"use strict";
    var JSON=joo_global_object.JSON;
    if(typeof JSON !== "object")JSON = {};
    (function()
       {"use strict";
        var
         rx_one=/^[\],:{}\s]*$/,
         rx_two=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
         rx_three=
          /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
         rx_four=/(?:^|:|,)(?:\s*\[)+/g,
         rx_escapable=
          /[\\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
         rx_dangerous=
          /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
        function f(n){return n < 10?"0" + n:n}
        function this_value(){return this.valueOf()}
        if(typeof Date.prototype.toJSON !== "function")
         {Date.prototype.toJSON
          =
          function()
           {return isFinite(this.valueOf())
                    ?this.getUTCFullYear()
                     +
                     "-"
                     +
                     f(this.getUTCMonth() + 1)
                     +
                     "-"
                     +
                     f(this.getUTCDate())
                     +
                     "T"
                     +
                     f(this.getUTCHours())
                     +
                     ":"
                     +
                     f(this.getUTCMinutes())
                     +
                     ":"
                     +
                     f(this.getUTCSeconds())
                     +
                     "Z"
                    :null};
          Boolean.prototype.toJSON = this_value;
          Number.prototype.toJSON = this_value;
          String.prototype.toJSON = this_value}
        var gap,indent,meta,rep;
        function quote(string)
         {rx_escapable.lastIndex = 0;
          return rx_escapable.test(string)
                  ?'"'
                   +
                   string.replace
                    (rx_escapable,
                     function(a)
                      {var c=meta[a];
                       return typeof c === "string"
                               ?c
                               :"\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(- 4)})
                   +
                   '"'
                  :'"' + string + '"'}
        function str(key,holder)
         {var i,k,v,length,mind=gap,partial,value=holder[key];
          if
           (value
            &&
            typeof value
            ===
            "object"
            &&
            typeof value.toJSON
            ===
            "function")
           value = value.toJSON(key);
          if(typeof rep === "function")value = rep.call(holder,key,value);
          switch(typeof value)
           {case "string":return quote(value);
            case "number":return isFinite(value)?String(value):"null";
            case "boolean":
            case "null":return String(value);
            case "object":
             if(! value)return "null";
             gap += indent;
             partial = [];
             if(Object.prototype.toString.apply(value) === "[object Array]")
              {length = value.length;
               for(i = 0;i < length;i += 1)
                partial[i] = str(i,value) || "null";
               v
               =
               partial.length === 0
                ?"[]"
                :gap
                  ?"[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]"
                  :"[" + partial.join(",") + "]";
               gap = mind;
               return v}
             if(rep && typeof rep === "object")
              {length = rep.length;
               for(i = 0;i < length;i += 1)
                if(typeof rep[i] === "string")
                 {k = rep[i];
                  v = str(k,value);
                  if(v)partial.push(quote(k) + (gap?": ":":") + v)}}
             else
              for(k in value)
               if(Object.prototype.hasOwnProperty.call(value,k))
                {v = str(k,value);
                 if(v)partial.push(quote(k) + (gap?": ":":") + v)}
             v
             =
             partial.length === 0
              ?"{}"
              :gap
                ?"{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}"
                :"{" + partial.join(",") + "}";
             gap = mind;
             return v
            }}
        if(typeof JSON.stringify !== "function")
         {meta
          =
          {"\b":"\\b",
           "\t":"\\t",
           "\n":"\\n",
           "\f":"\\f",
           "\r":"\\r",
           '"':'\\"',
           "\\":"\\\\"};
          JSON.stringify
          =
          function(value,replacer,space)
           {var i;
            gap = "";
            indent = "";
            if(typeof space === "number")
             for(i = 0;i < space;i += 1)indent += " ";
            else
             if(typeof space === "string")indent = space;
            rep = replacer;
            if
             (replacer
              &&
              typeof replacer
              !==
              "function"
              &&
              (typeof replacer
               !==
               "object"
               ||
               typeof replacer.length
               !==
               "number"))
             throw new Error("JSON.stringify");
            return str("",{"":value})}}
        if(typeof JSON.parse !== "function")
         JSON.parse
         =
         function(text,reviver)
          {var j;
           function walk(holder,key)
            {var k,v,value=holder[key];
             if(value && typeof value === "object")
              for(k in value)
               if(Object.prototype.hasOwnProperty.call(value,k))
                {v = walk(value,k);
                 if(v !== undefined)value[k] = v;else delete value[k]}
             return reviver.call(holder,key,value)}
           text = String(text);
           rx_dangerous.lastIndex = 0;
           if(rx_dangerous.test(text))
            text
            =
            text.replace
             (rx_dangerous,
              function(a)
               {return "\\u"
                       +
                       ("0000" + a.charCodeAt(0).toString(16)).slice(- 4)});
           if
            (rx_one.test
              (text.replace(rx_two,"@").replace(rx_three,"]").replace
                (rx_four,"")))
            {j = eval("(" + text + ")");
             return typeof reviver === "function"?walk({"":j},""):j}
           throw new SyntaxError("JSON.parse")}}
      ());
    function caml_array_blit(a1,i1,a2,i2,len)
     {if(i2 <= i1)
       for(var j=1;j <= len;j++)a2[i2 + j] = a1[i1 + j];
      else
       for(var j=len;j >= 1;j--)a2[i2 + j] = a1[i1 + j];
      return 0}
    function raw_array_sub(a,i,l)
     {var b=new Array(l);for(var j=0;j < l;j++)b[j] = a[i + j];return b}
    function caml_subarray_to_string(a,i,len)
     {var f=String.fromCharCode;
      if(i == 0 && len <= 4096 && len == a.length)return f.apply(null,a);
      var s="";
      for(;0 < len;i += 1024,len -= 1024)
       s += f.apply(null,raw_array_sub(a,i,Math.min(len,1024)));
      return s}
    function caml_convert_string_to_array(s)
     {if(joo_global_object.Uint8Array)
       var a=new (joo_global_object.Uint8Array)(s.l);
      else
       var a=new Array(s.l);
      var b=s.c,l=b.length,i=0;
      for(;i < l;i++)a[i] = b.charCodeAt(i);
      for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
      return a}
    function caml_blit_bytes(s1,i1,s2,i2,len)
     {if(len == 0)return 0;
      if(i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
       {s2.c
        =
        s1.t == 4
         ?caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
       if(s2.t == 2 && i2 == s2.c.length)
        {s2.c
         +=
         s1.t == 4
          ?caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len?s1.c:s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
        {if(s2.t != 4)caml_convert_string_to_array(s2);
         var c1=s1.c,c2=s2.c;
         if(s1.t == 4)
          if(i2 <= i1)
           for(var i=0;i < len;i++)c2[i2 + i] = c1[i1 + i];
          else
           for(var i=len - 1;i >= 0;i--)c2[i2 + i] = c1[i1 + i];
         else
          {var l=Math.min(len,c1.length - i1);
           for(var i=0;i < l;i++)c2[i2 + i] = c1.charCodeAt(i1 + i);
           for(;i < len;i++)c2[i2 + i] = 0}}
      return 0}
    function caml_blit_string(s1,i1,s2,i2,len)
     {return caml_blit_bytes(s1,i1,s2,i2,len)}
    function caml_bytes_of_string(s){return s}
    function caml_raise_with_arg(tag,arg){throw [0,tag,arg]}
    function caml_str_repeat(n,s)
     {if(n == 0)return "";
      if(s.repeat)return s.repeat(n);
      var r="",l=0;
      if(n == 0)return r;
      for(;;)
       {if(n & 1)r += s;
        n >>= 1;
        if(n == 0)return r;
        s += s;
        l++;
        if(l == 9)s.slice(0,1)}}
    function caml_convert_string_to_bytes(s)
     {if(s.t == 2)
       s.c += caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c = caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0}
    function caml_is_ascii(s)
     {if(s.length < 24)
       {for(var i=0;i < s.length;i++)if(s.charCodeAt(i) > 127)return false;
        return true}
      else
       return ! /[^\x00-\x7f]/.test(s)}
    function caml_utf16_of_utf8(s)
     {for(var b="",t="",c,c1,c2,v,i=0,l=s.length;i < l;i++)
       {c1 = s.charCodeAt(i);
        if(c1 < 0x80)
         {for(var j=i + 1;j < l && (c1 = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        v = 1;
        if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
         {c = c2 + (c1 << 6);
          if(c1 < 0xe0)
           {v = c - 0x3080;if(v < 0x80)v = 1}
          else
           {v = 2;
            if(++i < l && ((c2 = s.charCodeAt(i)) & - 64) == 128)
             {c = c2 + (c << 6);
              if(c1 < 0xf0)
               {v = c - 0xe2080;
                if(v < 0x800 || v >= 0xd7ff && v < 0xe000)v = 2}
              else
               {v = 3;
                if
                 (++i
                  <
                  l
                  &&
                  ((c2 = s.charCodeAt(i)) & - 64)
                  ==
                  128
                  &&
                  c1
                  <
                  0xf5)
                 {v = c2 - 0x3c82080 + (c << 6);
                  if(v < 0x10000 || v > 0x10ffff)v = 3}}}}}
        if(v < 4)
         {i -= v;t += "\ufffd"}
        else
         if(v > 0xffff)
          t += String.fromCharCode(0xd7c0 + (v >> 10),0xdc00 + (v & 0x3FF));
         else
          t += String.fromCharCode(v);
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_to_js_string(s)
     {switch(s.t)
       {case 9:return s.c;
        default:caml_convert_string_to_bytes(s);case 0:
         if(caml_is_ascii(s.c)){s.t = 9;return s.c}s.t = 8;
        case 8:return caml_utf16_of_utf8(s.c)
        }}
    function MlBytes(tag,contents,length)
     {this.t = tag;this.c = contents;this.l = length}
    MlBytes.prototype.toString = function(){return caml_to_js_string(this)};
    MlBytes.prototype.slice
    =
    function()
     {var content=this.t == 4?this.c.slice():this.c;
      return new MlBytes(this.t,content,this.l)};
    function caml_new_string(s){return new MlBytes(0,s,s.length)}
    function caml_raise_with_string(tag,msg)
     {caml_raise_with_arg(tag,caml_new_string(msg))}
    var caml_global_data=[0];
    function caml_invalid_argument(msg)
     {caml_raise_with_string(caml_global_data.Invalid_argument,msg)}
    function caml_string_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_bytes_unsafe_set(s,i,c)
     {c &= 0xff;
      if(s.t != 4)
       {if(i == s.c.length)
         {s.c += String.fromCharCode(c);if(i + 1 == s.l)s.t = 0;return 0}
        caml_convert_string_to_array(s)}
      s.c[i] = c;
      return 0}
    function caml_bytes_set(s,i,c)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_set(s,i,c)}
    function caml_bytes_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function raw_array_append_one(a,x)
     {var l=a.length,b=new Array(l + 1),i=0;
      for(;i < l;i++)b[i] = a[i];
      b[i] = x;
      return b}
    function caml_call_gen(f,args)
     {if(f.fun)return caml_call_gen(f.fun,args);
      var n=f.length,argsLen=args.length,d=n - argsLen;
      if(d == 0)
       return f.apply(null,args);
      else
       if(d < 0)
        return caml_call_gen
                (f.apply(null,raw_array_sub(args,0,n)),
                 raw_array_sub(args,n,argsLen - n));
       else
        return function(x)
         {return caml_call_gen(f,raw_array_append_one(args,x))}}
    function caml_array_bound_error()
     {caml_invalid_argument("index out of bounds")}
    function caml_check_bound(array,index)
     {if(index >>> 0 >= array.length - 1)caml_array_bound_error();
      return array}
    function caml_classify_float(x)
     {if(isFinite(x))
       {if(Math.abs(x) >= 2.2250738585072014e-308)return 0;
        if(x != 0)return 1;
        return 2}
      return isNaN(x)?4:3}
    var log2_ok=Math.log2 && Math.log2(1.1235582092889474E+307) == 1020;
    function jsoo_floor_log2(x)
     {if(log2_ok)return Math.floor(Math.log2(x));
      var i=0;
      if(x == 0)return - Infinity;
      if(x >= 1)while(x >= 2){x /= 2;i++}else while(x < 1){x *= 2;i--}
      return i}
    function caml_int32_bits_of_float(x)
     {var float32a=new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
      var int32a=new (joo_global_object.Int32Array)(float32a.buffer);
      return int32a[0] | 0}
    function caml_int64_create_lo_mi_hi(lo,mi,hi){return [255,lo,mi,hi]}
    function caml_int64_bits_of_float(x)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_int64_create_lo_mi_hi(1,0,0x7ff0);
        return x > 0
                ?caml_int64_create_lo_mi_hi(0,0,0x7ff0)
                :caml_int64_create_lo_mi_hi(0,0,0xfff0)}
      var sign=x == 0 && 1 / x == - Infinity?0x8000:x >= 0?0:0x8000;
      if(sign)x = - x;
      var exp=jsoo_floor_log2(x) + 1023;
      if(exp <= 0)
       {exp = 0;x /= Math.pow(2,- 1026)}
      else
       {x /= Math.pow(2,exp - 1027);
        if(x < 16){x *= 2;exp -= 1}
        if(exp == 0)x /= 2}
      var k=Math.pow(2,24),r3=x | 0;
      x = (x - r3) * k;
      var r2=x | 0;
      x = (x - r2) * k;
      var r1=x | 0;
      r3 = r3 & 0xf | sign | exp << 4;
      return caml_int64_create_lo_mi_hi(r1,r2,r3)}
    function caml_int64_to_bytes(x)
     {return [x[3] >> 8,
              x[3] & 0xff,
              x[2] >> 16,
              x[2] >> 8 & 0xff,
              x[2] & 0xff,
              x[1] >> 16,
              x[1] >> 8 & 0xff,
              x[1] & 0xff]}
    function caml_ba_serialize(writer,ba,sz)
     {writer.write(32,ba.dims.length);
      writer.write(32,ba.kind | ba.layout << 8);
      for(var i=0;i < ba.dims.length;i++)writer.write(32,ba.dims[i]);
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         for(var i=0;i < ba.data.length;i++)writer.write(8,ba.data[i]);break;
        case 4:
        case 5:
         for(var i=0;i < ba.data.length;i++)writer.write(16,ba.data[i]);break;
        case 6:
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);break;
        case 8:
        case 9:
         writer.write(8,0);
         for(var i=0;i < ba.data.length;i++)writer.write(32,ba.data[i]);
         break;
        case 7:
         for(var i=0;i < ba.data.length / 2;i++)
          {var b=caml_int64_to_bytes(ba.get(i));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 1:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break;
        case 0:
         for(var i=0;i < ba.data.length;i++)
          {var b=caml_int32_bits_of_float(ba.get(i));writer.write(32,b)}
         break;
        case 10:
         for(var i=0;i < ba.data.length / 2;i++)
          {var j=ba.get(i);
           writer.write(32,caml_int32_bits_of_float(j[1]));
           writer.write(32,caml_int32_bits_of_float(j[2]))}
         break;
        case 11:
         for(var i=0;i < ba.data.length / 2;i++)
          {var
            complex=ba.get(i),
            b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
           for(var j=0;j < 8;j++)writer.write(8,b[j]);
           var b=caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
           for(var j=0;j < 8;j++)writer.write(8,b[j])}
         break
        }
      sz[0] = (4 + ba.dims.length) * 4;
      sz[1] = (4 + ba.dims.length) * 8}
    function caml_ba_get_size_per_element(kind)
     {switch(kind){case 7:case 10:case 11:return 2;default:return 1}}
    function caml_ba_create_buffer(kind,size)
     {var g=joo_global_object,view;
      switch(kind)
       {case 0:view = g.Float32Array;break;
        case 1:view = g.Float64Array;break;
        case 2:view = g.Int8Array;break;
        case 3:view = g.Uint8Array;break;
        case 4:view = g.Int16Array;break;
        case 5:view = g.Uint16Array;break;
        case 6:view = g.Int32Array;break;
        case 7:view = g.Int32Array;break;
        case 8:view = g.Int32Array;break;
        case 9:view = g.Int32Array;break;
        case 10:view = g.Float32Array;break;
        case 11:view = g.Float64Array;break;
        case 12:view = g.Uint8Array;break
        }
      if(! view)caml_invalid_argument("Bigarray.create: unsupported kind");
      var data=new view(size * caml_ba_get_size_per_element(kind));
      return data}
    function caml_int32_float_of_bits(x)
     {var int32a=new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
      var float32a=new (joo_global_object.Float32Array)(int32a.buffer);
      return float32a[0]}
    function caml_int64_of_bytes(a)
     {return [255,
              a[7] | a[6] << 8 | a[5] << 16,
              a[4] | a[3] << 8 | a[2] << 16,
              a[1] | a[0] << 8]}
    function caml_int64_float_of_bits(x)
     {var lo=x[1],mi=x[2],hi=x[3],exp=(hi & 0x7fff) >> 4;
      if(exp == 2047)
       return (lo | mi | hi & 0xf) == 0?hi & 0x8000?- Infinity:Infinity:NaN;
      var k=Math.pow(2,- 24),res=(lo * k + mi) * k + (hi & 0xf);
      if(exp > 0)
       {res += 16;res *= Math.pow(2,exp - 1027)}
      else
       res *= Math.pow(2,- 1026);
      if(hi & 0x8000)res = - res;
      return res}
    function caml_ba_get_size(dims)
     {var n_dims=dims.length,size=1;
      for(var i=0;i < n_dims;i++)
       {if(dims[i] < 0)
         caml_invalid_argument("Bigarray.create: negative dimension");
        size = size * dims[i]}
      return size}
    function caml_int64_create_lo_hi(lo,hi)
     {return [255,
              lo & 0xffffff,
              lo >>> 24 & 0xff | (hi & 0xffff) << 8,
              hi >>> 16 & 0xffff]}
    function caml_int64_hi32(v){return v[2] >>> 8 & 0xffff | v[3] << 16}
    function caml_int64_lo32(v){return v[1] | (v[2] & 0xff) << 24}
    function Ml_Bigarray(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray.prototype.caml_custom = "_bigarray";
    Ml_Bigarray.prototype.offset
    =
    function(arg)
     {var ofs=0;
      if(typeof arg === "number")arg = [arg];
      if(! (arg instanceof Array))
       caml_invalid_argument("bigarray.js: invalid offset");
      if(this.dims.length != arg.length)
       caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
      if(this.layout == 0)
       for(var i=0;i < this.dims.length;i++)
        {if(arg[i] < 0 || arg[i] >= this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i]}
      else
       for(var i=this.dims.length - 1;i >= 0;i--)
        {if(arg[i] < 1 || arg[i] > this.dims[i])caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1)}
      return ofs};
    Ml_Bigarray.prototype.get
    =
    function(ofs)
     {switch(this.kind)
       {case 7:
         var l=this.data[ofs * 2 + 0],h=this.data[ofs * 2 + 1];
         return caml_int64_create_lo_hi(l,h);
        case 10:
        case 11:
         var r=this.data[ofs * 2 + 0],i=this.data[ofs * 2 + 1];
         return [254,r,i];
        default:return this.data[ofs]}};
    Ml_Bigarray.prototype.set
    =
    function(ofs,v)
     {switch(this.kind)
       {case 7:
         this.data[ofs * 2 + 0] = caml_int64_lo32(v);
         this.data[ofs * 2 + 1] = caml_int64_hi32(v);
         break;
        case 10:
        case 11:
         this.data[ofs * 2 + 0] = v[1];this.data[ofs * 2 + 1] = v[2];break;
        default:this.data[ofs] = v;break}
      return 0};
    Ml_Bigarray.prototype.fill
    =
    function(v)
     {switch(this.kind)
       {case 7:
         var a=caml_int64_lo32(v),b=caml_int64_hi32(v);
         if(a == b)
          this.data.fill(a);
         else
          for(var i=0;i < this.data.length;i++)this.data[i] = i % 2 == 0?a:b;
         break;
        case 10:
        case 11:
         var im=v[1],re=v[2];
         if(im == re)
          this.data.fill(im);
         else
          for(var i=0;i < this.data.length;i++)
           this.data[i] = i % 2 == 0?im:re;
         break;
        default:this.data.fill(v);break}};
    Ml_Bigarray.prototype.compare
    =
    function(b,total)
     {if(this.layout != b.layout || this.kind != b.kind)
       {var k1=this.kind | this.layout << 8,k2=b.kind | b.layout << 8;
        return k2 - k1}
      if(this.dims.length != b.dims.length)
       return b.dims.length - this.dims.length;
      for(var i=0;i < this.dims.length;i++)
       if(this.dims[i] != b.dims[i])return this.dims[i] < b.dims[i]?- 1:1;
      switch(this.kind)
       {case 0:
        case 1:
        case 10:
        case 11:
         var x,y;
         for(var i=0;i < this.data.length;i++)
          {x = this.data[i];
           y = b.data[i];
           if(x < y)return - 1;
           if(x > y)return 1;
           if(x != y)
            {if(! total)return NaN;if(x == x)return 1;if(y == y)return - 1}}
         break;
        case 7:
         for(var i=0;i < this.data.length;i += 2)
          {if(this.data[i + 1] < b.data[i + 1])return - 1;
           if(this.data[i + 1] > b.data[i + 1])return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0)return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0)return 1}
         break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 12:
         for(var i=0;i < this.data.length;i++)
          {if(this.data[i] < b.data[i])return - 1;
           if(this.data[i] > b.data[i])return 1}
         break
        }
      return 0};
    function Ml_Bigarray_c_1_1(kind,layout,dims,buffer)
     {this.kind = kind;
      this.layout = layout;
      this.dims = dims;
      this.data = buffer}
    Ml_Bigarray_c_1_1.prototype = new Ml_Bigarray();
    Ml_Bigarray_c_1_1.prototype.offset
    =
    function(arg)
     {if(typeof arg !== "number")
       if(arg instanceof Array && arg.length == 1)
        arg = arg[0];
       else
        caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
      if(arg < 0 || arg >= this.dims[0])caml_array_bound_error();
      return arg};
    Ml_Bigarray_c_1_1.prototype.get = function(ofs){return this.data[ofs]};
    Ml_Bigarray_c_1_1.prototype.set
    =
    function(ofs,v){this.data[ofs] = v;return 0};
    Ml_Bigarray_c_1_1.prototype.fill
    =
    function(v){this.data.fill(v);return 0};
    function caml_ba_create_unsafe(kind,layout,dims,data)
     {var size_per_element=caml_ba_get_size_per_element(kind);
      if(caml_ba_get_size(dims) * size_per_element != data.length)
       caml_invalid_argument("length doesn't match dims");
      if(layout == 0 && dims.length == 1 && size_per_element == 1)
       return new Ml_Bigarray_c_1_1(kind,layout,dims,data);
      return new Ml_Bigarray(kind,layout,dims,data)}
    function caml_failwith(msg)
     {caml_raise_with_string(caml_global_data.Failure,msg)}
    function caml_ba_deserialize(reader,sz)
     {var num_dims=reader.read32s();
      if(num_dims < 0 || num_dims > 16)
       caml_failwith("input_value: wrong number of bigarray dimensions");
      var tag=reader.read32s(),kind=tag & 0xff,layout=tag >> 8 & 1,dims=[];
      for(var i=0;i < num_dims;i++)dims.push(reader.read32u());
      var
       size=caml_ba_get_size(dims),
       data=caml_ba_create_buffer(kind,size),
       ba=caml_ba_create_unsafe(kind,layout,dims,data);
      switch(kind)
       {case 2:for(var i=0;i < size;i++)data[i] = reader.read8s();break;
        case 3:
        case 12:for(var i=0;i < size;i++)data[i] = reader.read8u();break;
        case 4:for(var i=0;i < size;i++)data[i] = reader.read16s();break;
        case 5:for(var i=0;i < size;i++)data[i] = reader.read16u();break;
        case 6:for(var i=0;i < size;i++)data[i] = reader.read32s();break;
        case 8:
        case 9:
         var sixty=reader.read8u();
         if(sixty)
          caml_failwith
           ("input_value: cannot read bigarray with 64-bit OCaml ints");
         for(var i=0;i < size;i++)data[i] = reader.read32s();
         break;
        case 7:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var int64=caml_int64_of_bytes(t);
           ba.set(i,int64)}
         break;
        case 1:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var f=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,f)}
         break;
        case 0:
         for(var i=0;i < size;i++)
          {var f=caml_int32_float_of_bits(reader.read32s());ba.set(i,f)}
         break;
        case 10:
         for(var i=0;i < size;i++)
          {var
            re=caml_int32_float_of_bits(reader.read32s()),
            im=caml_int32_float_of_bits(reader.read32s());
           ba.set(i,[254,re,im])}
         break;
        case 11:
         var t=new Array(8);
         for(var i=0;i < size;i++)
          {for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var re=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           for(var j=0;j < 8;j++)t[j] = reader.read8u();
           var im=caml_int64_float_of_bits(caml_int64_of_bytes(t));
           ba.set(i,[254,re,im])}
         break
        }
      sz[0] = (4 + num_dims) * 4;
      return caml_ba_create_unsafe(kind,layout,dims,data)}
    function caml_ba_compare(a,b,total){return a.compare(b,total)}
    if(! Math.imul)
     Math.imul
     =
     function(x,y){y |= 0;return ((x >> 16) * y << 16) + (x & 0xffff) * y | 0};
    var caml_mul=Math.imul;
    function caml_hash_mix_int(h,d)
     {d = caml_mul(d,0xcc9e2d51 | 0);
      d = d << 15 | d >>> 32 - 15;
      d = caml_mul(d,0x1b873593);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
      return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0}
    function caml_hash_mix_int64(h,v)
     {h = caml_hash_mix_int(h,caml_int64_lo32(v));
      h = caml_hash_mix_int(h,caml_int64_hi32(v));
      return h}
    function caml_hash_mix_float(h,v0)
     {return caml_hash_mix_int64(h,caml_int64_bits_of_float(v0))}
    function caml_ba_hash(ba)
     {var num_elts=caml_ba_get_size(ba.dims),h=0;
      switch(ba.kind)
       {case 2:
        case 3:
        case 12:
         if(num_elts > 256)num_elts = 256;
         var w=0,i=0;
         for(i = 0;i + 4 <= ba.data.length;i += 4)
          {w
           =
           ba.data[i + 0]
           |
           ba.data[i + 1]
           <<
           8
           |
           ba.data[i + 2]
           <<
           16
           |
           ba.data[i + 3]
           <<
           24;
           h = caml_hash_mix_int(h,w)}
         w = 0;
         switch(num_elts & 3)
          {case 3:w = ba.data[i + 2] << 16;
           case 2:w |= ba.data[i + 1] << 8;
           case 1:w |= ba.data[i + 0];h = caml_hash_mix_int(h,w)
           }
         break;
        case 4:
        case 5:
         if(num_elts > 128)num_elts = 128;
         var w=0,i=0;
         for(i = 0;i + 2 <= ba.data.length;i += 2)
          {w = ba.data[i + 0] | ba.data[i + 1] << 16;
           h = caml_hash_mix_int(h,w)}
         if((num_elts & 1) != 0)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 6:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 8:
        case 9:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 7:
         if(num_elts > 32)num_elts = 32;
         num_elts *= 2;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_int(h,ba.data[i]);
         break;
        case 10:num_elts *= 2;
        case 0:
         if(num_elts > 64)num_elts = 64;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break;
        case 11:num_elts *= 2;
        case 1:
         if(num_elts > 32)num_elts = 32;
         for(var i=0;i < num_elts;i++)h = caml_hash_mix_float(h,ba.data[i]);
         break
        }
      return h}
    function caml_int32_unmarshal(reader,size)
     {size[0] = 4;return reader.read32s()}
    function caml_nativeint_unmarshal(reader,size)
     {switch(reader.read8u())
       {case 1:size[0] = 4;return reader.read32s();
        case 2:caml_failwith("input_value: native integer value too large");
        default:caml_failwith("input_value: ill-formed native integer")}}
    function caml_int64_unmarshal(reader,size)
     {var t=new Array(8);
      for(var j=0;j < 8;j++)t[j] = reader.read8u();
      size[0] = 8;
      return caml_int64_of_bytes(t)}
    function caml_int64_marshal(writer,v,sizes)
     {var b=caml_int64_to_bytes(v);
      for(var i=0;i < 8;i++)writer.write(8,b[i]);
      sizes[0] = 8;
      sizes[1] = 8}
    function caml_int64_compare(x,y)
     {var x3=x[3] << 16,y3=y[3] << 16;
      if(x3 > y3)return 1;
      if(x3 < y3)return - 1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return - 1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return - 1;
      return 0}
    function caml_int64_hash(x)
     {var lo=x[1] | (x[2] & 0xff) << 24,hi=x[2] >>> 8 & 0xffff | x[3] << 16;
      return lo ^ hi}
    var
     caml_custom_ops=
      {"_j":
       {deserialize:caml_int64_unmarshal,
        serialize:caml_int64_marshal,
        fixed_length:8,
        compare:caml_int64_compare,
        hash:caml_int64_hash},
       "_i":{deserialize:caml_int32_unmarshal,fixed_length:4},
       "_n":{deserialize:caml_nativeint_unmarshal,fixed_length:4},
       "_bigarray":
       {deserialize:caml_ba_deserialize,
        serialize:caml_ba_serialize,
        compare:caml_ba_compare,
        hash:caml_ba_hash}};
    function caml_compare_val_get_custom(a)
     {return caml_custom_ops[a.caml_custom]
             &&
             caml_custom_ops[a.caml_custom].compare}
    function caml_compare_val_number_custom(num,custom,swap,total)
     {var comp=caml_compare_val_get_custom(custom);
      if(comp)
       {var x=swap > 0?comp(custom,num,total):comp(num,custom,total);
        if(total && x != x)return swap;
        if(+ x != + x)return + x;
        if((x | 0) != 0)return x | 0}
      return swap}
    function caml_compare_val_tag(a)
     {if(typeof a === "number")
       return 1000;
      else
       if(a instanceof MlBytes)
        return 252;
       else
        if(a instanceof Array && a[0] === a[0] >>> 0 && a[0] <= 255)
         {var tag=a[0] | 0;return tag == 254?0:tag}
        else
         if(a instanceof String)
          return 1252;
         else
          if(typeof a == "string")
           return 1252;
          else
           if(a instanceof Number)
            return 1000;
           else
            if(a && a.caml_custom)
             return 1255;
            else
             if(a && a.compare)
              return 1256;
             else
              if(typeof a == "function")
               return 1247;
              else
               if(typeof a == "symbol")return 1251;
      return 1001}
    function caml_int_compare(a,b)
     {if(a < b)return - 1;if(a == b)return 0;return 1}
    function caml_string_compare(s1,s2)
     {s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c < s2.c?- 1:s1.c > s2.c?1:0}
    function caml_compare_val(a,b,total)
     {var stack=[];
      for(;;)
       {if(! (total && a === b))
         {var tag_a=caml_compare_val_tag(a);
          if(tag_a == 250){a = a[1];continue}
          var tag_b=caml_compare_val_tag(b);
          if(tag_b == 250){b = b[1];continue}
          if(tag_a !== tag_b)
           {if(tag_a == 1000)
             {if(tag_b == 1255)
               return caml_compare_val_number_custom(a,b,- 1,total);
              return - 1}
            if(tag_b == 1000)
             {if(tag_a == 1255)
               return caml_compare_val_number_custom(b,a,1,total);
              return 1}
            return tag_a < tag_b?- 1:1}
          switch(tag_a)
           {case 247:caml_invalid_argument("compare: functional value");break;
            case 248:
             var x=caml_int_compare(a[2],b[2]);if(x != 0)return x | 0;break;
            case 249:caml_invalid_argument("compare: functional value");break;
            case 250:
             caml_invalid_argument
              ("equal: got Forward_tag, should not happen");
             break;
            case 251:caml_invalid_argument("equal: abstract value");break;
            case 252:
             if(a !== b)
              {var x=caml_string_compare(a,b);if(x != 0)return x | 0}
             break;
            case 253:
             caml_invalid_argument("equal: got Double_tag, should not happen");
             break;
            case 254:
             caml_invalid_argument
              ("equal: got Double_array_tag, should not happen");
             break;
            case 255:
             var x=caml_int64_compare(a,b);if(x != 0)return x | 0;break;
            case 1247:
             caml_invalid_argument("compare: functional value");break;
            case 1255:
             var comp=caml_compare_val_get_custom(a);
             if(comp != caml_compare_val_get_custom(b))
              return a.caml_custom < b.caml_custom?- 1:1;
             if(! comp)caml_invalid_argument("compare: abstract value");
             var x=comp(a,b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1256:
             var x=a.compare(b,total);
             if(x != x)return total?- 1:x;
             if(x !== (x | 0))return - 1;
             if(x != 0)return x | 0;
             break;
            case 1000:
             a = + a;
             b = + b;
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1001:
             if(a < b)return - 1;
             if(a > b)return 1;
             if(a != b)
              {if(! total)return NaN;if(a == a)return 1;if(b == b)return - 1}
             break;
            case 1251:if(a !== b){if(! total)return NaN;return 1}break;
            case 1252:
             var a=a.toString(),b=b.toString();
             if(a !== b){if(a < b)return - 1;if(a > b)return 1}
             break;
            case 246:
            case 254:
            default:
             if(a.length != b.length)return a.length < b.length?- 1:1;
             if(a.length > 1)stack.push(a,b,1);
             break}}
        if(stack.length == 0)return 0;
        var i=stack.pop();
        b = stack.pop();
        a = stack.pop();
        if(i + 1 < a.length)stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]}}
    function caml_compare(a,b){return caml_compare_val(a,b,true)}
    function caml_convert_raw_backtrace(){return [0]}
    function caml_create_bytes(len)
     {if(len < 0)caml_invalid_argument("Bytes.create");
      return new MlBytes(len?2:9,"",len)}
    if(joo_global_object.process && joo_global_object.process.cwd)
     var caml_current_dir=joo_global_object.process.cwd().replace(/\\/g,"/");
    else
     var caml_current_dir="/static";
    if(caml_current_dir.slice(- 1) !== "/")caml_current_dir += "/";
    function caml_make_path(name)
     {name = name instanceof MlBytes?name.toString():name;
      if(name.charCodeAt(0) != 47)name = caml_current_dir + name;
      var comp=name.split("/"),ncomp=[];
      for(var i=0;i < comp.length;i++)
       switch(comp[i])
        {case "..":if(ncomp.length > 1)ncomp.pop();break;
         case ".":break;
         case "":if(ncomp.length == 0)ncomp.push("");break;
         default:ncomp.push(comp[i]);break}
      ncomp.orig = name;
      return ncomp}
    function caml_raise_sys_error(msg)
     {caml_raise_with_string(caml_global_data.Sys_error,msg)}
    function caml_raise_no_such_file(name)
     {name = name instanceof MlBytes?name.toString():name;
      caml_raise_sys_error(name + ": No such file or directory")}
    function caml_string_of_array(a){return new MlBytes(4,a,a.length)}
    function caml_bytes_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_bytes_unsafe_get(s,i)}
    function caml_ml_bytes_length(s){return s.l}
    function MlFile(){}
    function MlFakeFile(content){this.data = content}
    MlFakeFile.prototype = new MlFile();
    MlFakeFile.prototype.truncate
    =
    function(len)
     {var old=this.data;
      this.data = caml_create_bytes(len | 0);
      caml_blit_bytes(old,0,this.data,0,len)};
    MlFakeFile.prototype.length
    =
    function(){return caml_ml_bytes_length(this.data)};
    MlFakeFile.prototype.write
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      if(offset + len >= clen)
       {var new_str=caml_create_bytes(offset + len),old_data=this.data;
        this.data = new_str;
        caml_blit_bytes(old_data,0,this.data,0,clen)}
      caml_blit_bytes(buf,pos,this.data,offset,len);
      return 0};
    MlFakeFile.prototype.read
    =
    function(offset,buf,pos,len)
     {var clen=this.length();
      caml_blit_bytes(this.data,offset,buf,pos,len);
      return 0};
    MlFakeFile.prototype.read_one
    =
    function(offset){return caml_bytes_get(this.data,offset)};
    MlFakeFile.prototype.close = function(){};
    MlFakeFile.prototype.constructor = MlFakeFile;
    function MlFakeDevice(root,f)
     {this.content = {};this.root = root;this.lookupFun = f}
    MlFakeDevice.prototype.nm = function(name){return this.root + name};
    MlFakeDevice.prototype.lookup
    =
    function(name)
     {if(! this.content[name] && this.lookupFun)
       {var
         res=
          this.lookupFun(caml_new_string(this.root),caml_new_string(name));
        if(res !== 0)this.content[name] = new MlFakeFile(res[1])}};
    MlFakeDevice.prototype.exists
    =
    function(name)
     {if(name == "")return 1;
      var name_slash=name + "/",r=new RegExp("^" + name_slash);
      for(var n in this.content)if(n.match(r))return 1;
      this.lookup(name);
      return this.content[name]?1:0};
    MlFakeDevice.prototype.readdir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       seen={},
       a=[];
      for(var n in this.content)
       {var m=n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true;a.push(m[1])}}
      return a};
    MlFakeDevice.prototype.is_dir
    =
    function(name)
     {var
       name_slash=name == ""?"":name + "/",
       r=new RegExp("^" + name_slash + "([^/]*)"),
       a=[];
      for(var n in this.content){var m=n.match(r);if(m)return 1}
      return 0};
    MlFakeDevice.prototype.unlink
    =
    function(name)
     {var ok=this.content[name]?true:false;
      delete this.content[name];
      return ok};
    MlFakeDevice.prototype.open
    =
    function(name,f)
     {if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (this.nm(name)
         +
         " : flags Open_text and Open_binary are not compatible");
      this.lookup(name);
      if(this.content[name])
       {if(this.is_dir(name))
         caml_raise_sys_error(this.nm(name) + " : is a directory");
        if(f.create && f.excl)
         caml_raise_sys_error(this.nm(name) + " : file already exists");
        var file=this.content[name];
        if(f.truncate)file.truncate();
        return file}
      else
       if(f.create)
        {this.content[name] = new MlFakeFile(caml_create_bytes(0));
         return this.content[name]}
       else
        caml_raise_no_such_file(this.nm(name))};
    MlFakeDevice.prototype.register
    =
    function(name,content)
     {if(this.content[name])
       caml_raise_sys_error(this.nm(name) + " : file already exists");
      if(content instanceof MlBytes)
       this.content[name] = new MlFakeFile(content);
      else
       if(content instanceof Array)
        this.content[name] = new MlFakeFile(caml_string_of_array(content));
       else
        if(content.toString)
         {var mlstring=caml_new_string(content.toString());
          this.content[name] = new MlFakeFile(mlstring)}};
    MlFakeDevice.prototype.constructor = MlFakeDevice;
    function caml_array_of_string(s)
     {if(s.t != 4)caml_convert_string_to_array(s);return s.c}
    var Buffer=joo_global_object.Buffer;
    function MlNodeFile(fd){this.fs = require("fs");this.fd = fd}
    MlNodeFile.prototype = new MlFile();
    MlNodeFile.prototype.truncate
    =
    function(len){this.fs.ftruncateSync(this.fd,len | 0)};
    MlNodeFile.prototype.length
    =
    function(){return this.fs.fstatSync(this.fd).size};
    MlNodeFile.prototype.write
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=Buffer.from(a);
      this.fs.writeSync(this.fd,buffer,buf_offset,len,offset);
      return 0};
    MlNodeFile.prototype.read
    =
    function(offset,buf,buf_offset,len)
     {var a=caml_array_of_string(buf);
      if(! (a instanceof joo_global_object.Uint8Array))
       a = new (joo_global_object.Uint8Array)(a);
      var buffer=Buffer.from(a);
      this.fs.readSync(this.fd,buffer,buf_offset,len,offset);
      for(var i=0;i < len;i++)
       caml_bytes_set(buf,buf_offset + i,buffer[buf_offset + i]);
      return 0};
    MlNodeFile.prototype.read_one
    =
    function(offset)
     {var a=new (joo_global_object.Uint8Array)(1),buffer=Buffer.from(a);
      this.fs.readSync(this.fd,buffer,0,1,offset);
      return buffer[0]};
    MlNodeFile.prototype.close = function(){this.fs.closeSync(this.fd)};
    MlNodeFile.prototype.constructor = MlNodeFile;
    function MlNodeDevice(root){this.fs = require("fs");this.root = root}
    MlNodeDevice.prototype.nm = function(name){return this.root + name};
    MlNodeDevice.prototype.exists
    =
    function(name){return this.fs.existsSync(this.nm(name))?1:0};
    MlNodeDevice.prototype.readdir
    =
    function(name){return this.fs.readdirSync(this.nm(name))};
    MlNodeDevice.prototype.is_dir
    =
    function(name){return this.fs.statSync(this.nm(name)).isDirectory()?1:0};
    MlNodeDevice.prototype.unlink
    =
    function(name)
     {var b=this.fs.existsSync(this.nm(name))?1:0;
      this.fs.unlinkSync(this.nm(name));
      return b};
    MlNodeDevice.prototype.open
    =
    function(name,f)
     {var consts=require("constants"),res=0;
      for(var key in f)
       switch(key)
        {case "rdonly":res |= consts.O_RDONLY;break;
         case "wronly":res |= consts.O_WRONLY;break;
         case "append":res |= consts.O_WRONLY | consts.O_APPEND;break;
         case "create":res |= consts.O_CREAT;break;
         case "truncate":res |= consts.O_TRUNC;break;
         case "excl":res |= consts.O_EXCL;break;
         case "binary":res |= consts.O_BINARY;break;
         case "text":res |= consts.O_TEXT;break;
         case "nonblock":res |= consts.O_NONBLOCK;break
         }
      var fd=this.fs.openSync(this.nm(name),res);
      return new MlNodeFile(fd)};
    MlNodeDevice.prototype.rename
    =
    function(o,n){this.fs.renameSync(this.nm(o),this.nm(n))};
    MlNodeDevice.prototype.constructor = MlNodeDevice;
    var caml_root=caml_current_dir.match(/[^\/]*\//)[0];
    function fs_node_supported()
     {return typeof joo_global_object.process
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions
             !==
             "undefined"
             &&
             typeof joo_global_object.process.versions.node
             !==
             "undefined"
             &&
             joo_global_object.process.platform
             !==
             "browser"}
    var jsoo_mount_point=[];
    if(fs_node_supported())
     jsoo_mount_point.push
      ({path:caml_root,device:new MlNodeDevice(caml_root)});
    else
     jsoo_mount_point.push
      ({path:caml_root,device:new MlFakeDevice(caml_root)});
    jsoo_mount_point.push
     ({path:caml_root + "static/",
       device:new MlFakeDevice(caml_root + "static/")});
    function resolve_fs_device(name)
     {var
       path=caml_make_path(name),
       name=path.join("/"),
       name_slash=name + "/",
       res;
      for(var i=0;i < jsoo_mount_point.length;i++)
       {var m=jsoo_mount_point[i];
        if
         (name_slash.search(m.path)
          ==
          0
          &&
          (! res || res.path.length < m.path.length))
         res
         =
         {path:m.path,
          device:m.device,
          rest:name.substring(m.path.length,name.length)}}
      return res}
    function caml_create_file(name,content)
     {var root=resolve_fs_device(name);
      if(! root.device.register)caml_failwith("cannot register file");
      root.device.register(root.rest,content);
      return 0}
    function caml_fill_bytes(s,i,l,c)
     {if(l > 0)
       if(i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
        if(c == 0)
         {s.c = "";s.t = 2}
        else
         {s.c = caml_str_repeat(l,String.fromCharCode(c));s.t = l == s.l?0:2}
       else
        {if(s.t != 4)caml_convert_string_to_array(s);
         for(l += i;i < l;i++)s.c[i] = c}
      return 0}
    function caml_jsbytes_of_string(s)
     {if((s.t & 6) != 0)caml_convert_string_to_bytes(s);return s.c}
    function caml_parse_format(fmt)
     {fmt = caml_jsbytes_of_string(fmt);
      var len=fmt.length;
      if(len > 31)caml_invalid_argument("format_int: format too long");
      var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:- 1,
         conv:"f"};
      for(var i=0;i < len;i++)
       {var c=fmt.charAt(i);
        switch(c)
         {case "-":f.justify = "-";break;
          case "+":
          case " ":f.signstyle = c;break;
          case "0":f.filler = "0";break;
          case "#":f.alternate = true;break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.width = f.width * 10 + c;i++}
           i--;
           break;
          case ".":
           f.prec = 0;
           i++;
           while(c = fmt.charCodeAt(i) - 48,c >= 0 && c <= 9)
            {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10;break;
          case "x":f.base = 16;break;
          case "X":f.base = 16;f.uppercase = true;break;
          case "o":f.base = 8;break;
          case "e":
          case "f":
          case "g":f.signedconv = true;f.conv = c;break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv = c.toLowerCase();
           break
          }}
      return f}
    function caml_finish_formatting(f,rawbuffer)
     {if(f.uppercase)rawbuffer = rawbuffer.toUpperCase();
      var len=rawbuffer.length;
      if(f.signedconv && (f.sign < 0 || f.signstyle != "-"))len++;
      if(f.alternate){if(f.base == 8)len += 1;if(f.base == 16)len += 2}
      var buffer="";
      if(f.justify == "+" && f.filler == " ")
       for(var i=len;i < f.width;i++)buffer += " ";
      if(f.signedconv)
       if(f.sign < 0)
        buffer += "-";
       else
        if(f.signstyle != "-")buffer += f.signstyle;
      if(f.alternate && f.base == 8)buffer += "0";
      if(f.alternate && f.base == 16)buffer += "0x";
      if(f.justify == "+" && f.filler == "0")
       for(var i=len;i < f.width;i++)buffer += "0";
      buffer += rawbuffer;
      if(f.justify == "-")for(var i=len;i < f.width;i++)buffer += " ";
      return caml_new_string(buffer)}
    function caml_format_float(fmt,x)
     {function toFixed(x,dp)
       {if(Math.abs(x) < 1.0)
         return x.toFixed(dp);
        else
         {var e=parseInt(x.toString().split("+")[1]);
          if(e > 20)
           {e -= 20;
            x /= Math.pow(10,e);
            x += new Array(e + 1).join("0");
            if(dp > 0)x = x + "." + new Array(dp + 1).join("0");
            return x}
          else
           return x.toFixed(dp)}}
      var s,f=caml_parse_format(fmt),prec=f.prec < 0?6:f.prec;
      if(x < 0 || x == 0 && 1 / x == - Infinity){f.sign = - 1;x = - x}
      if(isNaN(x))
       {s = "nan";f.filler = " "}
      else
       if(! isFinite(x))
        {s = "inf";f.filler = " "}
       else
        switch(f.conv)
         {case "e":
           var s=x.toExponential(prec),i=s.length;
           if(s.charAt(i - 3) == "e")
            s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
           break;
          case "f":s = toFixed(x,prec);break;
          case "g":
           prec = prec?prec:1;
           s = x.toExponential(prec - 1);
           var j=s.indexOf("e"),exp=+ s.slice(j + 1);
           if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec)
            {var i=j - 1;
             while(s.charAt(i) == "0")i--;
             if(s.charAt(i) == ".")i--;
             s = s.slice(0,i + 1) + s.slice(j);
             i = s.length;
             if(s.charAt(i - 3) == "e")
              s = s.slice(0,i - 1) + "0" + s.slice(i - 1);
             break}
           else
            {var p=prec;
             if(exp < 0)
              {p -= exp + 1;s = x.toFixed(p)}
             else
              while(s = x.toFixed(p),s.length > prec + 1)p--;
             if(p)
              {var i=s.length - 1;
               while(s.charAt(i) == "0")i--;
               if(s.charAt(i) == ".")i--;
               s = s.slice(0,i + 1)}}
           break
          }
      return caml_finish_formatting(f,s)}
    function caml_format_int(fmt,i)
     {if(caml_jsbytes_of_string(fmt) == "%d")return caml_new_string("" + i);
      var f=caml_parse_format(fmt);
      if(i < 0)if(f.signedconv){f.sign = - 1;i = - i}else i >>>= 0;
      var s=i.toString(f.base);
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - s.length;
        if(n > 0)s = caml_str_repeat(n,"0") + s}
      return caml_finish_formatting(f,s)}
    var caml_oo_last_id=0;
    function caml_fresh_oo_id(){return caml_oo_last_id++}
    function caml_fs_init()
     {var tmp=joo_global_object.caml_fs_tmp;
      if(tmp)
       for(var i=0;i < tmp.length;i++)
        caml_create_file(tmp[i].name,tmp[i].content);
      joo_global_object.caml_create_file_extern = caml_create_file;
      joo_global_object.caml_fs_tmp = [];
      return 0}
    function caml_get_exception_raw_backtrace(){return [0]}
    var caml_method_cache=[];
    function caml_get_public_method(obj,tag,cacheid)
     {var meths=obj[1],ofs=caml_method_cache[cacheid];
      if(ofs === null)
       for(var i=caml_method_cache.length;i < cacheid;i++)
        caml_method_cache[i] = 0;
      else
       if(meths[ofs] === tag)return meths[ofs - 1];
      var li=3,hi=meths[1] * 2 + 1,mi;
      while(li < hi)
       {mi = li + hi >> 1 | 1;if(tag < meths[mi + 1])hi = mi - 2;else li = mi}
      caml_method_cache[cacheid] = li + 1;
      return tag == meths[li + 1]?meths[li]:0}
    function caml_greaterequal(x,y)
     {return + (caml_compare_val(x,y,false) >= 0)}
    function caml_utf8_of_utf16(s)
     {for(var b="",t=b,c,d,i=0,l=s.length;i < l;i++)
       {c = s.charCodeAt(i);
        if(c < 0x80)
         {for(var j=i + 1;j < l && (c = s.charCodeAt(j)) < 0x80;j++);
          if(j - i > 512)
           {t.substr(0,1);b += t;t = "";b += s.slice(i,j)}
          else
           t += s.slice(i,j);
          if(j == l)break;
          i = j}
        if(c < 0x800)
         {t += String.fromCharCode(0xc0 | c >> 6);
          t += String.fromCharCode(0x80 | c & 0x3f)}
        else
         if(c < 0xd800 || c >= 0xdfff)
          t
          +=
          String.fromCharCode
           (0xe0 | c >> 12,0x80 | c >> 6 & 0x3f,0x80 | c & 0x3f);
         else
          if
           (c
            >=
            0xdbff
            ||
            i
            +
            1
            ==
            l
            ||
            (d = s.charCodeAt(i + 1))
            <
            0xdc00
            ||
            d
            >
            0xdfff)
           t += "\xef\xbf\xbd";
          else
           {i++;
            c = (c << 10) + d - 0x35fdc00;
            t
            +=
            String.fromCharCode
             (0xf0 | c >> 18,
              0x80 | c >> 12 & 0x3f,
              0x80 | c >> 6 & 0x3f,
              0x80 | c & 0x3f)}
        if(t.length > 1024){t.substr(0,1);b += t;t = ""}}
      return b + t}
    function caml_js_to_string(s)
     {var tag=9;
      if(! caml_is_ascii(s))tag = 8,s = caml_utf8_of_utf16(s);
      return new MlBytes(tag,s,s.length)}
    function caml_hexstring_of_float(x,prec,style)
     {if(! isFinite(x))
       {if(isNaN(x))return caml_js_to_string("nan");
        return caml_js_to_string(x > 0?"infinity":"-infinity")}
      var sign=x == 0 && 1 / x == - Infinity?1:x >= 0?0:1;
      if(sign)x = - x;
      var exp=0;
      if(x == 0)
       ;
      else
       if(x < 1)
        while(x < 1 && exp > - 1022){x *= 2;exp--}
       else
        while(x >= 2){x /= 2;exp++}
      var exp_sign=exp < 0?"":"+",sign_str="";
      if(sign)
       sign_str = "-";
      else
       switch(style)
        {case 43:sign_str = "+";break;
         case 32:sign_str = " ";break;
         default:break}
      if(prec >= 0 && prec < 13)
       {var cst=Math.pow(2,prec * 4);x = Math.round(x * cst) / cst}
      var x_str=x.toString(16);
      if(prec >= 0)
       {var idx=x_str.indexOf(".");
        if(idx < 0)
         x_str += "." + caml_str_repeat(prec,"0");
        else
         {var size=idx + 1 + prec;
          if(x_str.length < size)
           x_str += caml_str_repeat(size - x_str.length,"0");
          else
           x_str = x_str.substr(0,size)}}
      return caml_js_to_string
              (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10))}
    function caml_int64_is_zero(x){return (x[3] | x[2] | x[1]) == 0}
    function caml_int64_of_int32(x)
     {return [255,x & 0xffffff,x >> 24 & 0xffffff,x >> 31 & 0xffff]}
    function caml_obj_dup(x)
     {var l=x.length,a=new Array(l);
      for(var i=0;i < l;i++)a[i] = x[i];
      return a}
    function caml_int64_sub(x,y)
     {var
       z1=x[1] - y[1],
       z2=x[2] - y[2] + (z1 >> 24),
       z3=x[3] - y[3] + (z2 >> 24);
      return [255,z1 & 0xffffff,z2 & 0xffffff,z3 & 0xffff]}
    function caml_int64_ucompare(x,y)
     {if(x[3] > y[3])return 1;
      if(x[3] < y[3])return - 1;
      if(x[2] > y[2])return 1;
      if(x[2] < y[2])return - 1;
      if(x[1] > y[1])return 1;
      if(x[1] < y[1])return - 1;
      return 0}
    function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 0xffffff;
      x[1] = x[1] << 1 & 0xffffff}
    function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 0xffffff;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 0xffffff;
      x[3] = x[3] >>> 1}
    function caml_int64_udivmod(x,y)
     {var
       offset=0,
       modulus=caml_obj_dup(x),
       divisor=caml_obj_dup(y),
       quotient=[255,0,0,0];
      while(caml_int64_ucompare(modulus,divisor) > 0)
       {offset++;caml_int64_lsl1(divisor)}
      while(offset >= 0)
       {offset--;
        caml_int64_lsl1(quotient);
        if(caml_int64_ucompare(modulus,divisor) >= 0)
         {quotient[1]++;modulus = caml_int64_sub(modulus,divisor)}
        caml_int64_lsr1(divisor)}
      return [0,quotient,modulus]}
    function caml_int64_to_int32(x){return x[1] | x[2] << 24}
    function caml_int64_is_negative(x){return x[3] << 16 < 0}
    function caml_int64_neg(x)
     {var y1=- x[1],y2=- x[2] + (y1 >> 24),y3=- x[3] + (y2 >> 24);
      return [255,y1 & 0xffffff,y2 & 0xffffff,y3 & 0xffff]}
    function caml_int64_format(fmt,x)
     {var f=caml_parse_format(fmt);
      if(f.signedconv && caml_int64_is_negative(x))
       {f.sign = - 1;x = caml_int64_neg(x)}
      var
       buffer="",
       wbase=caml_int64_of_int32(f.base),
       cvtbl="0123456789abcdef";
      do
       {var p=caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer}
      while
       (! caml_int64_is_zero(x));
      if(f.prec >= 0)
       {f.filler = " ";
        var n=f.prec - buffer.length;
        if(n > 0)buffer = caml_str_repeat(n,"0") + buffer}
      return caml_finish_formatting(f,buffer)}
    function caml_string_unsafe_get(s,i)
     {switch(s.t & 6)
       {default:if(i >= s.c.length)return 0;case 0:return s.c.charCodeAt(i);
        case 4:return s.c[i]
        }}
    function caml_ml_string_length(s){return s.l}
    function caml_parse_sign_and_base(s)
     {var i=0,len=caml_ml_string_length(s),base=10,sign=1;
      if(len > 0)
       switch(caml_string_unsafe_get(s,i))
        {case 45:i++;sign = - 1;break;case 43:i++;sign = 1;break}
      if(i + 1 < len && caml_string_unsafe_get(s,i) == 48)
       switch(caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2;break;
         case 111:
         case 79:base = 8;i += 2;break;
         case 98:
         case 66:base = 2;i += 2;break;
         case 117:
         case 85:sign = 0;i += 2;break
         }
      return [i,sign,base]}
    function caml_parse_digit(c)
     {if(c >= 48 && c <= 57)return c - 48;
      if(c >= 65 && c <= 90)return c - 55;
      if(c >= 97 && c <= 122)return c - 87;
      return - 1}
    function caml_int_of_string(s)
     {var
       r=caml_parse_sign_and_base(s),
       i=r[0],
       sign=r[1],
       base=r[2],
       len=caml_ml_string_length(s),
       threshold=- 1 >>> 0,
       c=i < len?caml_string_unsafe_get(s,i):0,
       d=caml_parse_digit(c);
      if(d < 0 || d >= base)caml_failwith("int_of_string");
      var res=d;
      for(i++;i < len;i++)
       {c = caml_string_unsafe_get(s,i);
        if(c == 95)continue;
        d = caml_parse_digit(c);
        if(d < 0 || d >= base)break;
        res = base * res + d;
        if(res > threshold)caml_failwith("int_of_string")}
      if(i != len)caml_failwith("int_of_string");
      res = sign * res;
      if(base == 10 && (res | 0) != res)caml_failwith("int_of_string");
      return res | 0}
    function caml_js_from_array(a){return raw_array_sub(a,1,a.length - 1)}
    function caml_js_call(f,o,args)
     {return f.apply(o,caml_js_from_array(args))}
    function caml_js_get_console()
     {var
       c=joo_global_object.console?joo_global_object.console:{},
       m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
      function f(){}
      for(var i=0;i < m.length;i++)if(! c[m[i]])c[m[i]] = f;
      return c}
    function caml_js_on_ie()
     {var
       ua=
        joo_global_object.navigator?joo_global_object.navigator.userAgent:"";
      return ua.indexOf("MSIE") != - 1 && ua.indexOf("Opera") != 0}
    function caml_js_pure_expr(f){return f()}
    function caml_js_to_byte_string(s){return caml_new_string(s)}
    function caml_js_wrap_callback(f)
     {return function()
       {return arguments.length > 0
                ?caml_call_gen(f,arguments)
                :caml_call_gen(f,[undefined])}}
    function raw_array_cons(a,x)
     {var l=a.length,b=new Array(l + 1);
      b[0] = x;
      for(var i=1;i <= l;i++)b[i] = a[i - 1];
      return b}
    function caml_js_wrap_meth_callback(f)
     {return function()
       {return caml_call_gen(f,raw_array_cons(arguments,this))}}
    function caml_lessequal(x,y){return + (caml_compare_val(x,y,false) <= 0)}
    function caml_make_vect(len,init)
     {if(len < 0)caml_array_bound_error();
      var len=len + 1 | 0,b=new Array(len);
      b[0] = 0;
      for(var i=1;i < len;i++)b[i] = init;
      return b}
    var caml_ml_channels=new Array();
    function caml_ml_flush(chanid)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)caml_raise_sys_error("Cannot flush a closed channel");
      if(! chan.buffer || chan.buffer == "")return 0;
      if
       (chan.fd
        &&
        caml_global_data.fds[chan.fd]
        &&
        caml_global_data.fds[chan.fd].output)
       {var output=caml_global_data.fds[chan.fd].output;
        switch(output.length)
         {case 2:output(chanid,chan.buffer);break;default:output(chan.buffer)}}
      chan.buffer = "";
      return 0}
    function caml_std_output(chanid,s)
     {var
       chan=caml_ml_channels[chanid],
       str=caml_new_string(s),
       slen=caml_ml_string_length(str);
      chan.file.write(chan.offset,str,0,slen);
      chan.offset += slen;
      return 0}
    function js_print_stderr(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stderr.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.error && v.error(s)}}
    function js_print_stdout(s)
     {var s=caml_utf16_of_utf8(s),g=joo_global_object;
      if(g.process && g.process.stdout && g.process.stdout.write)
       g.process.stdout.write(s);
      else
       {if(s.charCodeAt(s.length - 1) == 10)s = s.substr(0,s.length - 1);
        var v=g.console;
        v && v.log && v.log(s)}}
    function caml_sys_open_internal(idx,output,file,flags)
     {if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
      var info={};
      info.file = file;
      info.offset = flags.append?file.length():0;
      info.flags = flags;
      info.output = output;
      caml_global_data.fds[idx] = info;
      if(! caml_global_data.fd_last_idx || idx > caml_global_data.fd_last_idx)
       caml_global_data.fd_last_idx = idx;
      return idx}
    function caml_sys_open(name,flags,_perms)
     {var f={};
      while(flags)
       {switch(flags[1])
         {case 0:f.rdonly = 1;break;
          case 1:f.wronly = 1;break;
          case 2:f.append = 1;break;
          case 3:f.create = 1;break;
          case 4:f.truncate = 1;break;
          case 5:f.excl = 1;break;
          case 6:f.binary = 1;break;
          case 7:f.text = 1;break;
          case 8:f.nonblock = 1;break
          }
        flags = flags[2]}
      if(f.rdonly && f.wronly)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_rdonly and Open_wronly are not compatible");
      if(f.text && f.binary)
       caml_raise_sys_error
        (name.toString()
         +
         " : flags Open_text and Open_binary are not compatible");
      var
       root=resolve_fs_device(name),
       file=root.device.open(root.rest,f),
       idx=caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
      return caml_sys_open_internal(idx + 1,caml_std_output,file,f)}
    caml_sys_open_internal
     (0,caml_std_output,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (1,js_print_stdout,new MlFakeFile(caml_create_bytes(0)));
    caml_sys_open_internal
     (2,js_print_stderr,new MlFakeFile(caml_create_bytes(0)));
    function caml_ml_open_descriptor_in(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.wronly)caml_raise_sys_error("fd " + fd + " is writeonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:false,
         refill:null};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_open_descriptor_out(fd)
     {var data=caml_global_data.fds[fd];
      if(data.flags.rdonly)caml_raise_sys_error("fd " + fd + " is readonly");
      var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         out:true,
         buffer:""};
      caml_ml_channels[channel.fd] = channel;
      return channel.fd}
    function caml_ml_out_channels_list()
     {var l=0;
      for(var c=0;c < caml_ml_channels.length;c++)
       if
        (caml_ml_channels[c]
         &&
         caml_ml_channels[c].opened
         &&
         caml_ml_channels[c].out)
        l = [0,caml_ml_channels[c].fd,l];
      return l}
    function caml_ml_output_bytes(chanid,buffer,offset,len)
     {var chan=caml_ml_channels[chanid];
      if(! chan.opened)
       caml_raise_sys_error("Cannot output to a closed channel");
      var string;
      if(offset == 0 && caml_ml_bytes_length(buffer) == len)
       string = buffer;
      else
       {string = caml_create_bytes(len);
        caml_blit_bytes(buffer,offset,string,0,len)}
      var
       jsstring=caml_jsbytes_of_string(string),
       id=jsstring.lastIndexOf("\n");
      if(id < 0)
       chan.buffer += jsstring;
      else
       {chan.buffer += jsstring.substr(0,id + 1);
        caml_ml_flush(chanid);
        chan.buffer += jsstring.substr(id + 1)}
      return 0}
    function caml_ml_output(chanid,buffer,offset,len)
     {return caml_ml_output_bytes(chanid,buffer,offset,len)}
    function caml_ml_output_char(chanid,c)
     {var s=caml_new_string(String.fromCharCode(c));
      caml_ml_output(chanid,s,0,1);
      return 0}
    function caml_notequal(x,y){return + (caml_compare_val(x,y,false) != 0)}
    function caml_obj_block(tag,size)
     {var o=new Array(size + 1);
      o[0] = tag;
      for(var i=1;i <= size;i++)o[i] = 0;
      return o}
    function caml_obj_tag(x)
     {if(x instanceof Array && x[0] == x[0] >>> 0)
       return x[0];
      else
       if(x instanceof MlBytes)
        return 252;
       else
        if(x instanceof Function || typeof x == "function")
         return 247;
        else
         if(x && x.caml_custom)return 255;else return 1000}
    function caml_read_file_content(name)
     {var root=resolve_fs_device(name);
      if(root.device.exists(root.rest))
       {var
         file=root.device.open(root.rest,{rdonly:1}),
         len=file.length(),
         buf=caml_create_bytes(len);
        file.read(0,buf,0,len);
        return buf}
      caml_raise_no_such_file(name)}
    function caml_register_global(n,v,name_opt)
     {if(name_opt && joo_global_object.toplevelReloc)
       n = joo_global_object.toplevelReloc(name_opt);
      caml_global_data[n + 1] = v;
      if(name_opt)caml_global_data[name_opt] = v}
    var caml_named_values={};
    function caml_register_named_value(nm,v)
     {caml_named_values[caml_jsbytes_of_string(nm)] = v;return 0}
    function caml_set_oo_id(b){b[2] = caml_oo_last_id++;return b}
    function caml_string_get(s,i)
     {if(i >>> 0 >= s.l)caml_string_bound_error();
      return caml_string_unsafe_get(s,i)}
    function caml_string_equal(s1,s2)
     {if(s1 === s2)return 1;
      s1.t & 6 && caml_convert_string_to_bytes(s1);
      s2.t & 6 && caml_convert_string_to_bytes(s2);
      return s1.c == s2.c?1:0}
    function caml_string_notequal(s1,s2){return 1 - caml_string_equal(s1,s2)}
    function caml_string_of_bytes(s){return s}
    function caml_sys_const_backend_type()
     {return [0,caml_new_string("js_of_ocaml")]}
    function caml_sys_const_max_wosize(){return 0x7FFFFFFF / 4 | 0}
    function caml_sys_exit(code)
     {var g=joo_global_object;
      if(g.quit)g.quit(code);
      if(g.process && g.process.exit)g.process.exit(code);
      caml_invalid_argument("Function 'exit' not implemented")}
    function caml_trampoline(res)
     {var c=1;
      while(res && res.joo_tramp)
       {res = res.joo_tramp.apply(null,res.joo_args);c++}
      return res}
    function caml_trampoline_return(f,args)
     {return {joo_tramp:f,joo_args:args}}
    function caml_update_dummy(x,y)
     {if(typeof y === "function"){x.fun = y;return 0}
      if(y.fun){x.fun = y.fun;return 0}
      var i=y.length;
      while(i--)x[i] = y[i];
      return 0}
    function caml_return_exn_constant(tag){return tag}
    function caml_named_value(nm){return caml_named_values[nm]}
    function caml_wrap_exception(e)
     {if(e instanceof Array)return e;
      if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
        e.message.match(/maximum call stack/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
        e.message.match(/too much recursion/i))
       return caml_return_exn_constant(caml_global_data.Stack_overflow);
      if(e instanceof joo_global_object.Error && caml_named_value("jsError"))
       return [0,caml_named_value("jsError"),e];
      return [0,caml_global_data.Failure,caml_js_to_string(String(e))]}
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5?f(a0,a1,a2,a3,a4):caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    caml_create_file
     ("/static/scene.json",
      '[0,[0,0,0,2810,3930],\n [0,[0,6,3880.68,304,3919.68],[0,53.5,3887.87,256.5,3911.87],\n  [0,596,3880.68,882,3919.68],[0,641.5,3887.87,836.5,3911.87],\n  [0,96,3804.67,214,3843.67],[0,117.5,3811.87,192.5,3832.87],\n  [0,680,3804.67,798,3843.67],[0,701.5,3811.87,776.5,3832.87],\n  [0,95,3729.67,215,3768.67],[0,115.5,3736.87,194.5,3757.87],\n  [0,679,3729.67,799,3768.67],[0,699.5,3736.87,778.5,3757.87],\n  [0,74,3653.67,236,3692.67],[0,100.5,3660.87,209.5,3684.87],\n  [0,696,3653.67,782,3692.67],[0,712,3660.87,766,3681.87],\n  [0,34,3578.67,276,3617.67],[0,73,3585.87,237,3609.87],\n  [0,520,3578.67,958,3617.67],[0,589,3585.87,889,3609.87],\n  [0,49,3502.67,261,3541.67],[0,82,3509.87,228,3530.87],\n  [0,633,3502.67,845,3541.67],[0,666,3509.87,812,3530.87],\n  [0,47,3427.67,263,3466.67],[0,81,3434.87,229,3458.87],\n  [0,631,3427.67,847,3466.67],[0,665,3434.87,813,3458.87],\n  [0,2763,2099.7,2805,2142.7],[0,2774,2110.3,2794,2130.3],\n  [0,2266,2101.7,2466,2140.7],[0,2298,2108.9,2434,2129.9],\n  [0,2258,2176.7,2474,2215.7],[0,2292.5,2183.9,2439.5,2204.9],\n  [0,2261,2252.7,2471,2291.7],[0,2294,2259.9,2438,2280.9],\n  [0,2262,1950.7,2470,1989.7],[0,2295,1957.9,2437,1978.9],\n  [0,2225,2025.7,2507,2064.7],[0,2268.5,2032.9,2463.5,2056.9],\n  [0,1243,2987.67,1425,3026.67],[0,1273,2994.87,1395,3015.87],\n  [0,1723,2987.67,1957,3026.67],[0,1762,2994.87,1918,3017.87],\n  [0,64,2410.7,246,2449.7],[0,93,2417.9,217,2441.9],\n  [0,648,2410.7,830,2449.7],[0,677,2417.9,801,2441.9],\n  [0,62,2334.7,248,2373.7],[0,92.5,2341.9,217.5,2365.9],\n  [0,650,2334.7,828,2373.7],[0,679,2341.9,799,2365.9],\n  [0,73,2259.7,237,2298.7],[0,101,2266.9,209,2287.9],\n  [0,623,2259.7,855,2298.7],[0,660.5,2266.9,817.5,2290.9],\n  [0,1730,2642.7,1950,2681.7],[0,1766.5,2649.9,1913.5,2673.9],\n  [0,2295,2642.7,2437,2681.7],[0,2318.5,2649.9,2413.5,2673.9],\n  [0,41,2183.7,269,2222.7],[0,78.5,2190.9,231.5,2214.9],\n  [0,664,2183.7,814,2222.7],[0,690.5,2190.9,787.5,2214.9],\n  [0,79,2108.7,231,2147.7],[0,103.5,2115.9,206.5,2136.9],\n  [0,662,2108.7,816,2147.7],[0,687.5,2115.9,790.5,2136.9],\n  [0,76,2032.7,234,2071.7],[0,103,2039.9,207,2063.9],\n  [0,628,2032.7,850,2071.7],[0,664.5,2039.9,813.5,2063.9],\n  [0,1222,1857.7,1446,1896.7],[0,1259,1864.9,1409,1888.9],\n  [0,1711,1859.7,1969,1898.7],[0,1753.5,1866.9,1926.5,1890.9],\n  [0,1761,2551.7,1919,2590.7],[0,1787,2558.9,1893,2582.9],\n  [0,2268,2403.7,2464,2442.7],[0,2300,2410.9,2432,2434.9],\n  [0,73,1622.7,237,1661.7],[0,101.5,1629.9,208.5,1652.9],\n  [0,670,1622.7,808,1661.7],[0,693.5,1629.9,784.5,1653.9],\n  [0,54,1547.7,256,1586.7],[0,88.5,1554.9,221.5,1578.9],\n  [0,638,1547.7,840,1586.7],[0,672.5,1554.9,805.5,1578.9],\n  [0,1236,3169.67,1432,3208.67],[0,1269,3176.87,1399,3199.87],\n  [0,1742,3234.67,1938,3273.67],[0,1775,3241.87,1905,3264.87],\n  [0,1711,2817.7,1969,2856.7],[0,1752,2824.9,1928,2848.9],\n  [0,2257,2817.7,2475,2856.7],[0,2291,2824.9,2441,2848.9],\n  [0,1819,1779.7,1861,1822.7],[0,1830,1790.3,1850,1810.3],\n  [0,1223,1687.7,1445,1726.7],[0,1259.5,1694.9,1408.5,1717.9],\n  [0,1172,1782.7,1496,1821.7],[0,1223.5,1789.9,1444.5,1813.9],\n  [0,1172,1953.7,1496,1992.7],[0,1223.5,1960.9,1444.5,1984.9],\n  [0,35,1471.7,275,1510.7],[0,72,1478.9,238,1502.9],\n  [0,619,1471.7,859,1510.7],[0,656,1478.9,822,1502.9],\n  [0,52,1396.7,258,1435.7],[0,85,1403.9,225,1424.9],\n  [0,636,1396.7,842,1435.7],[0,669,1403.9,809,1424.9],\n  [0,74,1320.7,236,1359.7],[0,102,1327.9,208,1351.9],\n  [0,663,1320.7,815,1359.7],[0,688.5,1327.9,789.5,1351.9],\n  [0,64,1245.7,246,1284.7],[0,95.5,1252.9,214.5,1276.9],\n  [0,679,1245.7,799,1284.7],[0,699,1252.9,779,1276.9],\n  [0,45,1169.7,265,1208.7],[0,82,1176.9,228,1200.9],\n  [0,619,1169.7,859,1208.7],[0,656.5,1176.9,821.5,1200.9],\n  [0,119,1094.7,191,1133.7],[0,134,1101.9,176,1122.9],\n  [0,651,1094.7,827,1133.7],[0,680,1101.9,798,1125.9],\n  [0,120,792.699,190,831.699],[0,133.5,799.9,176.5,823.9],\n  [0,649,792.699,829,831.699],[0,678,799.9,800,823.9],\n  [0,718,904.699,760,947.699],[0,729,915.3,749,935.3],\n  [0,68,867.699,242,906.699],[0,96,874.9,214,898.9],\n  [0,54,943.699,256,982.699],[0,88,950.9,222,974.9],\n  [0,106,1018.7,204,1057.7],[0,122.5,1025.9,187.5,1049.9],\n  [0,1771,2221.7,1909,2260.7],[0,1793.5,2228.9,1886.5,2249.9],\n  [0,2184,2327.7,2548,2366.7],[0,2238,2334.9,2494,2358.9],\n  [0,125,716.699,185,755.699],[0,138,723.9,172,744.9],\n  [0,691,716.699,787,755.699],[0,709,723.9,769,744.9],\n  [0,11,641.699,299,680.699],[0,58.5,648.9,251.5,672.9],\n  [0,603,576.699,875,615.699],[0,647,583.9,831,607.9],\n  [0,1740,611.699,1940,650.699],[0,1773,618.9,1907,642.9],\n  [0,2295,611.699,2437,650.699],[0,2321,618.9,2411,642.9],\n  [0,100,501.699,210,540.699],[0,119.5,509.9,190.5,529.9],\n  [0,662,501.699,816,540.699],[0,688,509.9,790,529.9],\n  [0,67,425.699,243,464.699],[0,95,432.9,215,456.9],\n  [0,664,425.699,814,464.699],[0,688.5,432.9,789.5,453.9],\n  [0,718,272.699,760,315.699],[0,729,283.3,749,303.3],\n  [0,9,199.699,301,238.699],[0,54,206.9,256,230.9],\n  [0,12,274.699,298,313.699],[0,56,281.9,254,305.9],\n  [0,4,350.699,306,389.699],[0,51.5,357.9,258.5,381.9],\n  [0,42,3287.67,268,3326.67],[0,77.5,3294.87,232.5,3318.87],\n  [0,617,3351.67,861,3390.67],[0,655.5,3358.87,822.5,3382.87],\n  [0,1819,84.6992,1861,127.699],[0,1830,95.3,1850,115.3],\n  [0,1222,10.6992,1446,49.6992],[0,1257,17.9,1411,41.9],\n  [0,1188,86.6992,1480,125.699],[0,1233.5,93.9,1434.5,117.9],\n  [0,1215,161.699,1453,200.699],[0,1252,168.9,1416,192.9],\n  [0,52,48.6992,258,87.6992],[0,87.5,55.9,222.5,78.9],\n  [0,75,123.699,235,162.699],[0,101.5,130.9,208.5,154.9],\n  [0,716,120.199,762,166.199],[0,727,134.6,751,152.6],\n  [0,33,1723.7,277,1762.7],[0,72.5,1730.9,237.5,1753.9],\n  [0,8,1808.7,302,1847.7],[0,53.5,1815.9,256.5,1839.9],\n  [0,8,1936.7,302,1975.7],[0,53.5,1943.9,256.5,1967.9],\n  [0,668,2684.7,810,2723.7],[0,691.5,2691.9,786.5,2712.9],\n  [0,648,2817.7,830,2856.7],[0,679.5,2824.9,798.5,2848.9],\n  [0,639,2565.7,839,2604.7],[0,671,2572.9,807,2596.9],\n  [0,652,2485.7,826,2524.7],[0,679.5,2492.9,798.5,2516.9],\n  [0,675,3017.67,803,3056.67],[0,696,3024.87,782,3045.87],\n  [0,675,3140.67,803,3179.67],[0,696,3147.87,782,3171.87],\n  [0,1244,2157.7,1424,2196.7],[0,1274,2164.9,1394,2188.9],\n  [0,1243,2359.7,1425,2398.7],[0,1273,2366.9,1395,2387.9],\n  [0,303.121,3899.18,596.828,3901.18],[0,213.129,3823.17,680.672,3825.17],\n  [0,214.75,3748.17,679.328,3750.17],[0,235.59,3672.17,696.328,3674.17],\n  [0,275.301,3597.17,520.871,3599.17],[0,260.762,3521.17,633.039,3523.17],\n  [0,262.109,3446.17,631.578,3448.17],[0,2465.1,2120.2,2763.2,2122.2],\n  [0,2439.62,2123.82,2763.98,2183.88],[0,2427.96,2129.3,2766.04,2258.57],\n  [0,2428.86,1983.43,2766.04,2113],[0,2446.92,2058.91,2763.88,2118.48],\n  [0,1424.2,3006.17,1723.9,3008.17],[0,245.289,2429.2,648.551,2431.2],\n  [0,247.539,2353.2,650.238,2355.2],[0,236.512,2278.2,623.422,2280.2],\n  [0,1949.6,2661.2,2295.2,2663.2],[0,268.289,2202.2,664.891,2204.2],\n  [0,230.75,2127.2,662.461,2129.2],[0,233.762,2051.2,628.391,2053.2],\n  [0,1445,1876.6,1711.3,1879.7],[0,1889.23,2437.34,2312.67,2558.26],\n  [0,236.512,1641.2,670.828,1643.2],[0,255.73,1566.2,638.078,1568.2],\n  [0,1414.07,3198.48,1759.93,3244.86],[0,1968.7,2836.2,2257.7,2838.2],\n  [0,1406.82,1719.71,1819.98,1798.38],[0,1495.1,1800.2,1819.3,1802.9],\n  [0,1384.07,1806.86,1820.93,1957.05],[0,274.59,1490.2,619.32,1492.2],\n  [0,257.73,1415.2,636.359,1417.2],[0,235.281,1339.2,663.309,1341.2],\n  [0,245.289,1264.2,679.301,1266.2],[0,264.5,1188.2,619.969,1190.2],\n  [0,190.648,1113.2,651.969,1115.2],[0,189.352,811.199,649.809,813.199],\n  [0,187.039,817.52,719.07,923.18],[0,237.363,891.703,718.516,925.797],\n  [0,249.738,926.504,718.473,958.195],[0,197.754,929.02,718.996,1030.88],\n  [0,1894.6,2251.22,2285.9,2331.98],[0,184.359,735.199,691.32,737.199],\n  [0,262.34,606.707,635.25,650.191],[0,1939.6,630.199,2295.9,632.199],\n  [0,209.68,520.199,662.191,522.199],[0,242.121,444.199,664.789,446.199],\n  [0,255.93,231.207,718.777,292.594],[0,297.121,293.199,718.43,295.199],\n  [0,256.602,295.809,718.59,357.891],[0,247.75,3316.36,641.281,3361.44],\n  [0,1415.75,41.5117,1819.75,104.09],[0,1479.3,105.199,1819.1,107.199],\n  [0,1418.55,108.211,1819.55,169.59],[0,1732.44,3252.65,1746.62,3262.46],\n  [0,265.527,3256.52,1733.63,3304.7],[0,1767.35,3266.04,1782.11,3275.61],\n  [0,858.574,3269.62,1769.62,3368.91],[0,1192.57,110.066,1206.9,119.863],\n  [0,761.176,113.898,1193.96,142.801],[0,1213.52,168.641,1227.8,178.441],\n  [0,761.176,143.605,1214.86,174.598],[0,705.75,138.289,719.781,148.109],\n  [0,234.059,142.199,706.75,144.199],[0,1729.4,628.211,1743.53,638.027],\n  [0,297.191,632.102,1730.52,659.602],[0,1730.45,622.766,1744.62,632.578],\n  [0,870.41,599.398,1731.63,628.699],[0,1231.03,1860.61,1245.54,1870.36],\n  [0,251.367,1753.11,1232.71,1866.59],[0,1213.95,1705.92,1228.12,1715.73],\n  [0,274.23,1709.8,1215.13,1740.5],[0,1164.61,1801.02,1178.73,1810.83],\n  [0,299.246,1804.9,1165.72,1826],[0,1214.81,1867.36,1229.02,1877.17],\n  [0,293.957,1833,1216.04,1873.3],[0,1162.7,1965.77,1176.82,1975.59],\n  [0,300.734,1957.3,1163.82,1971.7],[0,1219.47,1879.97,1233.8,1889.77],\n  [0,283.633,1883.8,1220.87,1948.6],[0,1722.11,2661.73,1736.32,2671.55],\n  [0,809.09,2665.6,1723.34,2702.5],[0,1730.73,2819.21,1745.24,2828.96],\n  [0,802.828,2710.91,1732.42,2825.19],[0,1700.2,2832.29,1714.23,2842.11],\n  [0,829.57,2836.2,1701.2,2838.2],[0,1745.66,2987.88,1760.28,2997.58],\n  [0,810.656,2847.31,1747.55,2993.87],[0,1749.33,2671.61,1763.96,2681.3],\n  [0,809.812,2675.31,1751.26,2826.89],[0,1750.95,2567.4,1765.03,2577.22],\n  [0,838.148,2571.3,1752.01,2584.9],[0,1727.37,2649.44,1741.7,2659.23],\n  [0,831.379,2590.61,1728.77,2655.39],[0,2260.46,2423.54,2274.71,2433.35],\n  [0,823.277,2427.4,2261.75,2501.9],[0,1745.99,2643.7,1760.58,2653.41],\n  [0,810.801,2514.31,1747.84,2649.69],[0,1749.73,2848.55,1764.42,2858.21],\n  [0,792.301,2852.21,1751.78,3028.45],[0,1776.56,3230.96,1791.41,3240.38],\n  [0,796.605,3043.79,1779.18,3236.91],[0,1732.71,3245.53,1746.91,3255.34],\n  [0,794.543,3167.67,1733.94,3251.47],[0,1741.53,3015.89,1756.11,3025.62],\n  [0,795.742,3019.63,1743.34,3153.26],[0,2293.6,2401.59,2308.38,2411.15],\n  [0,1390.87,2190.13,2295.93,2407.57],[0,2283.51,2323,2298.31,2332.51],\n  [0,1421.48,2171.56,2285.95,2328.97],[0,2254.79,2054.46,2269.32,2064.2],\n  [0,1409.38,2058.21,2256.52,2168.49],[0,2259.31,2413.75,2273.52,2423.57],\n  [0,1422.86,2382,2260.54,2419.7],[0,2181.51,2348.03,2195.71,2357.85],\n  [0,1423.77,2351.9,2182.73,2377.4]],\n [0,[2,155,3900.17,148,18.5,0,[0,"#000000"]],\n  [3,155,3903.87,"ubiquity-slideshow-kubuntu","14px serif",[0,"#000000"],0],\n  [2,739,3900.17,141.998,18.5,0,[0,"#000000"]],\n  [3,739,3903.87,"ubiquity-slideshow-ubuntu","14px serif",[0,"#000000"],0],\n  [2,155,3824.17,57.9996,18.5,0,[0,"#000000"]],\n  [3,155,3827.87,"tk8.4-doc","14px serif",[0,"#000000"],0],\n  [2,739,3824.17,57.9996,18.5,0,[0,"#000000"]],\n  [3,739,3827.87,"tk8.5-doc","14px serif",[0,"#000000"],0],\n  [2,155,3749.17,59.0004,18.5,0,[0,"#000000"]],\n  [3,155,3752.87,"tcl8.4-doc","14px serif",[0,"#000000"],0],\n  [2,739,3749.17,59.0004,18.5,0,[0,"#000000"]],\n  [3,739,3752.87,"tcl8.5-doc","14px serif",[0,"#000000"],0],\n  [2,155,3673.17,79.9992,18.5,0,[0,"#000000"]],\n  [3,155,3676.87,"openbsd-inetd","14px serif",[0,"#000000"],0],\n  [2,739,3673.17,42.0012,18.5,0,[0,"#000000"]],\n  [3,739,3676.87,"xinetd","14px serif",[0,"#000000"],0],\n  [2,155,3598.17,119.999,18.5,0,[0,"#000000"]],\n  [3,155,3601.87,"network-manager-kde","14px serif",[0,"#000000"],0],\n  [2,739,3598.17,218.002,18.5,0,[0,"#000000"]],\n  [3,739,3601.87,"plasma-widget-networkmanagement (x 2)","14px serif",\n   [0,"#000000"],0],\n  [2,155,3522.17,105.001,18.5,0,[0,"#000000"]],\n  [3,155,3525.87,"libstdc++6-4.4-doc","14px serif",[0,"#000000"],0],\n  [2,739,3522.17,105.001,18.5,0,[0,"#000000"]],\n  [3,739,3525.87,"libstdc++6-4.5-doc","14px serif",[0,"#000000"],0],\n  [2,155,3447.17,106.999,18.5,0,[0,"#000000"]],\n  [3,155,3450.87,"libstdc++6-4.4-dbg","14px serif",[0,"#000000"],0],\n  [2,739,3447.17,106.999,18.5,0,[0,"#000000"]],\n  [3,739,3450.87,"libstdc++6-4.5-dbg","14px serif",[0,"#000000"],0],\n  [2,2784,2121.2,20.0002,20.4998,0,[0,"#ff0000"]],\n  [3,2784,2125.3,"#","14px serif",[0,"#ff0000"],0],\n  [2,2366,2121.2,99,18.5,0,[0,"#000000"]],\n  [3,2366,2124.9,"libsdl1.2debian-all","14px serif",[0,"#000000"],0],\n  [2,2366,2196.2,106.999,18.5,0,[0,"#000000"]],\n  [3,2366,2199.9,"libsdl1.2debian-alsa","14px serif",[0,"#000000"],0],\n  [2,2366,2272.2,104,18.5,0,[0,"#000000"]],\n  [3,2366,2275.9,"libsdl1.2debian-esd","14px serif",[0,"#000000"],0],\n  [2,2366,1970.2,103,18.5,0,[0,"#000000"]],\n  [3,2366,1973.9,"libsdl1.2debian-oss","14px serif",[0,"#000000"],0],\n  [2,2366,2045.2,140,18.5,0,[0,"#000000"]],\n  [3,2366,2048.9,"libsdl1.2debian-pulseaudio","14px serif",[0,"#000000"],0],\n  [2,1334,3007.17,90,18.5,0,[0,"#000000"]],\n  [3,1334,3010.87,"libreadline5-dev","14px serif",[0,"#000000"],0],\n  [2,1840,3007.17,115.999,18.5,0,[0,"#000000"]],\n  [3,1840,3010.87,"libreadline6-dev (x 6)","14px serif",[0,"#000000"],0],\n  [2,155,2430.2,90,18.5,0,[0,"#000000"]],\n  [3,155,2433.9,"libreadline5-dbg","14px serif",[0,"#000000"],0],\n  [2,739,2430.2,90,18.5,0,[0,"#000000"]],\n  [3,739,2433.9,"libreadline6-dbg","14px serif",[0,"#000000"],0],\n  [2,155,2354.2,92.0016,18.5,0,[0,"#000000"]],\n  [3,155,2357.9,"libqt4-dbg (x 24)","14px serif",[0,"#000000"],0],\n  [2,739,2354.2,87.9984,18.5,0,[0,"#000000"]],\n  [3,739,2357.9,"qt-x11-free-dbg","14px serif",[0,"#000000"],0],\n  [2,155,2279.2,81,18.5,0,[0,"#000000"]],\n  [3,155,2282.9,"libneon27-dev","14px serif",[0,"#000000"],0],\n  [2,739,2279.2,114.998,18.5,0,[0,"#000000"]],\n  [3,739,2282.9,"libneon27-gnutls-dev","14px serif",[0,"#000000"],0],\n  [2,1840,2662.2,109.001,18.5,0,[0,"#000000"]],\n  [3,1840,2665.9,"libjpeg62-dev (x 23)","14px serif",[0,"#000000"],0],\n  [2,2366,2662.2,69.9984,18.5,0,[0,"#000000"]],\n  [3,2366,2665.9,"libjpeg8-dev","14px serif",[0,"#000000"],0],\n  [2,155,2203.2,113,18.5,0,[0,"#000000"]],\n  [3,155,2206.9,"libjack-jackd2-0 (x 2)","14px serif",[0,"#000000"],0],\n  [2,739,2203.2,74.0016,18.5,0,[0,"#000000"]],\n  [3,739,2206.9,"libjack0 (x 3)","14px serif",[0,"#000000"],0],\n  [2,155,2128.2,74.9988,18.5,0,[0,"#000000"]],\n  [3,155,2131.9,"libiodbc2-dev","14px serif",[0,"#000000"],0],\n  [2,739,2128.2,75.9996,18.5,0,[0,"#000000"]],\n  [3,739,2131.9,"unixodbc-dev","14px serif",[0,"#000000"],0],\n  [2,155,2052.2,78.0012,18.5,0,[0,"#000000"]],\n  [3,155,2055.9,"libgpod4 (x 9)","14px serif",[0,"#000000"],0],\n  [2,739,2052.2,110.002,18.5,0,[0,"#000000"]],\n  [3,739,2055.9,"libgpod4-nogtk (x 2)","14px serif",[0,"#000000"],0],\n  [2,1334,1877.2,110.999,18.5,0,[0,"#000000"]],\n  [3,1334,1880.9,"libgl1-mesa-glx (x 8)","14px serif",[0,"#000000"],0],\n  [2,1840,1879.2,128.002,18.5,0,[0,"#000000"]],\n  [3,1840,1882.9,"libgl1-mesa-swx11 (x 3)","14px serif",[0,"#000000"],0],\n  [2,1840,2571.2,78.0012,18.5,0,[0,"#000000"]],\n  [3,1840,2574.9,"libgd2-noxpm","14px serif",[0,"#000000"],0],\n  [2,2366,2423.2,96.9984,18.5,0,[0,"#000000"]],\n  [3,2366,2426.9,"libgd2-xpm (x 10)","14px serif",[0,"#000000"],0],\n  [2,155,1642.2,81,18.5,0,[0,"#000000"]],\n  [3,155,1645.9,"libelf-dev (x 3)","14px serif",[0,"#000000"],0],\n  [2,739,1642.2,68.0004,18.5,0,[0,"#000000"]],\n  [3,739,1645.9,"libelfg0-dev","14px serif",[0,"#000000"],0],\n  [2,155,1567.2,100.001,18.5,0,[0,"#000000"]],\n  [3,155,1570.9,"libdb4.7-java (x 3)","14px serif",[0,"#000000"],0],\n  [2,739,1567.2,100.001,18.5,0,[0,"#000000"]],\n  [3,739,1570.9,"libdb4.8-java (x 3)","14px serif",[0,"#000000"],0],\n  [2,1334,3189.17,96.9984,18.5,0,[0,"#000000"]],\n  [3,1334,3192.87,"libdb4.7-dev (x 2)","14px serif",[0,"#000000"],0],\n  [2,1840,3254.17,96.9984,18.5,0,[0,"#000000"]],\n  [3,1840,3257.87,"libdb4.8-dev (x 5)","14px serif",[0,"#000000"],0],\n  [2,1840,2837.2,128.002,18.5,0,[0,"#000000"]],\n  [3,1840,2840.9,"libcurl4-gnutls-dev (x 4)","14px serif",[0,"#000000"],0],\n  [2,2366,2837.2,108,18.5,0,[0,"#000000"]],\n  [3,2366,2840.9,"libcurl4-openssl-dev","14px serif",[0,"#000000"],0],\n  [2,1840,1801.2,20.0002,20.4998,0,[0,"#ff0000"]],\n  [3,1840,1805.3,"#","14px serif",[0,"#ff0000"],0],\n  [2,1334,1707.2,110.002,18.5,0,[0,"#000000"]],\n  [3,1334,1710.9,"libclutter-1.0-0 (x 2)","14px serif",[0,"#000000"],0],\n  [2,1334,1802.2,160.999,18.5,0,[0,"#000000"]],\n  [3,1334,1805.9,"libclutter-eglx-es11-1.0-0 (x 2)","14px serif",\n   [0,"#000000"],0],\n  [2,1334,1973.2,160.999,18.5,0,[0,"#000000"]],\n  [3,1334,1976.9,"libclutter-eglx-es20-1.0-0 (x 2)","14px serif",\n   [0,"#000000"],0],\n  [2,155,1491.2,119.002,18.5,0,[0,"#000000"]],\n  [3,155,1494.9,"lib64stdc++6-4.4-dbg","14px serif",[0,"#000000"],0],\n  [2,739,1491.2,119.002,18.5,0,[0,"#000000"]],\n  [3,739,1494.9,"lib64stdc++6-4.5-dbg","14px serif",[0,"#000000"],0],\n  [2,155,1416.2,101.999,18.5,0,[0,"#000000"]],\n  [3,155,1419.9,"lib64readline5-dev","14px serif",[0,"#000000"],0],\n  [2,739,1416.2,101.999,18.5,0,[0,"#000000"]],\n  [3,739,1419.9,"lib64readline6-dev","14px serif",[0,"#000000"],0],\n  [2,155,1340.2,79.9992,18.5,0,[0,"#000000"]],\n  [3,155,1343.9,"hunspell-tools","14px serif",[0,"#000000"],0],\n  [2,739,1340.2,74.9988,18.5,0,[0,"#000000"]],\n  [3,739,1343.9,"myspell-tools","14px serif",[0,"#000000"],0],\n  [2,155,1265.2,90,18.5,0,[0,"#000000"]],\n  [3,155,1268.9,"hunspell-fr (x 3)","14px serif",[0,"#000000"],0],\n  [2,739,1265.2,59.0004,18.5,0,[0,"#000000"]],\n  [3,739,1268.9,"myspell-fr","14px serif",[0,"#000000"],0],\n  [2,155,1189.2,109.001,18.5,0,[0,"#000000"]],\n  [3,155,1192.9,"hunspell-de-de (x 3)","14px serif",[0,"#000000"],0],\n  [2,739,1189.2,119.002,18.5,0,[0,"#000000"]],\n  [3,739,1192.9,"myspell-de-de-oldspell","14px serif",[0,"#000000"],0],\n  [2,155,1114.2,34.9999,18.5,0,[0,"#000000"]],\n  [3,155,1117.9,"hello","14px serif",[0,"#000000"],0],\n  [2,739,1114.2,87.0012,18.5,0,[0,"#000000"]],\n  [3,739,1117.9,"hello-debhelper","14px serif",[0,"#000000"],0],\n  [2,155,812.2,33.9998,18.5,0,[0,"#000000"]],\n  [3,155,815.9,"grub","14px serif",[0,"#000000"],0],\n  [2,739,812.2,88.9992,18.5,0,[0,"#000000"]],\n  [3,739,815.9,"grub-legacy-ec2","14px serif",[0,"#000000"],0],\n  [2,739,926.2,20.0002,20.4998,0,[0,"#ff0000"]],\n  [3,739,930.3,"#","14px serif",[0,"#ff0000"],0],\n  [2,155,887.2,86.0004,18.5,0,[0,"#000000"]],\n  [3,155,890.9,"grub-efi-amd64","14px serif",[0,"#000000"],0],\n  [2,155,963.2,100.001,18.5,0,[0,"#000000"]],\n  [3,155,966.9,"grub-efi-ia32 (x 2)","14px serif",[0,"#000000"],0],\n  [2,155,1038.2,47.9988,18.5,0,[0,"#000000"]],\n  [3,155,1041.9,"grub-pc","14px serif",[0,"#000000"],0],\n  [2,1840,2241.2,68.0004,18.5,0,[0,"#000000"]],\n  [3,1840,2244.9,"foomatic-db","14px serif",[0,"#000000"],0],\n  [2,2366,2347.2,181.001,18.5,0,[0,"#000000"]],\n  [3,2366,2350.9,"foomatic-db-compressed-ppds (x 4)","14px serif",\n   [0,"#000000"],0],\n  [2,155,736.2,29.0002,18.5,0,[0,"#000000"]],\n  [3,155,739.9,"flex","14px serif",[0,"#000000"],0],\n  [2,739,736.2,47.0016,18.5,0,[0,"#000000"]],\n  [3,739,739.9,"flex-old","14px serif",[0,"#000000"],0],\n  [2,155,661.2,142.999,18.5,0,[0,"#000000"]],\n  [3,155,664.9,"exim4-daemon-heavy (x 2)","14px serif",[0,"#000000"],0],\n  [2,739,596.2,135,18.5,0,[0,"#000000"]],\n  [3,739,599.9,"exim4-daemon-light (x 2)","14px serif",[0,"#000000"],0],\n  [2,1840,631.2,99,18.5,0,[0,"#000000"]],\n  [3,1840,634.9,"exim4-config (x 5)","14px serif",[0,"#000000"],0],\n  [2,2366,631.2,69.9984,18.5,0,[0,"#000000"]],\n  [3,2366,634.9,"postfix (x 9)","14px serif",[0,"#000000"],0],\n  [2,155,521.2,54,18.5,0,[0,"#000000"]],\n  [3,155,524.9,"emacs23","14px serif",[0,"#000000"],0],\n  [2,739,521.2,75.9996,18.5,0,[0,"#000000"]],\n  [3,739,524.9,"emacs23-nox","14px serif",[0,"#000000"],0],\n  [2,155,445.2,87.0012,18.5,0,[0,"#000000"]],\n  [3,155,448.9,"debconf-english","14px serif",[0,"#000000"],0],\n  [2,739,445.2,74.0016,18.5,0,[0,"#000000"]],\n  [3,739,448.9,"debconf-i18n","14px serif",[0,"#000000"],0],\n  [2,739,294.2,20.0002,20.4998,0,[0,"#ff0000"]],\n  [3,739,298.3,"#","14px serif",[0,"#ff0000"],0],\n  [2,155,219.2,145.001,18.5,0,[0,"#000000"]],\n  [3,155,222.9,"bacula-common-mysql (x 3)","14px serif",[0,"#000000"],0],\n  [2,155,294.2,141.998,18.5,0,[0,"#000000"]],\n  [3,155,297.9,"bacula-common-pgsql (x 3)","14px serif",[0,"#000000"],0],\n  [2,155,370.2,150.001,18.5,0,[0,"#000000"]],\n  [3,155,373.9,"bacula-common-sqlite3 (x 3)","14px serif",[0,"#000000"],0],\n  [2,155,3307.17,112,18.5,0,[0,"#000000"]],\n  [3,155,3310.87,"apache2-prefork-dev","14px serif",[0,"#000000"],0],\n  [2,739,3371.17,121,18.5,0,[0,"#000000"]],\n  [3,739,3374.87,"apache2-threaded-dev","14px serif",[0,"#000000"],0],\n  [2,1840,106.2,20.0002,20.4998,0,[0,"#ff0000"]],\n  [3,1840,110.3,"#","14px serif",[0,"#ff0000"],0],\n  [2,1334,30.2,110.999,18.5,0,[0,"#000000"]],\n  [3,1334,33.9,"apache2-mpm-event","14px serif",[0,"#000000"],0],\n  [2,1334,106.2,145.001,18.5,0,[0,"#000000"]],\n  [3,1334,109.9,"apache2-mpm-prefork (x 2)","14px serif",[0,"#000000"],0],\n  [2,1334,181.2,118.001,18.5,0,[0,"#000000"]],\n  [3,1334,184.9,"apache2-mpm-worker","14px serif",[0,"#000000"],0],\n  [2,155,68.2,101.999,18.5,0,[0,"#000000"]],\n  [3,155,71.9,"abrowser (x 7049)","14px serif",[0,"#000000"],0],\n  [2,155,143.2,78.9984,18.5,0,[0,"#000000"]],\n  [3,155,146.9,"eucalyptus-nc","14px serif",[0,"#000000"],0],\n  [2,739,143.2,22,22,0,[0,"#0000ff"]],\n  [3,739,147.6,"or","14px serif",[0,"#0000ff"],0],\n  [2,155,1743.2,121,18.5,0,[0,"#000000"]],\n  [3,155,1746.9,"libclutter-1.0-dev (x 2)","14px serif",[0,"#000000"],0],\n  [2,155,1828.2,146.002,18.5,0,[0,"#000000"]],\n  [3,155,1831.9,"libclutter-eglx-es11-1.0-dev","14px serif",[0,"#000000"],0],\n  [2,155,1956.2,146.002,18.5,0,[0,"#000000"]],\n  [3,155,1959.9,"libclutter-eglx-es20-1.0-dev","14px serif",[0,"#000000"],0],\n  [2,739,2704.2,69.9984,18.5,0,[0,"#000000"]],\n  [3,739,2707.9,"libecore-dev","14px serif",[0,"#000000"],0],\n  [2,739,2837.2,90,18.5,0,[0,"#000000"]],\n  [3,739,2840.9,"libedje-dev (x 2)","14px serif",[0,"#000000"],0],\n  [2,739,2585.2,99,18.5,0,[0,"#000000"]],\n  [3,739,2588.9,"libgd2-noxpm-dev","14px serif",[0,"#000000"],0],\n  [2,739,2505.2,86.0004,18.5,0,[0,"#000000"]],\n  [3,739,2508.9,"libgd2-xpm-dev","14px serif",[0,"#000000"],0],\n  [2,739,3037.17,63,18.5,0,[0,"#000000"]],\n  [3,739,3040.87,"librdf0-dev","14px serif",[0,"#000000"],0],\n  [2,739,3160.17,63,18.5,0,[0,"#000000"]],\n  [3,739,3163.87,"librpm-dev","14px serif",[0,"#000000"],0],\n  [2,1334,2177.2,88.9992,18.5,0,[0,"#000000"]],\n  [3,1334,2180.9,"ubuntu-desktop","14px serif",[0,"#000000"],0],\n  [2,1334,2379.2,90,18.5,0,[0,"#000000"]],\n  [3,1334,2382.9,"ubuntu-netbook","14px serif",[0,"#000000"],0],\n  [0,[0,[0,303.12,3900.17],[1,393.26,3900.17,507.79,3900.17,596.83,3900.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,213.13,3824.17],[1,324.93,3824.17,568.72,3824.17,680.67,3824.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,214.75,3749.17],[1,326.82,3749.17,567.33,3749.17,679.33,3749.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,235.59,3673.17],[1,361.22,3673.17,599.38,3673.17,696.33,3673.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,275.3,3598.17],[1,346.08,3598.17,437.75,3598.17,520.87,3598.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,260.76,3522.17],[1,366.27,3522.17,527.46,3522.17,633.04,3522.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,262.11,3447.17],[1,367.16,3447.17,526.43,3447.17,631.58,3447.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,2465.1,2121.2],[1,2564.3,2121.2,2709.7,2121.2,2763.2,2121.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,2439.8,2182.9],[1,2538,2165.3,2706,2135.2,2763.8,2124.8]],0,\n   [0,"#ff0000"]],\n  [0,\n   [0,[0,2428.2,2257.6],[1,2463.5,2248.9,2508.1,2236.7,2547,2223.2],\n    [1,2630.5,2194.1,2726.2,2149.2,2765.6,2130.2]],\n   0,[0,"#ff0000"]],\n  [0,\n   [0,[0,2429.1,1984.4],[1,2464.2,1993,2508.5,2004.8,2547,2018.2],\n    [1,2630.7,2047.3,2726.3,2092.8,2765.6,2112.1]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,2447.1,2059.9],[1,2546.1,2077.9,2707.3,2107.2,2763.7,2117.5]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1424.2,3007.17],[1,1507.8,3007.17,1632.8,3007.17,1723.9,3007.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,245.29,2430.2],[1,354.95,2430.2,538.82,2430.2,648.55,2430.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,247.54,2354.2],[1,358.01,2354.2,541.46,2354.2,650.24,2354.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,236.51,2279.2],[1,337.2,2279.2,509.15,2279.2,623.42,2279.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1949.6,2662.2],[1,2053.5,2662.2,2206.4,2662.2,2295.2,2662.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,268.29,2203.2],[1,385.38,2203.2,564.77,2203.2,664.89,2203.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,230.75,2128.2],[1,342.47,2128.2,550.28,2128.2,662.46,2128.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,233.76,2052.2],[1,335.49,2052.2,513.15,2052.2,628.39,2052.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1445,1877.6],[1,1523.6,1877.9,1629.1,1878.3,1711.3,1878.7]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1889.5,2557.3],[1,1988.5,2529.4,2210.1,2467.1,2312.4,2438.3]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,236.51,1642.2],[1,352.41,1642.2,562.73,1642.2,670.83,1642.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,255.73,1567.2],[1,362.75,1567.2,530.98,1567.2,638.08,1567.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1414.2,3199.47],[1,1508.8,3211.63,1665.2,3231.71,1759.8,3243.87]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,1968.7,2837.2],[1,2057.3,2837.2,2173.8,2837.2,2257.7,2837.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1407,1720.7],[1,1525,1742.7,1751.2,1784.7,1819.8,1797.4]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1495.1,1801.9],[1,1614.3,1801.6,1765,1801.3,1819.3,1801.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1384.4,1956.1],[1,1493.6,1918.9,1748.3,1832.3,1820.6,1807.8]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,274.59,1491.2],[1,375.29,1491.2,518.6,1491.2,619.32,1491.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,257.73,1416.2],[1,364.26,1416.2,529.85,1416.2,636.36,1416.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,235.28,1340.2],[1,348.31,1340.2,552.84,1340.2,663.31,1340.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,245.29,1265.2],[1,365.99,1265.2,576.62,1265.2,679.3,1265.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,264.5,1189.2],[1,365.73,1189.2,515.8,1189.2,619.97,1189.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,190.65,1114.2],[1,281.11,1114.2,521.56,1114.2,651.97,1114.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,189.35,812.2],[1,278.29,812.2,518.28,812.2,649.81,812.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,187.23,818.5],[1,293.76,839.3,632.65,905.4,718.88,922.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,237.43,892.7],[1,374.68,901.8,642.46,919.7,718.45,924.8]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,249.8,957.2],[1,390.15,948.3,644.6,932.2,718.41,927.5]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,197.94,1029.9],[1,314.77,1007.5,635.17,946.1,718.81,930]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1894.8,2252.2],[1,1988,2271,2177.5,2309.2,2285.7,2331]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,184.36,736.2],[1,278.73,736.2,574.9,736.2,691.32,736.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,262.45,649.2],[1,368.7,637.4,530.17,619.4,635.14,607.7]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1939.6,631.2],[1,2043.6,631.2,2204.3,631.2,2295.9,631.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,209.68,521.2],[1,314.17,521.2,542.44,521.2,662.19,521.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,242.12,445.2],[1,356.9,445.2,556.84,445.2,664.79,445.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,256.06,232.2],[1,397.74,250.3,646.23,282.3,718.65,291.6]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,297.12,294.2],[1,441.28,294.2,652.33,294.2,718.43,294.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,256.73,356.9],[1,398.39,338.5,645.89,306.3,718.46,296.8]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,247.86,3317.35],[1,355.35,3329.13,531.6,3348.45,641.17,3360.45]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,1415.9,42.5],[1,1535.9,60.5,1752.5,93,1819.6,103.1]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1479.3,106.2],[1,1600.5,106.2,1762.2,106.2,1819.1,106.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1418.7,168.6],[1,1539.1,150.8,1752.6,119.1,1819.4,109.2]],0,\n   [0,"#ff0000"]],\n  [1,\n   [0,[0,1733.6,3257.52],[0,1733.49,3254.02],[0,1743.59,3257.2],\n    [0,1733.71,3261.02]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,265.56,3303.7],[1,572.42,3294.04,1431.9,3267.01,1733.6,3257.52]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,1769.4,3270.6],[0,1768.63,3267.19],[0,1779.16,3268.4],\n    [0,1770.17,3274.01]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,\n   [0,[0,858.61,3367.91],[1,1008,3362.76,1271.3,3350.18,1495,3321.17],\n    [1,1590.7,3308.76,1699.9,3286.1,1769.4,3270.6]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,1193.9,114.9],[0,1193.66,111.408],[0,1203.88,114.222],\n    [0,1194.14,118.392]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,761.24,141.8],[1,830.72,137.5,1047.8,124,1193.9,114.9]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1214.8,173.6],[0,1215,170.106],[0,1224.78,174.182],\n    [0,1214.6,177.094]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,761.24,144.6],[1,834.12,149.2,1069.4,164.3,1214.8,173.6]],0,\n   [0,"#0000ff"]],\n  [1,[0,[0,706.75,143.2],[0,706.75,139.7],[0,716.75,143.2],[0,706.75,146.7]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,234.06,143.2],[1,364.02,143.2,617.28,143.2,706.75,143.2]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1730.5,633.1],[0,1730.43,629.601],[0,1740.5,632.904],\n    [0,1730.57,636.599]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,297.21,658.6],[1,626.54,652.8,1435.9,638.4,1730.5,633.1]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1731.6,627.7],[0,1731.7,624.202],[0,1741.6,627.997],\n    [0,1731.5,631.198]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,870.44,600.4],[1,1090.2,607.3,1528.2,621.3,1731.6,627.7]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1232.6,1865.6],[0,1233.01,1862.12],[0,1242.53,1866.78],\n    [0,1232.19,1869.08]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,251.48,1754.1],[1,471.39,1779.1,1008.1,1840.1,1232.6,1865.6]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1215.1,1710.8],[0,1215,1707.3],[0,1225.1,1710.51],[0,1215.2,1714.3]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,274.26,1739.5],[1,500.42,1732.6,989.15,1717.7,1215.1,1710.8]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1165.7,1805.9],[0,1165.63,1802.4],[0,1175.7,1805.7],\n    [0,1165.77,1809.4]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,299.27,1825],[1,518.19,1820.2,933.33,1811,1165.7,1805.9]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1216,1872.3],[0,1216.14,1868.8],[0,1225.99,1872.69],\n    [0,1215.86,1875.8]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,294,1834],[1,528.11,1843.7,996.91,1863.2,1216,1872.3]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1163.8,1970.7],[0,1163.87,1967.2],[0,1173.8,1970.9],\n    [0,1163.73,1974.2]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,300.75,1958.3],[1,519.45,1961.4,931.55,1967.4,1163.8,1970.7]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1220.8,1884.8],[0,1220.56,1881.31],[0,1230.78,1884.12],\n    [0,1221.04,1888.29]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,283.7,1947.6],[1,515.75,1932,1000.55,1899.5,1220.8,1884.8]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1723.3,2666.6],[0,1723.16,2663.1],[0,1733.29,2666.2],\n    [0,1723.44,2670.1]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,809.13,2701.5],[1,993.71,2694.5,1494.5,2675.4,1723.3,2666.6]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1732.3,2824.2],[0,1732.71,2820.72],[0,1742.23,2825.37],\n    [0,1731.89,2827.68]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,802.95,2711.9],[1,984.66,2733.8,1505.4,2796.8,1732.3,2824.2]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1701.2,2837.2],[0,1701.2,2833.7],[0,1711.2,2837.2],\n    [0,1701.2,2840.7]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,829.57,2837.2],[1,1021.9,2837.2,1472.3,2837.2,1701.2,2837.2]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1747.4,2992.88],[0,1747.93,2989.42],[0,1757.28,2994.4],\n    [0,1746.87,2996.34]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,810.81,2848.3],[1,1003.63,2878,1532.6,2959.7,1747.4,2992.88]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1751.1,2676.3],[0,1750.54,2672.84],[0,1760.97,2674.7],\n    [0,1751.66,2679.76]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,809.97,2825.9],[1,1003.19,2795.2,1538.4,2710.1,1751.1,2676.3]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1752,2572.3],[0,1751.96,2568.8],[0,1762,2572.2],[0,1752.04,2575.8]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,838.16,2583.9],[1,1051.2,2581.2,1549.4,2574.9,1752,2572.3]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1728.7,2654.4],[0,1728.94,2650.91],[0,1738.68,2655.08],\n    [0,1728.46,2657.89]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,831.45,2591.6],[1,1033,2605.7,1511.2,2639.2,1728.7,2654.4]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,2261.7,2428.4],[0,2261.53,2424.9],[0,2271.69,2427.91],\n    [0,2261.87,2431.9]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,823.33,2500.9],[1,1097.2,2487.1,1961.2,2443.6,2261.7,2428.4]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1747.7,2648.7],[0,1748.21,2645.24],[0,1757.59,2650.17],\n    [0,1747.19,2652.16]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,\n   [0,[0,810.94,2515.3],[1,945.34,2534.2,1243.7,2576.2,1495,2612.2],\n    [1,1580.7,2624.4,1678.2,2638.6,1747.7,2648.7]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,1751.6,2853.2],[0,1750.97,2849.76],[0,1761.44,2851.41],\n    [0,1752.23,2856.64]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,792.48,3027.46],[1,968.7,2995.45,1532.4,2893.1,1751.6,2853.2]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1778.9,3235.95],[0,1779.88,3232.59],[0,1788.5,3238.75],\n    [0,1777.92,3239.31]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,\n   [0,[0,796.74,3044.78],[1,923.72,3061.92,1236.5,3106.48,1495,3162.17],\n    [1,1595.4,3183.8,1710.2,3215.94,1778.9,3235.95]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,1733.9,3250.47],[0,1734.04,3246.97],[0,1743.89,3250.86],\n    [0,1733.76,3253.97]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,\n   [0,[0,794.69,3168.66],[1,877.15,3180.92,1036.6,3203.51,1173,3216.17],\n    [1,1370.7,3234.53,1602.2,3245.33,1733.9,3250.47]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,1743.2,3020.62],[0,1742.72,3017.15],[0,1753.11,3019.25],\n    [0,1743.68,3024.09]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,795.88,3152.27],[1,973.57,3127.58,1519.8,3051.67,1743.2,3020.62]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,2295.7,2406.6],[0,2296.5,2403.19],[0,2305.44,2408.88],\n    [0,2294.9,2410.01]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,\n   [0,[0,1391.1,2191.1],[1,1465,2209,1597.5,2241.1,1711,2268.2],\n    [1,1923.8,2319,2175.7,2378.4,2295.7,2406.6]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,2285.7,2328],[0,2286.57,2324.61],[0,2295.38,2330.49],\n    [0,2284.83,2331.39]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,\n   [0,[0,1421.5,2173.6],[1,1545,2170.5,1777,2171.9,1969,2214.2],\n    [1,2069.8,2236.3,2087,2267,2185,2299.2],\n    [1,2217.6,2309.9,2254.1,2319.9,2285.7,2328]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,2256.4,2059.2],[0,2255.96,2055.73],[0,2266.32,2057.94],\n    [0,2256.84,2062.67]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,1409.5,2167.5],[1,1589.7,2144.5,2045.9,2086.1,2256.4,2059.2]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,2260.5,2418.7],[0,2260.64,2415.2],[0,2270.49,2419.1],\n    [0,2260.36,2422.2]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,1422.9,2383],[1,1612.7,2391.1,2056.8,2410,2260.5,2418.7]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,2182.7,2352.9],[0,2182.56,2349.4],[0,2192.69,2352.5],\n    [0,2182.84,2356.4]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,1423.8,2376.4],[1,1592.5,2371.2,1959.7,2359.8,2182.7,2352.9]],0,\n   [0,"#0000ff"]]]]\n');
    caml_fs_init();
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     s=caml_new_string("Buffer.add: cannot grow buffer"),
     opt=[0,103],
     partial=[4,0,0,0,0],
     locfmt=
      [0,
       [11,
        caml_new_string('File "'),
        [2,
         0,
         [11,
          caml_new_string('", line '),
          [4,
           0,
           0,
           0,
           [11,
            caml_new_string(", characters "),
            [4,0,0,0,[12,45,[4,0,0,0,[11,caml_new_string(": "),[2,0,0]]]]]]]]]],
       caml_new_string('File "%s", line %d, characters %d-%d: %s')],
     s$0=caml_new_string("+"),
     s$2=caml_new_string("3.5.1"),
     git_version=caml_new_string("b89555046"),
     empty_rectangle=[0,0,0,0,0],
     public_methods=
      [0,
       caml_new_string("set_value"),
       caml_new_string("set_bounds"),
       caml_new_string("step_increment"),
       caml_new_string("page_increment"),
       caml_new_string("lower"),
       caml_new_string("page_size"),
       caml_new_string("upper"),
       caml_new_string("value")],
     vals=
      [0,
       caml_new_string("_value"),
       caml_new_string("_lower"),
       caml_new_string("_upper"),
       caml_new_string("_step_incr"),
       caml_new_string("_page_incr"),
       caml_new_string("_page_size")],
     meths=
      [0,
       caml_new_string("value"),
       caml_new_string("upper"),
       caml_new_string("step_increment"),
       caml_new_string("set_value"),
       caml_new_string("set_bounds"),
       caml_new_string("page_size"),
       caml_new_string("page_increment"),
       caml_new_string("lower")];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _d_=caml_new_string("%.12g"),
     _c_=caml_new_string("."),
     _a_=caml_new_string("true"),
     _b_=caml_new_string("false"),
     _e_=caml_new_string("\\\\"),
     _f_=caml_new_string("\\'"),
     _g_=caml_new_string("\\b"),
     _h_=caml_new_string("\\t"),
     _i_=caml_new_string("\\n"),
     _j_=caml_new_string("\\r"),
     _m_=caml_new_string("String.blit / Bytes.blit_string"),
     _l_=caml_new_string("Bytes.blit"),
     _k_=caml_new_string("String.sub / Bytes.sub"),
     _n_=caml_new_string("String.index_from / Bytes.index_from"),
     _o_=caml_new_string("Array.blit"),
     _w_=caml_new_string("Map.remove_min_elt"),
     _x_=[0,0,0,0],
     _y_=[0,caml_new_string("map.ml"),398,10],
     _z_=[0,0,0],
     _s_=caml_new_string("Map.bal"),
     _t_=caml_new_string("Map.bal"),
     _u_=caml_new_string("Map.bal"),
     _v_=caml_new_string("Map.bal"),
     _B_=caml_new_string("Stdlib.Queue.Empty"),
     _D_=[0,caml_new_string("buffer.ml"),93,2],
     _C_=[0,caml_new_string("buffer.ml"),94,2],
     _M_=caml_new_string("%c"),
     _N_=caml_new_string("%s"),
     _O_=caml_new_string("%i"),
     _P_=caml_new_string("%li"),
     _Q_=caml_new_string("%ni"),
     _R_=caml_new_string("%Li"),
     _S_=caml_new_string("%f"),
     _T_=caml_new_string("%B"),
     _U_=caml_new_string("%{"),
     _V_=caml_new_string("%}"),
     _W_=caml_new_string("%("),
     _X_=caml_new_string("%)"),
     _Y_=caml_new_string("%a"),
     _Z_=caml_new_string("%t"),
     ___=caml_new_string("%?"),
     _$_=caml_new_string("%r"),
     _aa_=caml_new_string("%_r"),
     _ab_=[0,caml_new_string("camlinternalFormat.ml"),847,23],
     _am_=[0,caml_new_string("camlinternalFormat.ml"),811,21],
     _ae_=[0,caml_new_string("camlinternalFormat.ml"),812,21],
     _an_=[0,caml_new_string("camlinternalFormat.ml"),815,21],
     _af_=[0,caml_new_string("camlinternalFormat.ml"),816,21],
     _ao_=[0,caml_new_string("camlinternalFormat.ml"),819,19],
     _ag_=[0,caml_new_string("camlinternalFormat.ml"),820,19],
     _ap_=[0,caml_new_string("camlinternalFormat.ml"),823,22],
     _ah_=[0,caml_new_string("camlinternalFormat.ml"),824,22],
     _aq_=[0,caml_new_string("camlinternalFormat.ml"),828,30],
     _ai_=[0,caml_new_string("camlinternalFormat.ml"),829,30],
     _ak_=[0,caml_new_string("camlinternalFormat.ml"),833,26],
     _ac_=[0,caml_new_string("camlinternalFormat.ml"),834,26],
     _al_=[0,caml_new_string("camlinternalFormat.ml"),843,28],
     _ad_=[0,caml_new_string("camlinternalFormat.ml"),844,28],
     _aj_=[0,caml_new_string("camlinternalFormat.ml"),848,23],
     _bm_=caml_new_string("%u"),
     _bk_=[0,caml_new_string("camlinternalFormat.ml"),1555,4],
     _bl_=caml_new_string("Printf: bad conversion %["),
     _bn_=[0,caml_new_string("camlinternalFormat.ml"),1623,39],
     _bo_=[0,caml_new_string("camlinternalFormat.ml"),1646,31],
     _bp_=[0,caml_new_string("camlinternalFormat.ml"),1647,31],
     _bq_=caml_new_string("Printf: bad conversion %_"),
     _br_=caml_new_string("@{"),
     _bs_=caml_new_string("@["),
     _bt_=caml_new_string("@{"),
     _bu_=caml_new_string("@["),
     _bi_=caml_new_string("nan"),
     _bj_=caml_new_string("."),
     _bg_=caml_new_string("neg_infinity"),
     _bh_=caml_new_string("infinity"),
     _a6_=caml_new_string("%+nd"),
     _a7_=caml_new_string("% nd"),
     _a9_=caml_new_string("%+ni"),
     _a__=caml_new_string("% ni"),
     _a$_=caml_new_string("%nx"),
     _ba_=caml_new_string("%#nx"),
     _bb_=caml_new_string("%nX"),
     _bc_=caml_new_string("%#nX"),
     _bd_=caml_new_string("%no"),
     _be_=caml_new_string("%#no"),
     _a5_=caml_new_string("%nd"),
     _a8_=caml_new_string("%ni"),
     _bf_=caml_new_string("%nu"),
     _aT_=caml_new_string("%+ld"),
     _aU_=caml_new_string("% ld"),
     _aW_=caml_new_string("%+li"),
     _aX_=caml_new_string("% li"),
     _aY_=caml_new_string("%lx"),
     _aZ_=caml_new_string("%#lx"),
     _a0_=caml_new_string("%lX"),
     _a1_=caml_new_string("%#lX"),
     _a2_=caml_new_string("%lo"),
     _a3_=caml_new_string("%#lo"),
     _aS_=caml_new_string("%ld"),
     _aV_=caml_new_string("%li"),
     _a4_=caml_new_string("%lu"),
     _aG_=caml_new_string("%+Ld"),
     _aH_=caml_new_string("% Ld"),
     _aJ_=caml_new_string("%+Li"),
     _aK_=caml_new_string("% Li"),
     _aL_=caml_new_string("%Lx"),
     _aM_=caml_new_string("%#Lx"),
     _aN_=caml_new_string("%LX"),
     _aO_=caml_new_string("%#LX"),
     _aP_=caml_new_string("%Lo"),
     _aQ_=caml_new_string("%#Lo"),
     _aF_=caml_new_string("%Ld"),
     _aI_=caml_new_string("%Li"),
     _aR_=caml_new_string("%Lu"),
     _at_=caml_new_string("%+d"),
     _au_=caml_new_string("% d"),
     _aw_=caml_new_string("%+i"),
     _ax_=caml_new_string("% i"),
     _ay_=caml_new_string("%x"),
     _az_=caml_new_string("%#x"),
     _aA_=caml_new_string("%X"),
     _aB_=caml_new_string("%#X"),
     _aC_=caml_new_string("%o"),
     _aD_=caml_new_string("%#o"),
     _as_=caml_new_string("%d"),
     _av_=caml_new_string("%i"),
     _aE_=caml_new_string("%u"),
     _E_=caml_new_string("@]"),
     _F_=caml_new_string("@}"),
     _G_=caml_new_string("@?"),
     _H_=caml_new_string("@\n"),
     _I_=caml_new_string("@."),
     _J_=caml_new_string("@@"),
     _K_=caml_new_string("@%"),
     _L_=caml_new_string("@"),
     _ar_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _by_=caml_new_string(""),
     _bz_=
      [0,[11,caml_new_string(", "),[2,0,[2,0,0]]],caml_new_string(", %s%s")],
     _bR_=[0,[2,0,[12,10,0]],caml_new_string("%s\n")],
     _bS_=
      [0,
       [11,
        caml_new_string
         ("(Program not linked with -g, cannot print stack backtrace)\n"),
        0],
       caml_new_string
        ("(Program not linked with -g, cannot print stack backtrace)\n")],
     _bJ_=caml_new_string("Raised at"),
     _bK_=caml_new_string("Re-raised at"),
     _bL_=caml_new_string("Raised by primitive operation at"),
     _bM_=caml_new_string("Called from"),
     _bN_=caml_new_string(" (inlined)"),
     _bP_=caml_new_string(""),
     _bO_=
      [0,
       [2,
        0,
        [11,
         caml_new_string(' file "'),
         [2,
          0,
          [12,
           34,
           [2,
            0,
            [11,
             caml_new_string(", line "),
             [4,
              0,
              0,
              0,
              [11,caml_new_string(", characters "),[4,0,0,0,[12,45,partial]]]]]]]]]],
       caml_new_string('%s file "%s"%s, line %d, characters %d-%d')],
     _bQ_=
      [0,
       [2,0,[11,caml_new_string(" unknown location"),0]],
       caml_new_string("%s unknown location")],
     _bE_=caml_new_string("Out of memory"),
     _bF_=caml_new_string("Stack overflow"),
     _bG_=caml_new_string("Pattern matching failed"),
     _bH_=caml_new_string("Assertion failed"),
     _bI_=caml_new_string("Undefined recursive module"),
     _bA_=[0,[12,40,[2,0,[2,0,[12,41,0]]]],caml_new_string("(%s%s)")],
     _bB_=caml_new_string(""),
     _bC_=caml_new_string(""),
     _bD_=[0,[12,40,[2,0,[12,41,0]]],caml_new_string("(%s)")],
     _bx_=[0,[4,0,0,0,0],caml_new_string("%d")],
     _bv_=[0,[3,0,0],caml_new_string("%S")],
     _bw_=caml_new_string("_"),
     _bT_=caml_new_string(""),
     _b5_=caml_new_string("Js_of_ocaml__Js.Error"),
     _b9_=caml_new_string("canvas"),
     _b7_=caml_new_string("p"),
     _b6_=caml_new_string("div"),
     _b8_=caml_new_string("Js_of_ocaml__Dom_html.Canvas_not_available"),
     _b__=[0,caml_new_string("lib/js_of_ocaml/xmlHttpRequest.ml"),129,75],
     _b$_=caml_new_string("[\\][()\\\\|+*.?{}^$]"),
     _cb_=caml_new_string(""),
     _cd_=caml_new_string(""),
     _ca_=caml_new_string("Js_of_ocaml__Url.Local_exn"),
     _ce_=
      caml_new_string
       ("^([Hh][Tt][Tt][Pp][Ss]?)://([0-9a-zA-Z.-]+|\\[[0-9a-zA-Z.-]+\\]|\\[[0-9A-Fa-f:.]+\\])?(:([0-9]+))?(/([^\\?#]*)(\\?([^#]*))?(#(.*))?)?$"),
     _cf_=
      caml_new_string
       ("^([Ff][Ii][Ll][Ee])://([^\\?#]*)(\\?([^#]*))?(#(.*))?$"),
     _c9_=caml_new_string("+"),
     _cu_=[0,0],
     _cv_=[0,1],
     _cs_=[0,0],
     _ct_=[0,1],
     _cq_=[0,0],
     _cr_=[0,0],
     _cp_=caml_new_string("wakeup_exn"),
     _co_=caml_new_string("wakeup"),
     _cl_=[0,[11,caml_new_string("Lwt."),[2,0,0]],caml_new_string("Lwt.%s")],
     _cm_=[0,[11,caml_new_string("Lwt."),[2,0,0]],caml_new_string("Lwt.%s")],
     _cn_=[0,0],
     _cj_=caml_new_string("Fatal error: exception "),
     _ck_=caml_new_string("Lwt.Resolution_loop.Canceled"),
     _cy_=caml_new_string(""),
     _cx_=caml_new_string("Js_of_ocaml_lwt__Lwt_xmlHttpRequest.Wrong_headers"),
     _cz_=caml_new_string("Exception during Lwt.async: "),
     _cC_=[0,0,0],
     _cF_=[0,caml_new_string("examples/graph_viewer/viewer_common.ml"),299,10],
     _cG_=[0,caml_new_string("examples/graph_viewer/viewer_common.ml"),302,10],
     _cD_=[0,caml_new_string("examples/graph_viewer/viewer_common.ml"),306,8],
     _cE_=[0,caml_new_string("examples/graph_viewer/viewer_common.ml"),309,8],
     _cA_=[0,caml_new_string("examples/graph_viewer/viewer_common.ml"),157,14],
     _c7_=[0,[4,0,0,0,[11,caml_new_string("px"),0]],caml_new_string("%dpx")],
     _c3_=[0,0.],
     _c4_=[0,0.],
     _c5_=[0,1.],
     _c6_=[0,20.],
     _c8_=caml_new_string("scene.json"),
     _cH_=[0,caml_new_string("examples/graph_viewer/viewer_js.ml"),147,26];
    function erase_rel(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,erase_rel(rest)];
         case 1:var rest$0=param[1];return [1,erase_rel(rest$0)];
         case 2:var rest$1=param[1];return [2,erase_rel(rest$1)];
         case 3:var rest$2=param[1];return [3,erase_rel(rest$2)];
         case 4:var rest$3=param[1];return [4,erase_rel(rest$3)];
         case 5:var rest$4=param[1];return [5,erase_rel(rest$4)];
         case 6:var rest$5=param[1];return [6,erase_rel(rest$5)];
         case 7:var rest$6=param[1];return [7,erase_rel(rest$6)];
         case 8:
          var rest$7=param[2],ty=param[1];return [8,ty,erase_rel(rest$7)];
         case 9:
          var rest$8=param[3],ty1=param[1];
          return [9,ty1,ty1,erase_rel(rest$8)];
         case 10:var rest$9=param[1];return [10,erase_rel(rest$9)];
         case 11:var rest$10=param[1];return [11,erase_rel(rest$10)];
         case 12:var rest$11=param[1];return [12,erase_rel(rest$11)];
         case 13:var rest$12=param[1];return [13,erase_rel(rest$12)];
         default:var rest$13=param[1];return [14,erase_rel(rest$13)]}}
    function concat_fmtty(fmtty1,fmtty2)
     {if(typeof fmtty1 === "number")
       return fmtty2;
      else
       switch(fmtty1[0])
        {case 0:var rest=fmtty1[1];return [0,concat_fmtty(rest,fmtty2)];
         case 1:var rest$0=fmtty1[1];return [1,concat_fmtty(rest$0,fmtty2)];
         case 2:var rest$1=fmtty1[1];return [2,concat_fmtty(rest$1,fmtty2)];
         case 3:var rest$2=fmtty1[1];return [3,concat_fmtty(rest$2,fmtty2)];
         case 4:var rest$3=fmtty1[1];return [4,concat_fmtty(rest$3,fmtty2)];
         case 5:var rest$4=fmtty1[1];return [5,concat_fmtty(rest$4,fmtty2)];
         case 6:var rest$5=fmtty1[1];return [6,concat_fmtty(rest$5,fmtty2)];
         case 7:var rest$6=fmtty1[1];return [7,concat_fmtty(rest$6,fmtty2)];
         case 8:
          var rest$7=fmtty1[2],ty=fmtty1[1];
          return [8,ty,concat_fmtty(rest$7,fmtty2)];
         case 9:
          var rest$8=fmtty1[3],ty2=fmtty1[2],ty1=fmtty1[1];
          return [9,ty1,ty2,concat_fmtty(rest$8,fmtty2)];
         case 10:var rest$9=fmtty1[1];return [10,concat_fmtty(rest$9,fmtty2)];
         case 11:
          var rest$10=fmtty1[1];return [11,concat_fmtty(rest$10,fmtty2)];
         case 12:
          var rest$11=fmtty1[1];return [12,concat_fmtty(rest$11,fmtty2)];
         case 13:
          var rest$12=fmtty1[1];return [13,concat_fmtty(rest$12,fmtty2)];
         default:
          var rest$13=fmtty1[1];return [14,concat_fmtty(rest$13,fmtty2)]}}
    function concat_fmt(fmt1,fmt2)
     {if(typeof fmt1 === "number")
       return fmt2;
      else
       switch(fmt1[0])
        {case 0:var rest=fmt1[1];return [0,concat_fmt(rest,fmt2)];
         case 1:var rest$0=fmt1[1];return [1,concat_fmt(rest$0,fmt2)];
         case 2:
          var rest$1=fmt1[2],pad=fmt1[1];
          return [2,pad,concat_fmt(rest$1,fmt2)];
         case 3:
          var rest$2=fmt1[2],pad$0=fmt1[1];
          return [3,pad$0,concat_fmt(rest$2,fmt2)];
         case 4:
          var rest$3=fmt1[4],prec=fmt1[3],pad$1=fmt1[2],iconv=fmt1[1];
          return [4,iconv,pad$1,prec,concat_fmt(rest$3,fmt2)];
         case 5:
          var rest$4=fmt1[4],prec$0=fmt1[3],pad$2=fmt1[2],iconv$0=fmt1[1];
          return [5,iconv$0,pad$2,prec$0,concat_fmt(rest$4,fmt2)];
         case 6:
          var rest$5=fmt1[4],prec$1=fmt1[3],pad$3=fmt1[2],iconv$1=fmt1[1];
          return [6,iconv$1,pad$3,prec$1,concat_fmt(rest$5,fmt2)];
         case 7:
          var rest$6=fmt1[4],prec$2=fmt1[3],pad$4=fmt1[2],iconv$2=fmt1[1];
          return [7,iconv$2,pad$4,prec$2,concat_fmt(rest$6,fmt2)];
         case 8:
          var rest$7=fmt1[4],prec$3=fmt1[3],pad$5=fmt1[2],fconv=fmt1[1];
          return [8,fconv,pad$5,prec$3,concat_fmt(rest$7,fmt2)];
         case 9:
          var rest$8=fmt1[2],pad$6=fmt1[1];
          return [9,pad$6,concat_fmt(rest$8,fmt2)];
         case 10:var rest$9=fmt1[1];return [10,concat_fmt(rest$9,fmt2)];
         case 11:
          var rest$10=fmt1[2],str=fmt1[1];
          return [11,str,concat_fmt(rest$10,fmt2)];
         case 12:
          var rest$11=fmt1[2],chr=fmt1[1];
          return [12,chr,concat_fmt(rest$11,fmt2)];
         case 13:
          var rest$12=fmt1[3],fmtty=fmt1[2],pad$7=fmt1[1];
          return [13,pad$7,fmtty,concat_fmt(rest$12,fmt2)];
         case 14:
          var rest$13=fmt1[3],fmtty$0=fmt1[2],pad$8=fmt1[1];
          return [14,pad$8,fmtty$0,concat_fmt(rest$13,fmt2)];
         case 15:var rest$14=fmt1[1];return [15,concat_fmt(rest$14,fmt2)];
         case 16:var rest$15=fmt1[1];return [16,concat_fmt(rest$15,fmt2)];
         case 17:
          var rest$16=fmt1[2],fmting_lit=fmt1[1];
          return [17,fmting_lit,concat_fmt(rest$16,fmt2)];
         case 18:
          var rest$17=fmt1[2],fmting_gen=fmt1[1];
          return [18,fmting_gen,concat_fmt(rest$17,fmt2)];
         case 19:var rest$18=fmt1[1];return [19,concat_fmt(rest$18,fmt2)];
         case 20:
          var rest$19=fmt1[3],char_set=fmt1[2],width_opt=fmt1[1];
          return [20,width_opt,char_set,concat_fmt(rest$19,fmt2)];
         case 21:
          var rest$20=fmt1[2],counter=fmt1[1];
          return [21,counter,concat_fmt(rest$20,fmt2)];
         case 22:var rest$21=fmt1[1];return [22,concat_fmt(rest$21,fmt2)];
         case 23:
          var rest$22=fmt1[2],ign=fmt1[1];
          return [23,ign,concat_fmt(rest$22,fmt2)];
         default:
          var rest$23=fmt1[3],f=fmt1[2],arity=fmt1[1];
          return [24,arity,f,concat_fmt(rest$23,fmt2)]}}
    function invalid_arg(s){throw [0,Invalid_argument,s]}
    caml_fresh_oo_id(0);
    function min(x,y){return caml_lessequal(x,y)?x:y}
    function max(x,y){return caml_greaterequal(x,y)?x:y}
    function abs(x){return 0 <= x?x:- x | 0}
    function symbol(s1,s2)
     {var
       l1=caml_ml_string_length(s1),
       l2=caml_ml_string_length(s2),
       s=caml_create_bytes(l1 + l2 | 0);
      caml_blit_string(s1,0,s,0,l1);
      caml_blit_string(s2,0,s,l1,l2);
      return caml_string_of_bytes(s)}
    function string_of_bool(b){return b?_a_:_b_}
    caml_ml_open_descriptor_in(0);
    caml_ml_open_descriptor_out(1);
    var stderr=caml_ml_open_descriptor_out(2);
    function output_string(oc,s)
     {return caml_ml_output(oc,s,0,caml_ml_string_length(s))}
    function prerr_string(s){return output_string(stderr,s)}
    function do_at_exit(param)
     {function iter(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var l=param$0[2],a=param$0[1];
            try
             {caml_ml_flush(a)}
            catch(_h$_)
             {_h$_ = caml_wrap_exception(_h$_);
              if(_h$_[1] !== Sys_error)throw _h$_;
              var _h__=_h$_}
            var param$0=l;
            continue}
          return 0}}
      return iter(caml_ml_out_channels_list(0))}
    var
     match=caml_sys_const_backend_type(0),
     max_array_length=caml_sys_const_max_wosize(0),
     max_string_length=(4 * max_array_length | 0) - 1 | 0;
    caml_fresh_oo_id(0);
    typeof match === "number";
    function find(p,param)
     {var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],x=param$0[1];
          if(caml_call1(p,x))return x;
          var param$0=l;
          continue}
        throw Not_found}}
    function make(n,c)
     {var s=caml_create_bytes(n);caml_fill_bytes(s,0,n,c);return s}
    function sub(s,ofs,len)
     {if(0 <= ofs)
       if(0 <= len)
        if(! ((caml_ml_bytes_length(s) - len | 0) < ofs))
         {var r=caml_create_bytes(len);
          caml_blit_bytes(s,ofs,r,0,len);
          return r}
      return invalid_arg(_k_)}
    function sub_string(b,ofs,len)
     {return caml_string_of_bytes(sub(b,ofs,len))}
    function blit(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((caml_ml_bytes_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_bytes(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_l_)}
    function blit$0(s1,ofs1,s2,ofs2,len)
     {if(0 <= len)
       if(0 <= ofs1)
        if(! ((caml_ml_string_length(s1) - len | 0) < ofs1))
         if(0 <= ofs2)
          if(! ((caml_ml_bytes_length(s2) - len | 0) < ofs2))
           return caml_blit_string(s1,ofs1,s2,ofs2,len);
      return invalid_arg(_m_)}
    function make$0(n,c){return caml_string_of_bytes(make(n,c))}
    function sub$0(s,ofs,len)
     {return caml_string_of_bytes(sub(caml_bytes_of_string(s),ofs,len))}
    function index_from(s,i$1,c)
     {var lim=caml_ml_string_length(s);
      if(0 <= i$1)
       if(! (lim < i$1))
        {var i=i$1;
         for(;;)
          {if(lim <= i)throw Not_found;
           if(caml_string_unsafe_get(s,i) === c)return i;
           var i$0=i + 1 | 0,i=i$0;
           continue}}
      return invalid_arg(_n_)}
    function iteri(f,a)
     {var _h8_=a.length - 1 - 1 | 0,_h7_=0;
      if(! (_h8_ < 0))
       {var i=_h7_;
        for(;;)
         {caml_call2(f,i,a[1 + i]);
          var _h9_=i + 1 | 0;
          if(_h8_ !== i){var i=_h9_;continue}
          break}}
      return 0}
    caml_fresh_oo_id(0);
    function _A_(Ord)
     {function height(param){if(param){var h=param[5];return h}return 0}
      function create(l,x,d,r)
       {var hl=height(l),hr=height(r),_h6_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_h6_]}
      function singleton(x,d){return [0,0,x,d,0,1]}
      function bal(l,x,d,r)
       {if(l)var h=l[5],hl=h;else var hl=0;
        if(r)var h$0=r[5],hr=h$0;else var hr=0;
        if((hr + 2 | 0) < hl)
         {if(l)
           {var lr=l[4],ld=l[3],lv=l[2],ll=l[1],_h1_=height(lr);
            if(_h1_ <= height(ll))return create(ll,lv,ld,create(lr,x,d,r));
            if(lr)
             {var
               lrr=lr[4],
               lrd=lr[3],
               lrv=lr[2],
               lrl=lr[1],
               _h2_=create(lrr,x,d,r);
              return create(create(ll,lv,ld,lrl),lrv,lrd,_h2_)}
            return invalid_arg(_s_)}
          return invalid_arg(_t_)}
        if((hl + 2 | 0) < hr)
         {if(r)
           {var rr=r[4],rd=r[3],rv=r[2],rl=r[1],_h3_=height(rl);
            if(_h3_ <= height(rr))return create(create(l,x,d,rl),rv,rd,rr);
            if(rl)
             {var
               rlr=rl[4],
               rld=rl[3],
               rlv=rl[2],
               rll=rl[1],
               _h4_=create(rlr,rv,rd,rr);
              return create(create(l,x,d,rll),rlv,rld,_h4_)}
            return invalid_arg(_u_)}
          return invalid_arg(_v_)}
        var _h5_=hr <= hl?hl + 1 | 0:hr + 1 | 0;
        return [0,l,x,d,r,_h5_]}
      var empty=0;
      function is_empty(param){return param?0:1}
      function add(x,data,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return d === data?m:[0,l,x,data,r,h];
          if(0 <= c){var rr=add(x,data,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=add(x,data,l);
          return l === ll?m:bal(ll,v,d,r)}
        return [0,0,x,data,0,1]}
      function find(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return d;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          throw Not_found}}
      function find_first(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,v0,d0]}}
            var param$1=r$0;
            continue}
          throw Not_found}}
      function find_first_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=l$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=l;continue}
                  var param=r;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=r$0;
            continue}
          return 0}}
      function find_last(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,v0,d0]}}
            var param$1=l$0;
            continue}
          throw Not_found}}
      function find_last_opt(f,param$0)
       {var param$1=param$0;
        for(;;)
         {if(param$1)
           {var r$0=param$1[4],d$0=param$1[3],v$0=param$1[2],l$0=param$1[1];
            if(caml_call1(f,v$0))
             {var v0=v$0,d0=d$0,param=r$0;
              for(;;)
               {if(param)
                 {var r=param[4],d=param[3],v=param[2],l=param[1];
                  if(caml_call1(f,v)){var v0=v,d0=d,param=r;continue}
                  var param=l;
                  continue}
                return [0,[0,v0,d0]]}}
            var param$1=l$0;
            continue}
          return 0}}
      function find_opt(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v);
            if(0 === c)return [0,d];
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function mem(x,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             v=param$0[2],
             l=param$0[1],
             c=caml_call2(Ord[1],x,v),
             _h0_=0 === c?1:0;
            if(_h0_)return _h0_;
            var param$1=0 <= c?r:l,param$0=param$1;
            continue}
          return 0}}
      function min_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _hZ_=param$0[1];
            if(_hZ_){var param$0=_hZ_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,v,d]}
          throw Not_found}}
      function min_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _hY_=param$0[1];
            if(_hY_){var param$0=_hY_;continue}
            var d=param$0[3],v=param$0[2];
            return [0,[0,v,d]]}
          return 0}}
      function max_binding(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _hV_=param$0[4],_hW_=param$0[3],_hX_=param$0[2];
            if(_hV_){var param$0=_hV_;continue}
            return [0,_hX_,_hW_]}
          throw Not_found}}
      function max_binding_opt(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _hS_=param$0[4],_hT_=param$0[3],_hU_=param$0[2];
            if(_hS_){var param$0=_hS_;continue}
            return [0,[0,_hU_,_hT_]]}
          return 0}}
      function remove_min_binding(param)
       {if(param)
         {var _hR_=param[1];
          if(_hR_)
           {var r=param[4],d=param[3],v=param[2];
            return bal(remove_min_binding(_hR_),v,d,r)}
          var r$0=param[4];
          return r$0}
        return invalid_arg(_w_)}
      function _hu_(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return bal(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function remove(x,m)
       {if(m)
         {var r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)return _hu_(l,r);
          if(0 <= c){var rr=remove(x,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=remove(x,l);
          return l === ll?m:bal(ll,v,d,r)}
        return 0}
      function update(x,f,m)
       {if(m)
         {var h=m[5],r=m[4],d=m[3],v=m[2],l=m[1],c=caml_call2(Ord[1],x,v);
          if(0 === c)
           {var match=caml_call1(f,[0,d]);
            if(match){var data=match[1];return d === data?m:[0,l,x,data,r,h]}
            return _hu_(l,r)}
          if(0 <= c){var rr=update(x,f,r);return r === rr?m:bal(l,v,d,rr)}
          var ll=update(x,f,l);
          return l === ll?m:bal(ll,v,d,r)}
        var match$0=caml_call1(f,0);
        if(match$0){var data$0=match$0[1];return [0,0,x,data$0,0,1]}
        return 0}
      function iter(f,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var r=param$0[4],d=param$0[3],v=param$0[2],l=param$0[1];
            iter(f,l);
            caml_call2(f,v,d);
            var param$0=r;
            continue}
          return 0}}
      function map(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=map(f,l),
           d$0=caml_call1(f,d),
           r$0=map(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function mapi(f,param)
       {if(param)
         {var
           h=param[5],
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           l$0=mapi(f,l),
           d$0=caml_call2(f,v,d),
           r$0=mapi(f,r);
          return [0,l$0,v,d$0,r$0,h]}
        return 0}
      function fold(f,m,accu)
       {var m$0=m,accu$0=accu;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             accu$1=caml_call3(f,v,d,fold(f,l,accu$0)),
             m$0=r,
             accu$0=accu$1;
            continue}
          return accu$0}}
      function for_all(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _hO_=caml_call2(p,v,d);
            if(_hO_)
             {var _hP_=for_all(p,l);
              if(_hP_){var param$0=r;continue}
              var _hQ_=_hP_}
            else
             var _hQ_=_hO_;
            return _hQ_}
          return 1}}
      function exists(p,param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             _hL_=caml_call2(p,v,d);
            if(_hL_)
             var _hM_=_hL_;
            else
             {var _hN_=exists(p,l);
              if(! _hN_){var param$0=r;continue}
              var _hM_=_hN_}
            return _hM_}
          return 0}}
      function add_min_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(add_min_binding(k,x,l),v,d,r)}
        return singleton(k,x)}
      function add_max_binding(k,x,param)
       {if(param)
         {var r=param[4],d=param[3],v=param[2],l=param[1];
          return bal(l,v,d,add_max_binding(k,x,r))}
        return singleton(k,x)}
      function join(l,v,d,r)
       {if(l)
         {if(r)
           {var
             rh=r[5],
             rr=r[4],
             rd=r[3],
             rv=r[2],
             rl=r[1],
             lh=l[5],
             lr=l[4],
             ld=l[3],
             lv=l[2],
             ll=l[1];
            return (rh + 2 | 0) < lh
                    ?bal(ll,lv,ld,join(lr,v,d,r))
                    :(lh + 2 | 0) < rh
                      ?bal(join(l,v,d,rl),rv,rd,rr)
                      :create(l,v,d,r)}
          return add_max_binding(v,d,l)}
        return add_min_binding(v,d,r)}
      function concat(t,match)
       {if(t)
         {if(match)
           {var match$0=min_binding(match),d=match$0[2],x=match$0[1];
            return join(t,x,d,remove_min_binding(match))}
          return t}
        return match}
      function concat_or_join(t1,v,d,t2)
       {if(d){var d$0=d[1];return join(t1,v,d$0,t2)}return concat(t1,t2)}
      function split(x,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           c=caml_call2(Ord[1],x,v);
          if(0 === c)return [0,l,[0,d],r];
          if(0 <= c)
           {var match=split(x,r),rr=match[3],pres=match[2],lr=match[1];
            return [0,join(l,v,d,lr),pres,rr]}
          var
           match$0=split(x,l),
           rl=match$0[3],
           pres$0=match$0[2],
           ll=match$0[1];
          return [0,ll,pres$0,join(rl,v,d,r)]}
        return _x_}
      function merge(f,s1,s2)
       {if(s1)
         {var h1=s1[5],r1=s1[4],d1=s1[3],v1=s1[2],l1=s1[1];
          if(height(s2) <= h1)
           {var
             match=split(v1,s2),
             r2=match[3],
             d2=match[2],
             l2=match[1],
             _hH_=merge(f,r1,r2),
             _hI_=caml_call3(f,v1,[0,d1],d2);
            return concat_or_join(merge(f,l1,l2),v1,_hI_,_hH_)}}
        else
         if(! s2)return 0;
        if(s2)
         {var
           r2$0=s2[4],
           d2$0=s2[3],
           v2=s2[2],
           l2$0=s2[1],
           match$0=split(v2,s1),
           r1$0=match$0[3],
           d1$0=match$0[2],
           l1$0=match$0[1],
           _hJ_=merge(f,r1$0,r2$0),
           _hK_=caml_call3(f,v2,d1$0,[0,d2$0]);
          return concat_or_join(merge(f,l1$0,l2$0),v2,_hK_,_hJ_)}
        throw [0,Assert_failure,_y_]}
      function union(f,s1,s2)
       {if(s1)
         {if(s2)
           {var
             h2=s2[5],
             r2=s2[4],
             d2=s2[3],
             v2=s2[2],
             l2=s2[1],
             h1=s1[5],
             r1=s1[4],
             d1=s1[3],
             v1=s1[2],
             l1=s1[1];
            if(h2 <= h1)
             {var
               match=split(v1,s2),
               r2$0=match[3],
               d2$0=match[2],
               l2$0=match[1],
               l=union(f,l1,l2$0),
               r=union(f,r1,r2$0);
              if(d2$0)
               {var d2$1=d2$0[1];
                return concat_or_join(l,v1,caml_call3(f,v1,d1,d2$1),r)}
              return join(l,v1,d1,r)}
            var
             match$0=split(v2,s1),
             r1$0=match$0[3],
             d1$0=match$0[2],
             l1$0=match$0[1],
             l$0=union(f,l1$0,l2),
             r$0=union(f,r1$0,r2);
            if(d1$0)
             {var d1$1=d1$0[1];
              return concat_or_join(l$0,v2,caml_call3(f,v2,d1$1,d2),r$0)}
            return join(l$0,v2,d2,r$0)}
          var s=s1}
        else
         var s=s2;
        return s}
      function filter(p,m)
       {if(m)
         {var
           r=m[4],
           d=m[3],
           v=m[2],
           l=m[1],
           l$0=filter(p,l),
           pvd=caml_call2(p,v,d),
           r$0=filter(p,r);
          if(pvd){if(l === l$0)if(r === r$0)return m;return join(l$0,v,d,r$0)}
          return concat(l$0,r$0)}
        return 0}
      function partition(p,param)
       {if(param)
         {var
           r=param[4],
           d=param[3],
           v=param[2],
           l=param[1],
           match=partition(p,l),
           lf=match[2],
           lt=match[1],
           pvd=caml_call2(p,v,d),
           match$0=partition(p,r),
           rf=match$0[2],
           rt=match$0[1];
          if(pvd){var _hF_=concat(lf,rf);return [0,join(lt,v,d,rt),_hF_]}
          var _hG_=join(lf,v,d,rf);
          return [0,concat(lt,rt),_hG_]}
        return _z_}
      function cons_enum(m,e)
       {var m$0=m,e$0=e;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             m$1=m$0[1],
             e$1=[0,v,d,r,e$0],
             m$0=m$1,
             e$0=e$1;
            continue}
          return e$0}}
      function compare(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               c=caml_call2(Ord[1],v1,v2);
              if(0 === c)
               {var c$0=caml_call2(cmp,d1,d2);
                if(0 === c$0)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                return c$0}
              return c}
            return 1}
          return e2?-1:0}}
      function equal(cmp,m1,m2)
       {var e2$2=cons_enum(m2,0),e1$2=cons_enum(m1,0),e1=e1$2,e2=e2$2;
        for(;;)
         {if(e1)
           {if(e2)
             {var
               e2$0=e2[4],
               r2=e2[3],
               d2=e2[2],
               v2=e2[1],
               e1$0=e1[4],
               r1=e1[3],
               d1=e1[2],
               v1=e1[1],
               _hC_=0 === caml_call2(Ord[1],v1,v2)?1:0;
              if(_hC_)
               {var _hD_=caml_call2(cmp,d1,d2);
                if(_hD_)
                 {var
                   e2$1=cons_enum(r2,e2$0),
                   e1$1=cons_enum(r1,e1$0),
                   e1=e1$1,
                   e2=e2$1;
                  continue}
                var _hE_=_hD_}
              else
               var _hE_=_hC_;
              return _hE_}
            return 0}
          return e2?0:1}}
      function cardinal(param)
       {if(param)
         {var r=param[4],l=param[1],_hB_=cardinal(r);
          return (cardinal(l) + 1 | 0) + _hB_ | 0}
        return 0}
      function bindings_aux(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           {var
             r=param$0[4],
             d=param$0[3],
             v=param$0[2],
             l=param$0[1],
             accu$1=[0,[0,v,d],bindings_aux(accu$0,r)],
             accu$0=accu$1,
             param$0=l;
            continue}
          return accu$0}}
      function bindings(s){return bindings_aux(0,s)}
      function add_seq(i,m)
       {var acc=m,seq=i;
        for(;;)
         {var match=caml_call1(seq,0);
          if(match)
           {var
             next=match[2],
             x=match[1],
             v=x[2],
             k=x[1],
             acc$0=add(k,v,acc),
             acc=acc$0,
             seq=next;
            continue}
          return acc}}
      function of_seq(i){return add_seq(i,empty)}
      function seq_of_enum(c,param)
       {if(c)
         {var rest=c[4],t=c[3],v=c[2],k=c[1],_hz_=cons_enum(t,rest);
          return [0,[0,k,v],function(_hA_){return seq_of_enum(_hz_,_hA_)}]}
        return 0}
      function to_seq(m)
       {var _hx_=cons_enum(m,0);
        return function(_hy_){return seq_of_enum(_hx_,_hy_)}}
      function to_seq_from(low,m)
       {var m$0=m,c=0;
        for(;;)
         {if(m$0)
           {var
             r=m$0[4],
             d=m$0[3],
             v=m$0[2],
             l=m$0[1],
             n=caml_call2(Ord[1],v,low);
            if(0 !== n)
             {if(0 <= n){var c$0=[0,v,d,r,c],m$0=l,c=c$0;continue}
              var m$0=r;
              continue}
            var _hv_=[0,v,d,r,c]}
          else
           var _hv_=c;
          return function(_hw_){return seq_of_enum(_hv_,_hw_)}}}
      return [0,
              empty,
              is_empty,
              mem,
              add,
              update,
              singleton,
              remove,
              merge,
              union,
              compare,
              equal,
              iter,
              fold,
              for_all,
              exists,
              filter,
              partition,
              cardinal,
              bindings,
              min_binding,
              min_binding_opt,
              max_binding,
              max_binding_opt,
              min_binding,
              min_binding_opt,
              split,
              find,
              find_opt,
              find_first,
              find_first_opt,
              find_last,
              find_last_opt,
              map,
              mapi,
              to_seq,
              to_seq_from,
              add_seq,
              of_seq]}
    var Empty=[248,_B_,caml_fresh_oo_id(0)];
    function add(x,q)
     {var cell=[0,x,0],_ht_=q[3];
      return _ht_
              ?(q[1] = q[1] + 1 | 0,_ht_[2] = cell,q[3] = cell,0)
              :(q[1] = 1,q[2] = cell,q[3] = cell,0)}
    caml_fresh_oo_id(0);
    function resize(b,more)
     {var old_pos=b[2],old_len=b[3],new_len=[0,old_len];
      for(;;)
       {if(new_len[1] < (old_pos + more | 0))
         {new_len[1] = 2 * new_len[1] | 0;continue}
        if(max_string_length < new_len[1])
         {if(! ((old_pos + more | 0) <= max_string_length))
           throw [0,Failure,s];
          new_len[1] = max_string_length}
        var new_buffer=caml_create_bytes(new_len[1]);
        blit(b[1],0,new_buffer,0,b[2]);
        b[1] = new_buffer;
        b[3] = new_len[1];
        if((b[2] + more | 0) <= b[3])
         {if((old_pos + more | 0) <= b[3])return 0;
          throw [0,Assert_failure,_C_]}
        throw [0,Assert_failure,_D_]}}
    function add_string(b,s)
     {var len=caml_ml_string_length(s),new_position=b[2] + len | 0;
      if(b[3] < new_position)resize(b,len);
      caml_blit_string(s,0,b[1],b[2],len);
      b[2] = new_position;
      return 0}
    function default_float_precision(fconv){return 5 === fconv[2]?12:-6}
    function buffer_create(init_size)
     {return [0,0,caml_create_bytes(init_size)]}
    function buffer_check_size(buf,overhead)
     {var
       len=caml_ml_bytes_length(buf[2]),
       min_len=buf[1] + overhead | 0,
       _hr_=len < min_len?1:0;
      if(_hr_)
       {var
         new_len=max(len * 2 | 0,min_len),
         new_str=caml_create_bytes(new_len);
        blit(buf[2],0,new_str,0,len);
        buf[2] = new_str;
        var _hs_=0}
      else
       var _hs_=_hr_;
      return _hs_}
    function buffer_add_char(buf,c)
     {buffer_check_size(buf,1);
      caml_bytes_set(buf[2],buf[1],c);
      buf[1] = buf[1] + 1 | 0;
      return 0}
    function buffer_add_string(buf,s)
     {var str_len=caml_ml_string_length(s);
      buffer_check_size(buf,str_len);
      blit$0(s,0,buf[2],buf[1],str_len);
      buf[1] = buf[1] + str_len | 0;
      return 0}
    function buffer_contents(buf){return sub_string(buf[2],0,buf[1])}
    function string_of_formatting_lit(formatting_lit)
     {if(typeof formatting_lit === "number")
       switch(formatting_lit)
        {case 0:return _E_;
         case 1:return _F_;
         case 2:return _G_;
         case 3:return _H_;
         case 4:return _I_;
         case 5:return _J_;
         default:return _K_}
      else
       switch(formatting_lit[0])
        {case 0:var str=formatting_lit[1];return str;
         case 1:var str$0=formatting_lit[1];return str$0;
         default:var c=formatting_lit[1];return symbol(_L_,make$0(1,c))}}
    function bprint_fmtty(buf,fmtty)
     {var fmtty$0=fmtty;
      for(;;)
       if(typeof fmtty$0 === "number")
        return 0;
       else
        switch(fmtty$0[0])
         {case 0:
           var rest=fmtty$0[1];
           buffer_add_string(buf,_M_);
           var fmtty$0=rest;
           continue;
          case 1:
           var rest$0=fmtty$0[1];
           buffer_add_string(buf,_N_);
           var fmtty$0=rest$0;
           continue;
          case 2:
           var rest$1=fmtty$0[1];
           buffer_add_string(buf,_O_);
           var fmtty$0=rest$1;
           continue;
          case 3:
           var rest$2=fmtty$0[1];
           buffer_add_string(buf,_P_);
           var fmtty$0=rest$2;
           continue;
          case 4:
           var rest$3=fmtty$0[1];
           buffer_add_string(buf,_Q_);
           var fmtty$0=rest$3;
           continue;
          case 5:
           var rest$4=fmtty$0[1];
           buffer_add_string(buf,_R_);
           var fmtty$0=rest$4;
           continue;
          case 6:
           var rest$5=fmtty$0[1];
           buffer_add_string(buf,_S_);
           var fmtty$0=rest$5;
           continue;
          case 7:
           var rest$6=fmtty$0[1];
           buffer_add_string(buf,_T_);
           var fmtty$0=rest$6;
           continue;
          case 8:
           var rest$7=fmtty$0[2],sub_fmtty=fmtty$0[1];
           buffer_add_string(buf,_U_);
           bprint_fmtty(buf,sub_fmtty);
           buffer_add_string(buf,_V_);
           var fmtty$0=rest$7;
           continue;
          case 9:
           var rest$8=fmtty$0[3],sub_fmtty$0=fmtty$0[1];
           buffer_add_string(buf,_W_);
           bprint_fmtty(buf,sub_fmtty$0);
           buffer_add_string(buf,_X_);
           var fmtty$0=rest$8;
           continue;
          case 10:
           var rest$9=fmtty$0[1];
           buffer_add_string(buf,_Y_);
           var fmtty$0=rest$9;
           continue;
          case 11:
           var rest$10=fmtty$0[1];
           buffer_add_string(buf,_Z_);
           var fmtty$0=rest$10;
           continue;
          case 12:
           var rest$11=fmtty$0[1];
           buffer_add_string(buf,___);
           var fmtty$0=rest$11;
           continue;
          case 13:
           var rest$12=fmtty$0[1];
           buffer_add_string(buf,_$_);
           var fmtty$0=rest$12;
           continue;
          default:
           var rest$13=fmtty$0[1];
           buffer_add_string(buf,_aa_);
           var fmtty$0=rest$13;
           continue}}
    function symm(param)
     {if(typeof param === "number")
       return 0;
      else
       switch(param[0])
        {case 0:var rest=param[1];return [0,symm(rest)];
         case 1:var rest$0=param[1];return [1,symm(rest$0)];
         case 2:var rest$1=param[1];return [2,symm(rest$1)];
         case 3:var rest$2=param[1];return [3,symm(rest$2)];
         case 4:var rest$3=param[1];return [4,symm(rest$3)];
         case 5:var rest$4=param[1];return [5,symm(rest$4)];
         case 6:var rest$5=param[1];return [6,symm(rest$5)];
         case 7:var rest$6=param[1];return [7,symm(rest$6)];
         case 8:var rest$7=param[2],ty=param[1];return [8,ty,symm(rest$7)];
         case 9:
          var rest$8=param[3],ty2=param[2],ty1=param[1];
          return [9,ty2,ty1,symm(rest$8)];
         case 10:var rest$9=param[1];return [10,symm(rest$9)];
         case 11:var rest$10=param[1];return [11,symm(rest$10)];
         case 12:var rest$11=param[1];return [12,symm(rest$11)];
         case 13:var rest$12=param[1];return [13,symm(rest$12)];
         default:var rest$13=param[1];return [14,symm(rest$13)]}}
    function fmtty_rel_det(param)
     {if(typeof param === "number")
       {var
         _g5_=function(param){return 0},
         _g6_=function(param){return 0},
         _g7_=function(param){return 0};
        return [0,function(param){return 0},_g7_,_g6_,_g5_]}
      else
       switch(param[0])
        {case 0:
          var
           rest=param[1],
           match=fmtty_rel_det(rest),
           de=match[4],
           ed=match[3],
           af=match[2],
           fa=match[1],
           _g8_=function(param){caml_call1(af,0);return 0};
          return [0,function(param){caml_call1(fa,0);return 0},_g8_,ed,de];
         case 1:
          var
           rest$0=param[1],
           match$0=fmtty_rel_det(rest$0),
           de$0=match$0[4],
           ed$0=match$0[3],
           af$0=match$0[2],
           fa$0=match$0[1],
           _g9_=function(param){caml_call1(af$0,0);return 0};
          return [0,
                  function(param){caml_call1(fa$0,0);return 0},
                  _g9_,
                  ed$0,
                  de$0];
         case 2:
          var
           rest$1=param[1],
           match$1=fmtty_rel_det(rest$1),
           de$1=match$1[4],
           ed$1=match$1[3],
           af$1=match$1[2],
           fa$1=match$1[1],
           _g__=function(param){caml_call1(af$1,0);return 0};
          return [0,
                  function(param){caml_call1(fa$1,0);return 0},
                  _g__,
                  ed$1,
                  de$1];
         case 3:
          var
           rest$2=param[1],
           match$2=fmtty_rel_det(rest$2),
           de$2=match$2[4],
           ed$2=match$2[3],
           af$2=match$2[2],
           fa$2=match$2[1],
           _g$_=function(param){caml_call1(af$2,0);return 0};
          return [0,
                  function(param){caml_call1(fa$2,0);return 0},
                  _g$_,
                  ed$2,
                  de$2];
         case 4:
          var
           rest$3=param[1],
           match$3=fmtty_rel_det(rest$3),
           de$3=match$3[4],
           ed$3=match$3[3],
           af$3=match$3[2],
           fa$3=match$3[1],
           _ha_=function(param){caml_call1(af$3,0);return 0};
          return [0,
                  function(param){caml_call1(fa$3,0);return 0},
                  _ha_,
                  ed$3,
                  de$3];
         case 5:
          var
           rest$4=param[1],
           match$4=fmtty_rel_det(rest$4),
           de$4=match$4[4],
           ed$4=match$4[3],
           af$4=match$4[2],
           fa$4=match$4[1],
           _hb_=function(param){caml_call1(af$4,0);return 0};
          return [0,
                  function(param){caml_call1(fa$4,0);return 0},
                  _hb_,
                  ed$4,
                  de$4];
         case 6:
          var
           rest$5=param[1],
           match$5=fmtty_rel_det(rest$5),
           de$5=match$5[4],
           ed$5=match$5[3],
           af$5=match$5[2],
           fa$5=match$5[1],
           _hc_=function(param){caml_call1(af$5,0);return 0};
          return [0,
                  function(param){caml_call1(fa$5,0);return 0},
                  _hc_,
                  ed$5,
                  de$5];
         case 7:
          var
           rest$6=param[1],
           match$6=fmtty_rel_det(rest$6),
           de$6=match$6[4],
           ed$6=match$6[3],
           af$6=match$6[2],
           fa$6=match$6[1],
           _hd_=function(param){caml_call1(af$6,0);return 0};
          return [0,
                  function(param){caml_call1(fa$6,0);return 0},
                  _hd_,
                  ed$6,
                  de$6];
         case 8:
          var
           rest$7=param[2],
           match$7=fmtty_rel_det(rest$7),
           de$7=match$7[4],
           ed$7=match$7[3],
           af$7=match$7[2],
           fa$7=match$7[1],
           _he_=function(param){caml_call1(af$7,0);return 0};
          return [0,
                  function(param){caml_call1(fa$7,0);return 0},
                  _he_,
                  ed$7,
                  de$7];
         case 9:
          var
           rest$8=param[3],
           ty2=param[2],
           ty1=param[1],
           match$8=fmtty_rel_det(rest$8),
           de$8=match$8[4],
           ed$8=match$8[3],
           af$8=match$8[2],
           fa$8=match$8[1],
           ty=trans(symm(ty1),ty2),
           match$9=fmtty_rel_det(ty),
           jd=match$9[4],
           dj=match$9[3],
           ga=match$9[2],
           ag=match$9[1],
           _hf_=function(param){caml_call1(jd,0);caml_call1(de$8,0);return 0},
           _hg_=function(param){caml_call1(ed$8,0);caml_call1(dj,0);return 0},
           _hh_=function(param){caml_call1(ga,0);caml_call1(af$8,0);return 0};
          return [0,
                  function(param)
                   {caml_call1(fa$8,0);caml_call1(ag,0);return 0},
                  _hh_,
                  _hg_,
                  _hf_];
         case 10:
          var
           rest$9=param[1],
           match$10=fmtty_rel_det(rest$9),
           de$9=match$10[4],
           ed$9=match$10[3],
           af$9=match$10[2],
           fa$9=match$10[1],
           _hi_=function(param){caml_call1(af$9,0);return 0};
          return [0,
                  function(param){caml_call1(fa$9,0);return 0},
                  _hi_,
                  ed$9,
                  de$9];
         case 11:
          var
           rest$10=param[1],
           match$11=fmtty_rel_det(rest$10),
           de$10=match$11[4],
           ed$10=match$11[3],
           af$10=match$11[2],
           fa$10=match$11[1],
           _hj_=function(param){caml_call1(af$10,0);return 0};
          return [0,
                  function(param){caml_call1(fa$10,0);return 0},
                  _hj_,
                  ed$10,
                  de$10];
         case 12:
          var
           rest$11=param[1],
           match$12=fmtty_rel_det(rest$11),
           de$11=match$12[4],
           ed$11=match$12[3],
           af$11=match$12[2],
           fa$11=match$12[1],
           _hk_=function(param){caml_call1(af$11,0);return 0};
          return [0,
                  function(param){caml_call1(fa$11,0);return 0},
                  _hk_,
                  ed$11,
                  de$11];
         case 13:
          var
           rest$12=param[1],
           match$13=fmtty_rel_det(rest$12),
           de$12=match$13[4],
           ed$12=match$13[3],
           af$12=match$13[2],
           fa$12=match$13[1],
           _hl_=function(param){caml_call1(de$12,0);return 0},
           _hm_=function(param){caml_call1(ed$12,0);return 0},
           _hn_=function(param){caml_call1(af$12,0);return 0};
          return [0,
                  function(param){caml_call1(fa$12,0);return 0},
                  _hn_,
                  _hm_,
                  _hl_];
         default:
          var
           rest$13=param[1],
           match$14=fmtty_rel_det(rest$13),
           de$13=match$14[4],
           ed$13=match$14[3],
           af$13=match$14[2],
           fa$13=match$14[1],
           _ho_=function(param){caml_call1(de$13,0);return 0},
           _hp_=function(param){caml_call1(ed$13,0);return 0},
           _hq_=function(param){caml_call1(af$13,0);return 0};
          return [0,
                  function(param){caml_call1(fa$13,0);return 0},
                  _hq_,
                  _hp_,
                  _ho_]}}
    function trans(ty1,match)
     {if(typeof ty1 === "number")
       if(typeof match === "number")
        return 0;
       else
        switch(match[0])
         {case 10:var switch$0=0;break;
          case 11:var switch$0=1;break;
          case 12:var switch$0=2;break;
          case 13:var switch$0=3;break;
          case 14:var switch$0=4;break;
          case 8:var switch$0=5;break;
          case 9:var switch$0=6;break;
          default:throw [0,Assert_failure,_ab_]}
      else
       switch(ty1[0])
        {case 0:
          var _gM_=ty1[1];
          if(typeof match === "number")
           var switch$1=1;
          else
           switch(match[0])
            {case 0:var rest2=match[1];return [0,trans(_gM_,rest2)];
             case 8:var switch$0=5,switch$1=0;break;
             case 9:var switch$0=6,switch$1=0;break;
             case 10:var switch$0=0,switch$1=0;break;
             case 11:var switch$0=1,switch$1=0;break;
             case 12:var switch$0=2,switch$1=0;break;
             case 13:var switch$0=3,switch$1=0;break;
             case 14:var switch$0=4,switch$1=0;break;
             default:var switch$1=1}
          if(switch$1)var switch$0=7;
          break;
         case 1:
          var _gN_=ty1[1];
          if(typeof match === "number")
           var switch$2=1;
          else
           switch(match[0])
            {case 1:var rest2$0=match[1];return [1,trans(_gN_,rest2$0)];
             case 8:var switch$0=5,switch$2=0;break;
             case 9:var switch$0=6,switch$2=0;break;
             case 10:var switch$0=0,switch$2=0;break;
             case 11:var switch$0=1,switch$2=0;break;
             case 12:var switch$0=2,switch$2=0;break;
             case 13:var switch$0=3,switch$2=0;break;
             case 14:var switch$0=4,switch$2=0;break;
             default:var switch$2=1}
          if(switch$2)var switch$0=7;
          break;
         case 2:
          var _gO_=ty1[1];
          if(typeof match === "number")
           var switch$3=1;
          else
           switch(match[0])
            {case 2:var rest2$1=match[1];return [2,trans(_gO_,rest2$1)];
             case 8:var switch$0=5,switch$3=0;break;
             case 9:var switch$0=6,switch$3=0;break;
             case 10:var switch$0=0,switch$3=0;break;
             case 11:var switch$0=1,switch$3=0;break;
             case 12:var switch$0=2,switch$3=0;break;
             case 13:var switch$0=3,switch$3=0;break;
             case 14:var switch$0=4,switch$3=0;break;
             default:var switch$3=1}
          if(switch$3)var switch$0=7;
          break;
         case 3:
          var _gP_=ty1[1];
          if(typeof match === "number")
           var switch$4=1;
          else
           switch(match[0])
            {case 3:var rest2$2=match[1];return [3,trans(_gP_,rest2$2)];
             case 8:var switch$0=5,switch$4=0;break;
             case 9:var switch$0=6,switch$4=0;break;
             case 10:var switch$0=0,switch$4=0;break;
             case 11:var switch$0=1,switch$4=0;break;
             case 12:var switch$0=2,switch$4=0;break;
             case 13:var switch$0=3,switch$4=0;break;
             case 14:var switch$0=4,switch$4=0;break;
             default:var switch$4=1}
          if(switch$4)var switch$0=7;
          break;
         case 4:
          var _gQ_=ty1[1];
          if(typeof match === "number")
           var switch$5=1;
          else
           switch(match[0])
            {case 4:var rest2$3=match[1];return [4,trans(_gQ_,rest2$3)];
             case 8:var switch$0=5,switch$5=0;break;
             case 9:var switch$0=6,switch$5=0;break;
             case 10:var switch$0=0,switch$5=0;break;
             case 11:var switch$0=1,switch$5=0;break;
             case 12:var switch$0=2,switch$5=0;break;
             case 13:var switch$0=3,switch$5=0;break;
             case 14:var switch$0=4,switch$5=0;break;
             default:var switch$5=1}
          if(switch$5)var switch$0=7;
          break;
         case 5:
          var _gR_=ty1[1];
          if(typeof match === "number")
           var switch$6=1;
          else
           switch(match[0])
            {case 5:var rest2$4=match[1];return [5,trans(_gR_,rest2$4)];
             case 8:var switch$0=5,switch$6=0;break;
             case 9:var switch$0=6,switch$6=0;break;
             case 10:var switch$0=0,switch$6=0;break;
             case 11:var switch$0=1,switch$6=0;break;
             case 12:var switch$0=2,switch$6=0;break;
             case 13:var switch$0=3,switch$6=0;break;
             case 14:var switch$0=4,switch$6=0;break;
             default:var switch$6=1}
          if(switch$6)var switch$0=7;
          break;
         case 6:
          var _gS_=ty1[1];
          if(typeof match === "number")
           var switch$7=1;
          else
           switch(match[0])
            {case 6:var rest2$5=match[1];return [6,trans(_gS_,rest2$5)];
             case 8:var switch$0=5,switch$7=0;break;
             case 9:var switch$0=6,switch$7=0;break;
             case 10:var switch$0=0,switch$7=0;break;
             case 11:var switch$0=1,switch$7=0;break;
             case 12:var switch$0=2,switch$7=0;break;
             case 13:var switch$0=3,switch$7=0;break;
             case 14:var switch$0=4,switch$7=0;break;
             default:var switch$7=1}
          if(switch$7)var switch$0=7;
          break;
         case 7:
          var _gT_=ty1[1];
          if(typeof match === "number")
           var switch$8=1;
          else
           switch(match[0])
            {case 7:var rest2$6=match[1];return [7,trans(_gT_,rest2$6)];
             case 8:var switch$0=5,switch$8=0;break;
             case 9:var switch$0=6,switch$8=0;break;
             case 10:var switch$0=0,switch$8=0;break;
             case 11:var switch$0=1,switch$8=0;break;
             case 12:var switch$0=2,switch$8=0;break;
             case 13:var switch$0=3,switch$8=0;break;
             case 14:var switch$0=4,switch$8=0;break;
             default:var switch$8=1}
          if(switch$8)var switch$0=7;
          break;
         case 8:
          var _gU_=ty1[2],_gV_=ty1[1];
          if(typeof match === "number")
           var switch$9=1;
          else
           switch(match[0])
            {case 8:
              var rest2$7=match[2],ty2=match[1],_gW_=trans(_gU_,rest2$7);
              return [8,trans(_gV_,ty2),_gW_];
             case 10:var switch$0=0,switch$9=0;break;
             case 11:var switch$0=1,switch$9=0;break;
             case 12:var switch$0=2,switch$9=0;break;
             case 13:var switch$0=3,switch$9=0;break;
             case 14:var switch$0=4,switch$9=0;break;
             default:var switch$9=1}
          if(switch$9)throw [0,Assert_failure,_ak_];
          break;
         case 9:
          var _gX_=ty1[3],_gY_=ty1[2],_gZ_=ty1[1];
          if(typeof match === "number")
           var switch$10=1;
          else
           switch(match[0])
            {case 8:var switch$0=5,switch$10=0;break;
             case 9:
              var
               rest2$8=match[3],
               ty22=match[2],
               ty21=match[1],
               ty=trans(symm(_gY_),ty21),
               match$0=fmtty_rel_det(ty),
               f4=match$0[4],
               f2=match$0[2];
              caml_call1(f2,0);
              caml_call1(f4,0);
              return [9,_gZ_,ty22,trans(_gX_,rest2$8)];
             case 10:var switch$0=0,switch$10=0;break;
             case 11:var switch$0=1,switch$10=0;break;
             case 12:var switch$0=2,switch$10=0;break;
             case 13:var switch$0=3,switch$10=0;break;
             case 14:var switch$0=4,switch$10=0;break;
             default:var switch$10=1}
          if(switch$10)throw [0,Assert_failure,_al_];
          break;
         case 10:
          var _g0_=ty1[1];
          if(typeof match !== "number" && 10 === match[0])
           {var rest2$9=match[1];return [10,trans(_g0_,rest2$9)]}
          throw [0,Assert_failure,_am_];
         case 11:
          var _g1_=ty1[1];
          if(typeof match === "number")
           var switch$11=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$11=0;break;
             case 11:var rest2$10=match[1];return [11,trans(_g1_,rest2$10)];
             default:var switch$11=1}
          if(switch$11)throw [0,Assert_failure,_an_];
          break;
         case 12:
          var _g2_=ty1[1];
          if(typeof match === "number")
           var switch$12=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$12=0;break;
             case 11:var switch$0=1,switch$12=0;break;
             case 12:var rest2$11=match[1];return [12,trans(_g2_,rest2$11)];
             default:var switch$12=1}
          if(switch$12)throw [0,Assert_failure,_ao_];
          break;
         case 13:
          var _g3_=ty1[1];
          if(typeof match === "number")
           var switch$13=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$13=0;break;
             case 11:var switch$0=1,switch$13=0;break;
             case 12:var switch$0=2,switch$13=0;break;
             case 13:var rest2$12=match[1];return [13,trans(_g3_,rest2$12)];
             default:var switch$13=1}
          if(switch$13)throw [0,Assert_failure,_ap_];
          break;
         default:
          var _g4_=ty1[1];
          if(typeof match === "number")
           var switch$14=1;
          else
           switch(match[0])
            {case 10:var switch$0=0,switch$14=0;break;
             case 11:var switch$0=1,switch$14=0;break;
             case 12:var switch$0=2,switch$14=0;break;
             case 13:var switch$0=3,switch$14=0;break;
             case 14:var rest2$13=match[1];return [14,trans(_g4_,rest2$13)];
             default:var switch$14=1}
          if(switch$14)throw [0,Assert_failure,_aq_]}
      switch(switch$0)
       {case 0:throw [0,Assert_failure,_ae_];
        case 1:throw [0,Assert_failure,_af_];
        case 2:throw [0,Assert_failure,_ag_];
        case 3:throw [0,Assert_failure,_ah_];
        case 4:throw [0,Assert_failure,_ai_];
        case 5:throw [0,Assert_failure,_ac_];
        case 6:throw [0,Assert_failure,_ad_];
        default:throw [0,Assert_failure,_aj_]}}
    var Type_mismatch=[248,_ar_,caml_fresh_oo_id(0)];
    function type_padding(pad,match)
     {if(typeof pad === "number")
       return [0,0,match];
      else
       {if(0 === pad[0])
         {var w=pad[2],padty=pad[1];return [0,[0,padty,w],match]}
        if(typeof match !== "number" && 2 === match[0])
         {var rest=match[1],padty$0=pad[1];return [0,[1,padty$0],rest]}
        throw Type_mismatch}}
    function type_padprec(pad,prec,fmtty)
     {var match=type_padding(pad,fmtty);
      if(typeof prec === "number")
       {if(0 === prec)
         {var rest=match[2],pad$0=match[1];return [0,pad$0,0,rest]}
        var _gL_=match[2];
        if(typeof _gL_ !== "number" && 2 === _gL_[0])
         {var rest$0=_gL_[1],pad$1=match[1];return [0,pad$1,1,rest$0]}
        throw Type_mismatch}
      var rest$1=match[2],pad$2=match[1],p=prec[1];
      return [0,pad$2,[0,p],rest$1]}
    function type_ignored_param_one(ign,fmt,fmtty)
     {var match=type_format_gen(fmt,fmtty),fmtty$0=match[2],fmt$0=match[1];
      return [0,[23,ign,fmt$0],fmtty$0]}
    function type_format_gen(fmt,fmtty)
     {if(typeof fmt === "number")
       return [0,0,fmtty];
      else
       switch(fmt[0])
        {case 0:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest=fmtty[1],
             fmt_rest=fmt[1],
             match=type_format_gen(fmt_rest,fmtty_rest),
             fmtty$0=match[2],
             fmt$0=match[1];
            return [0,[0,fmt$0],fmtty$0]}
          break;
         case 1:
          if(typeof fmtty !== "number" && 0 === fmtty[0])
           {var
             fmtty_rest$0=fmtty[1],
             fmt_rest$0=fmt[1],
             match$0=type_format_gen(fmt_rest$0,fmtty_rest$0),
             fmtty$1=match$0[2],
             fmt$1=match$0[1];
            return [0,[1,fmt$1],fmtty$1]}
          break;
         case 2:
          var
           fmt_rest$1=fmt[2],
           pad=fmt[1],
           _gg_=type_padding(pad,fmtty),
           _gh_=_gg_[2],
           _gi_=_gg_[1];
          if(typeof _gh_ !== "number" && 1 === _gh_[0])
           {var
             fmtty_rest$1=_gh_[1],
             match$1=type_format_gen(fmt_rest$1,fmtty_rest$1),
             fmtty$2=match$1[2],
             fmt$2=match$1[1];
            return [0,[2,_gi_,fmt$2],fmtty$2]}
          throw Type_mismatch;
         case 3:
          var
           fmt_rest$2=fmt[2],
           pad$0=fmt[1],
           _gj_=type_padding(pad$0,fmtty),
           _gk_=_gj_[2],
           _gl_=_gj_[1];
          if(typeof _gk_ !== "number" && 1 === _gk_[0])
           {var
             fmtty_rest$2=_gk_[1],
             match$2=type_format_gen(fmt_rest$2,fmtty_rest$2),
             fmtty$3=match$2[2],
             fmt$3=match$2[1];
            return [0,[3,_gl_,fmt$3],fmtty$3]}
          throw Type_mismatch;
         case 4:
          var
           fmt_rest$3=fmt[4],
           prec=fmt[3],
           pad$1=fmt[2],
           iconv=fmt[1],
           _gm_=type_padprec(pad$1,prec,fmtty),
           _gn_=_gm_[3],
           _go_=_gm_[2],
           _gp_=_gm_[1];
          if(typeof _gn_ !== "number" && 2 === _gn_[0])
           {var
             fmtty_rest$3=_gn_[1],
             match$3=type_format_gen(fmt_rest$3,fmtty_rest$3),
             fmtty$4=match$3[2],
             fmt$4=match$3[1];
            return [0,[4,iconv,_gp_,_go_,fmt$4],fmtty$4]}
          throw Type_mismatch;
         case 5:
          var
           fmt_rest$4=fmt[4],
           prec$0=fmt[3],
           pad$2=fmt[2],
           iconv$0=fmt[1],
           _gq_=type_padprec(pad$2,prec$0,fmtty),
           _gr_=_gq_[3],
           _gs_=_gq_[2],
           _gt_=_gq_[1];
          if(typeof _gr_ !== "number" && 3 === _gr_[0])
           {var
             fmtty_rest$4=_gr_[1],
             match$4=type_format_gen(fmt_rest$4,fmtty_rest$4),
             fmtty$5=match$4[2],
             fmt$5=match$4[1];
            return [0,[5,iconv$0,_gt_,_gs_,fmt$5],fmtty$5]}
          throw Type_mismatch;
         case 6:
          var
           fmt_rest$5=fmt[4],
           prec$1=fmt[3],
           pad$3=fmt[2],
           iconv$1=fmt[1],
           _gu_=type_padprec(pad$3,prec$1,fmtty),
           _gv_=_gu_[3],
           _gw_=_gu_[2],
           _gx_=_gu_[1];
          if(typeof _gv_ !== "number" && 4 === _gv_[0])
           {var
             fmtty_rest$5=_gv_[1],
             match$5=type_format_gen(fmt_rest$5,fmtty_rest$5),
             fmtty$6=match$5[2],
             fmt$6=match$5[1];
            return [0,[6,iconv$1,_gx_,_gw_,fmt$6],fmtty$6]}
          throw Type_mismatch;
         case 7:
          var
           fmt_rest$6=fmt[4],
           prec$2=fmt[3],
           pad$4=fmt[2],
           iconv$2=fmt[1],
           _gy_=type_padprec(pad$4,prec$2,fmtty),
           _gz_=_gy_[3],
           _gA_=_gy_[2],
           _gB_=_gy_[1];
          if(typeof _gz_ !== "number" && 5 === _gz_[0])
           {var
             fmtty_rest$6=_gz_[1],
             match$6=type_format_gen(fmt_rest$6,fmtty_rest$6),
             fmtty$7=match$6[2],
             fmt$7=match$6[1];
            return [0,[7,iconv$2,_gB_,_gA_,fmt$7],fmtty$7]}
          throw Type_mismatch;
         case 8:
          var
           fmt_rest$7=fmt[4],
           prec$3=fmt[3],
           pad$5=fmt[2],
           fconv=fmt[1],
           _gC_=type_padprec(pad$5,prec$3,fmtty),
           _gD_=_gC_[3],
           _gE_=_gC_[2],
           _gF_=_gC_[1];
          if(typeof _gD_ !== "number" && 6 === _gD_[0])
           {var
             fmtty_rest$7=_gD_[1],
             match$7=type_format_gen(fmt_rest$7,fmtty_rest$7),
             fmtty$8=match$7[2],
             fmt$8=match$7[1];
            return [0,[8,fconv,_gF_,_gE_,fmt$8],fmtty$8]}
          throw Type_mismatch;
         case 9:
          var
           fmt_rest$8=fmt[2],
           pad$6=fmt[1],
           _gG_=type_padding(pad$6,fmtty),
           _gH_=_gG_[2],
           _gI_=_gG_[1];
          if(typeof _gH_ !== "number" && 7 === _gH_[0])
           {var
             fmtty_rest$8=_gH_[1],
             match$8=type_format_gen(fmt_rest$8,fmtty_rest$8),
             fmtty$9=match$8[2],
             fmt$9=match$8[1];
            return [0,[9,_gI_,fmt$9],fmtty$9]}
          throw Type_mismatch;
         case 10:
          var
           fmt_rest$9=fmt[1],
           match$9=type_format_gen(fmt_rest$9,fmtty),
           fmtty$10=match$9[2],
           fmt$10=match$9[1];
          return [0,[10,fmt$10],fmtty$10];
         case 11:
          var
           fmt_rest$10=fmt[2],
           str=fmt[1],
           match$10=type_format_gen(fmt_rest$10,fmtty),
           fmtty$11=match$10[2],
           fmt$11=match$10[1];
          return [0,[11,str,fmt$11],fmtty$11];
         case 12:
          var
           fmt_rest$11=fmt[2],
           chr=fmt[1],
           match$11=type_format_gen(fmt_rest$11,fmtty),
           fmtty$12=match$11[2],
           fmt$12=match$11[1];
          return [0,[12,chr,fmt$12],fmtty$12];
         case 13:
          if(typeof fmtty !== "number" && 8 === fmtty[0])
           {var
             fmtty_rest$9=fmtty[2],
             sub_fmtty=fmtty[1],
             fmt_rest$12=fmt[3],
             sub_fmtty$0=fmt[2],
             pad_opt=fmt[1];
            if(caml_notequal([0,sub_fmtty$0],[0,sub_fmtty]))
             throw Type_mismatch;
            var
             match$12=type_format_gen(fmt_rest$12,fmtty_rest$9),
             fmtty$13=match$12[2],
             fmt$13=match$12[1];
            return [0,[13,pad_opt,sub_fmtty,fmt$13],fmtty$13]}
          break;
         case 14:
          if(typeof fmtty !== "number" && 9 === fmtty[0])
           {var
             fmtty_rest$10=fmtty[3],
             sub_fmtty1=fmtty[1],
             fmt_rest$13=fmt[3],
             sub_fmtty$1=fmt[2],
             pad_opt$0=fmt[1],
             _gJ_=[0,erase_rel(sub_fmtty1)];
            if(caml_notequal([0,erase_rel(sub_fmtty$1)],_gJ_))
             throw Type_mismatch;
            var
             match$13=type_format_gen(fmt_rest$13,erase_rel(fmtty_rest$10)),
             fmtty$14=match$13[2],
             fmt$14=match$13[1];
            return [0,[14,pad_opt$0,sub_fmtty1,fmt$14],fmtty$14]}
          break;
         case 15:
          if(typeof fmtty !== "number" && 10 === fmtty[0])
           {var
             fmtty_rest$11=fmtty[1],
             fmt_rest$14=fmt[1],
             match$14=type_format_gen(fmt_rest$14,fmtty_rest$11),
             fmtty$15=match$14[2],
             fmt$15=match$14[1];
            return [0,[15,fmt$15],fmtty$15]}
          break;
         case 16:
          if(typeof fmtty !== "number" && 11 === fmtty[0])
           {var
             fmtty_rest$12=fmtty[1],
             fmt_rest$15=fmt[1],
             match$15=type_format_gen(fmt_rest$15,fmtty_rest$12),
             fmtty$16=match$15[2],
             fmt$16=match$15[1];
            return [0,[16,fmt$16],fmtty$16]}
          break;
         case 17:
          var
           fmt_rest$16=fmt[2],
           formatting_lit=fmt[1],
           match$16=type_format_gen(fmt_rest$16,fmtty),
           fmtty$17=match$16[2],
           fmt$17=match$16[1];
          return [0,[17,formatting_lit,fmt$17],fmtty$17];
         case 18:
          var fmt_rest$17=fmt[2],formatting_gen=fmt[1];
          if(0 === formatting_gen[0])
           {var
             match$20=formatting_gen[1],
             str$0=match$20[2],
             fmt1=match$20[1],
             match$21=type_format_gen(fmt1,fmtty),
             fmtty2=match$21[2],
             fmt2=match$21[1],
             match$22=type_format_gen(fmt_rest$17,fmtty2),
             fmtty3=match$22[2],
             fmt3=match$22[1];
            return [0,[18,[0,[0,fmt2,str$0]],fmt3],fmtty3]}
          var
           match$23=formatting_gen[1],
           str$1=match$23[2],
           fmt1$0=match$23[1],
           match$24=type_format_gen(fmt1$0,fmtty),
           fmtty2$0=match$24[2],
           fmt2$0=match$24[1],
           match$25=type_format_gen(fmt_rest$17,fmtty2$0),
           fmtty3$0=match$25[2],
           fmt3$0=match$25[1];
          return [0,[18,[1,[0,fmt2$0,str$1]],fmt3$0],fmtty3$0];
         case 19:
          if(typeof fmtty !== "number" && 13 === fmtty[0])
           {var
             fmtty_rest$13=fmtty[1],
             fmt_rest$18=fmt[1],
             match$17=type_format_gen(fmt_rest$18,fmtty_rest$13),
             fmtty$18=match$17[2],
             fmt$18=match$17[1];
            return [0,[19,fmt$18],fmtty$18]}
          break;
         case 20:
          if(typeof fmtty !== "number" && 1 === fmtty[0])
           {var
             fmtty_rest$14=fmtty[1],
             fmt_rest$19=fmt[3],
             char_set=fmt[2],
             width_opt=fmt[1],
             match$18=type_format_gen(fmt_rest$19,fmtty_rest$14),
             fmtty$19=match$18[2],
             fmt$19=match$18[1];
            return [0,[20,width_opt,char_set,fmt$19],fmtty$19]}
          break;
         case 21:
          if(typeof fmtty !== "number" && 2 === fmtty[0])
           {var
             fmtty_rest$15=fmtty[1],
             fmt_rest$20=fmt[2],
             counter=fmt[1],
             match$19=type_format_gen(fmt_rest$20,fmtty_rest$15),
             fmtty$20=match$19[2],
             fmt$20=match$19[1];
            return [0,[21,counter,fmt$20],fmtty$20]}
          break;
         case 23:
          var rest=fmt[2],ign=fmt[1];
          if(typeof ign === "number")
           switch(ign)
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:
              if(typeof fmtty !== "number" && 14 === fmtty[0])
               {var
                 fmtty_rest$16=fmtty[1],
                 match$26=type_format_gen(rest,fmtty_rest$16),
                 fmtty$21=match$26[2],
                 fmt$21=match$26[1];
                return [0,[23,2,fmt$21],fmtty$21]}
              throw Type_mismatch;
             default:return type_ignored_param_one(ign,rest,fmtty)}
          else
           switch(ign[0])
            {case 0:return type_ignored_param_one(ign,rest,fmtty);
             case 1:return type_ignored_param_one(ign,rest,fmtty);
             case 2:return type_ignored_param_one(ign,rest,fmtty);
             case 3:return type_ignored_param_one(ign,rest,fmtty);
             case 4:return type_ignored_param_one(ign,rest,fmtty);
             case 5:return type_ignored_param_one(ign,rest,fmtty);
             case 6:return type_ignored_param_one(ign,rest,fmtty);
             case 7:return type_ignored_param_one(ign,rest,fmtty);
             case 8:
              var sub_fmtty$2=ign[2],pad_opt$1=ign[1];
              return type_ignored_param_one
                      ([8,pad_opt$1,sub_fmtty$2],rest,fmtty);
             case 9:
              var
               sub_fmtty$3=ign[2],
               pad_opt$2=ign[1],
               _gK_=type_ignored_format_substitution(sub_fmtty$3,rest,fmtty),
               match$27=_gK_[2],
               fmtty$22=match$27[2],
               fmt$22=match$27[1],
               sub_fmtty$4=_gK_[1];
              return [0,[23,[9,pad_opt$2,sub_fmtty$4],fmt$22],fmtty$22];
             case 10:return type_ignored_param_one(ign,rest,fmtty);
             default:return type_ignored_param_one(ign,rest,fmtty)}
         }
      throw Type_mismatch}
    function type_ignored_format_substitution(sub_fmtty,fmt,match)
     {if(typeof sub_fmtty === "number")
       return [0,0,type_format_gen(fmt,match)];
      else
       switch(sub_fmtty[0])
        {case 0:
          if(typeof match !== "number" && 0 === match[0])
           {var
             fmtty_rest=match[1],
             sub_fmtty_rest=sub_fmtty[1],
             match$0=
              type_ignored_format_substitution(sub_fmtty_rest,fmt,fmtty_rest),
             fmt$0=match$0[2],
             sub_fmtty_rest$0=match$0[1];
            return [0,[0,sub_fmtty_rest$0],fmt$0]}
          break;
         case 1:
          if(typeof match !== "number" && 1 === match[0])
           {var
             fmtty_rest$0=match[1],
             sub_fmtty_rest$1=sub_fmtty[1],
             match$1=
              type_ignored_format_substitution
               (sub_fmtty_rest$1,fmt,fmtty_rest$0),
             fmt$1=match$1[2],
             sub_fmtty_rest$2=match$1[1];
            return [0,[1,sub_fmtty_rest$2],fmt$1]}
          break;
         case 2:
          if(typeof match !== "number" && 2 === match[0])
           {var
             fmtty_rest$1=match[1],
             sub_fmtty_rest$3=sub_fmtty[1],
             match$2=
              type_ignored_format_substitution
               (sub_fmtty_rest$3,fmt,fmtty_rest$1),
             fmt$2=match$2[2],
             sub_fmtty_rest$4=match$2[1];
            return [0,[2,sub_fmtty_rest$4],fmt$2]}
          break;
         case 3:
          if(typeof match !== "number" && 3 === match[0])
           {var
             fmtty_rest$2=match[1],
             sub_fmtty_rest$5=sub_fmtty[1],
             match$3=
              type_ignored_format_substitution
               (sub_fmtty_rest$5,fmt,fmtty_rest$2),
             fmt$3=match$3[2],
             sub_fmtty_rest$6=match$3[1];
            return [0,[3,sub_fmtty_rest$6],fmt$3]}
          break;
         case 4:
          if(typeof match !== "number" && 4 === match[0])
           {var
             fmtty_rest$3=match[1],
             sub_fmtty_rest$7=sub_fmtty[1],
             match$4=
              type_ignored_format_substitution
               (sub_fmtty_rest$7,fmt,fmtty_rest$3),
             fmt$4=match$4[2],
             sub_fmtty_rest$8=match$4[1];
            return [0,[4,sub_fmtty_rest$8],fmt$4]}
          break;
         case 5:
          if(typeof match !== "number" && 5 === match[0])
           {var
             fmtty_rest$4=match[1],
             sub_fmtty_rest$9=sub_fmtty[1],
             match$5=
              type_ignored_format_substitution
               (sub_fmtty_rest$9,fmt,fmtty_rest$4),
             fmt$5=match$5[2],
             sub_fmtty_rest$10=match$5[1];
            return [0,[5,sub_fmtty_rest$10],fmt$5]}
          break;
         case 6:
          if(typeof match !== "number" && 6 === match[0])
           {var
             fmtty_rest$5=match[1],
             sub_fmtty_rest$11=sub_fmtty[1],
             match$6=
              type_ignored_format_substitution
               (sub_fmtty_rest$11,fmt,fmtty_rest$5),
             fmt$6=match$6[2],
             sub_fmtty_rest$12=match$6[1];
            return [0,[6,sub_fmtty_rest$12],fmt$6]}
          break;
         case 7:
          if(typeof match !== "number" && 7 === match[0])
           {var
             fmtty_rest$6=match[1],
             sub_fmtty_rest$13=sub_fmtty[1],
             match$7=
              type_ignored_format_substitution
               (sub_fmtty_rest$13,fmt,fmtty_rest$6),
             fmt$7=match$7[2],
             sub_fmtty_rest$14=match$7[1];
            return [0,[7,sub_fmtty_rest$14],fmt$7]}
          break;
         case 8:
          if(typeof match !== "number" && 8 === match[0])
           {var
             fmtty_rest$7=match[2],
             sub2_fmtty=match[1],
             sub_fmtty_rest$15=sub_fmtty[2],
             sub2_fmtty$0=sub_fmtty[1];
            if(caml_notequal([0,sub2_fmtty$0],[0,sub2_fmtty]))
             throw Type_mismatch;
            var
             match$8=
              type_ignored_format_substitution
               (sub_fmtty_rest$15,fmt,fmtty_rest$7),
             fmt$8=match$8[2],
             sub_fmtty_rest$16=match$8[1];
            return [0,[8,sub2_fmtty,sub_fmtty_rest$16],fmt$8]}
          break;
         case 9:
          if(typeof match !== "number" && 9 === match[0])
           {var
             fmtty_rest$8=match[3],
             sub2_fmtty$1=match[2],
             sub1_fmtty=match[1],
             sub_fmtty_rest$17=sub_fmtty[3],
             sub2_fmtty$2=sub_fmtty[2],
             sub1_fmtty$0=sub_fmtty[1],
             _ge_=[0,erase_rel(sub1_fmtty)];
            if(caml_notequal([0,erase_rel(sub1_fmtty$0)],_ge_))
             throw Type_mismatch;
            var _gf_=[0,erase_rel(sub2_fmtty$1)];
            if(caml_notequal([0,erase_rel(sub2_fmtty$2)],_gf_))
             throw Type_mismatch;
            var
             sub_fmtty$0=trans(symm(sub1_fmtty),sub2_fmtty$1),
             match$9=fmtty_rel_det(sub_fmtty$0),
             f4=match$9[4],
             f2=match$9[2];
            caml_call1(f2,0);
            caml_call1(f4,0);
            var
             match$10=
              type_ignored_format_substitution
               (erase_rel(sub_fmtty_rest$17),fmt,fmtty_rest$8),
             fmt$9=match$10[2],
             sub_fmtty_rest$18=match$10[1];
            return [0,
                    [9,sub1_fmtty,sub2_fmtty$1,symm(sub_fmtty_rest$18)],
                    fmt$9]}
          break;
         case 10:
          if(typeof match !== "number" && 10 === match[0])
           {var
             fmtty_rest$9=match[1],
             sub_fmtty_rest$19=sub_fmtty[1],
             match$11=
              type_ignored_format_substitution
               (sub_fmtty_rest$19,fmt,fmtty_rest$9),
             fmt$10=match$11[2],
             sub_fmtty_rest$20=match$11[1];
            return [0,[10,sub_fmtty_rest$20],fmt$10]}
          break;
         case 11:
          if(typeof match !== "number" && 11 === match[0])
           {var
             fmtty_rest$10=match[1],
             sub_fmtty_rest$21=sub_fmtty[1],
             match$12=
              type_ignored_format_substitution
               (sub_fmtty_rest$21,fmt,fmtty_rest$10),
             fmt$11=match$12[2],
             sub_fmtty_rest$22=match$12[1];
            return [0,[11,sub_fmtty_rest$22],fmt$11]}
          break;
         case 13:
          if(typeof match !== "number" && 13 === match[0])
           {var
             fmtty_rest$11=match[1],
             sub_fmtty_rest$23=sub_fmtty[1],
             match$13=
              type_ignored_format_substitution
               (sub_fmtty_rest$23,fmt,fmtty_rest$11),
             fmt$12=match$13[2],
             sub_fmtty_rest$24=match$13[1];
            return [0,[13,sub_fmtty_rest$24],fmt$12]}
          break;
         case 14:
          if(typeof match !== "number" && 14 === match[0])
           {var
             fmtty_rest$12=match[1],
             sub_fmtty_rest$25=sub_fmtty[1],
             match$14=
              type_ignored_format_substitution
               (sub_fmtty_rest$25,fmt,fmtty_rest$12),
             fmt$13=match$14[2],
             sub_fmtty_rest$26=match$14[1];
            return [0,[14,sub_fmtty_rest$26],fmt$13]}
          break
         }
      throw Type_mismatch}
    function fix_padding(padty,width,str)
     {var
       len=caml_ml_string_length(str),
       padty$0=0 <= width?padty:0,
       width$0=abs(width);
      if(width$0 <= len)return str;
      var _gd_=2 === padty$0?48:32,res=make(width$0,_gd_);
      switch(padty$0)
       {case 0:blit$0(str,0,res,0,len);break;
        case 1:blit$0(str,0,res,width$0 - len | 0,len);break;
        default:
         if(0 < len)
          {if(43 === caml_string_get(str,0))
            var switch$1=1;
           else
            if(45 === caml_string_get(str,0))
             var switch$1=1;
            else
             if(32 === caml_string_get(str,0))
              var switch$1=1;
             else
              var switch$0=0,switch$1=0;
           if(switch$1)
            {caml_bytes_set(res,0,caml_string_get(str,0));
             blit$0(str,1,res,(width$0 - len | 0) + 1 | 0,len - 1 | 0);
             var switch$0=1}}
         else
          var switch$0=0;
         if(! switch$0)
          {if(1 < len)
            if(48 === caml_string_get(str,0))
             {if(120 === caml_string_get(str,1))
               var switch$3=1;
              else
               if(88 === caml_string_get(str,1))
                var switch$3=1;
               else
                var switch$2=0,switch$3=0;
              if(switch$3)
               {caml_bytes_set(res,1,caml_string_get(str,1));
                blit$0(str,2,res,(width$0 - len | 0) + 2 | 0,len - 2 | 0);
                var switch$2=1}}
            else
             var switch$2=0;
           else
            var switch$2=0;
           if(! switch$2)blit$0(str,0,res,width$0 - len | 0,len)}}
      return caml_string_of_bytes(res)}
    function fix_int_precision(prec,str)
     {var
       prec$0=abs(prec),
       len=caml_ml_string_length(str),
       c=caml_string_get(str,0);
      if(58 <= c)
       var switch$0=71 <= c?5 < (c - 97 | 0) >>> 0?1:0:65 <= c?0:1;
      else
       {if(32 === c)
         var switch$1=1;
        else
         if(43 <= c)
          {var switcher=c - 43 | 0;
           switch(switcher)
            {case 5:
              if(len < (prec$0 + 2 | 0))
               if(1 < len)
                {var
                  switch$2=
                   120 === caml_string_get(str,1)
                    ?0
                    :88 === caml_string_get(str,1)?0:1;
                 if(! switch$2)
                  {var res$1=make(prec$0 + 2 | 0,48);
                   caml_bytes_set(res$1,1,caml_string_get(str,1));
                   blit$0(str,2,res$1,(prec$0 - len | 0) + 4 | 0,len - 2 | 0);
                   return caml_string_of_bytes(res$1)}}
              var switch$0=0,switch$1=0;
              break;
             case 0:
             case 2:var switch$1=1;break;
             case 1:
             case 3:
             case 4:var switch$0=1,switch$1=0;break;
             default:var switch$0=0,switch$1=0}}
         else
          var switch$0=1,switch$1=0;
        if(switch$1)
         {if(len < (prec$0 + 1 | 0))
           {var res$0=make(prec$0 + 1 | 0,48);
            caml_bytes_set(res$0,0,c);
            blit$0(str,1,res$0,(prec$0 - len | 0) + 2 | 0,len - 1 | 0);
            return caml_string_of_bytes(res$0)}
          var switch$0=1}}
      if(! switch$0)
       if(len < prec$0)
        {var res=make(prec$0,48);
         blit$0(str,0,res,prec$0 - len | 0,len);
         return caml_string_of_bytes(res)}
      return str}
    function string_to_caml_string(str)
     {var n$0=caml_ml_string_length(str),i$1=0;
      for(;;)
       {if(n$0 <= i$1)
         var str$0=str;
        else
         {var
           match$0=caml_string_unsafe_get(str,i$1),
           _gb_=match$0 - 32 | 0,
           switch$0=
            59 < _gb_ >>> 0?33 < (_gb_ - 61 | 0) >>> 0?1:0:2 === _gb_?1:0;
          if(! switch$0){var i$2=i$1 + 1 | 0,i$1=i$2;continue}
          var
           s$0=caml_bytes_of_string(str),
           n=[0,0],
           _f6_=caml_ml_bytes_length(s$0) - 1 | 0,
           _f5_=0;
          if(! (_f6_ < 0))
           {var i$0=_f5_;
            for(;;)
             {var match=caml_bytes_unsafe_get(s$0,i$0);
              if(32 <= match)
               {var _f__=match - 34 | 0;
                if(58 < _f__ >>> 0)
                 if(93 <= _f__)var switch$1=0,switch$2=0;else var switch$2=1;
                else
                 if(56 < (_f__ - 1 | 0) >>> 0)
                  var switch$1=1,switch$2=0;
                 else
                  var switch$2=1;
                if(switch$2)var _f$_=1,switch$1=2}
              else
               var switch$1=11 <= match?13 === match?1:0:8 <= match?1:0;
              switch(switch$1)
               {case 0:var _f$_=4;break;case 1:var _f$_=2;break}
              n[1] = n[1] + _f$_ | 0;
              var _ga_=i$0 + 1 | 0;
              if(_f6_ !== i$0){var i$0=_ga_;continue}
              break}}
          if(n[1] === caml_ml_bytes_length(s$0))
           {var len=caml_ml_bytes_length(s$0),r=caml_create_bytes(len);
            caml_blit_bytes(s$0,0,r,0,len);
            var _gc_=r}
          else
           {var s=caml_create_bytes(n[1]);
            n[1] = 0;
            var _f8_=caml_ml_bytes_length(s$0) - 1 | 0,_f7_=0;
            if(! (_f8_ < 0))
             {var i=_f7_;
              for(;;)
               {var c=caml_bytes_unsafe_get(s$0,i);
                if(35 <= c)
                 var switch$3=92 === c?1:127 <= c?0:2;
                else
                 if(32 <= c)
                  var switch$3=34 <= c?1:2;
                 else
                  if(14 <= c)
                   var switch$3=0;
                  else
                   switch(c)
                    {case 8:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],98);
                      var switch$3=3;
                      break;
                     case 9:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],116);
                      var switch$3=3;
                      break;
                     case 10:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],110);
                      var switch$3=3;
                      break;
                     case 13:
                      caml_bytes_unsafe_set(s,n[1],92);
                      n[1]++;
                      caml_bytes_unsafe_set(s,n[1],114);
                      var switch$3=3;
                      break;
                     default:var switch$3=0}
                switch(switch$3)
                 {case 0:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c / 100 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set
                    (s,n[1],48 + ((c / 10 | 0) % 10 | 0) | 0);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],48 + (c % 10 | 0) | 0);
                   break;
                  case 1:
                   caml_bytes_unsafe_set(s,n[1],92);
                   n[1]++;
                   caml_bytes_unsafe_set(s,n[1],c);
                   break;
                  case 2:caml_bytes_unsafe_set(s,n[1],c);break
                  }
                n[1]++;
                var _f9_=i + 1 | 0;
                if(_f8_ !== i){var i=_f9_;continue}
                break}}
            var _gc_=s}
          var str$0=caml_string_of_bytes(_gc_)}
        var l=caml_ml_string_length(str$0),res=make(l + 2 | 0,34);
        caml_blit_string(str$0,0,res,1,l);
        return caml_string_of_bytes(res)}}
    function transform_int_alt(iconv,s)
     {if(13 <= iconv)
       {var n=[0,0],_f0_=caml_ml_string_length(s) - 1 | 0,_fZ_=0;
        if(! (_f0_ < 0))
         {var i$0=_fZ_;
          for(;;)
           {var match=caml_string_unsafe_get(s,i$0),switcher$0=match - 48 | 0;
            if(! (9 < switcher$0 >>> 0))n[1]++;
            var _f4_=i$0 + 1 | 0;
            if(_f0_ !== i$0){var i$0=_f4_;continue}
            break}}
        var
         digits=n[1],
         buf=
          caml_create_bytes
           (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
         pos=[0,0],
         put=function(c){caml_bytes_set(buf,pos[1],c);pos[1]++;return 0},
         left=[0,((digits - 1 | 0) % 3 | 0) + 1 | 0],
         _f2_=caml_ml_string_length(s) - 1 | 0,
         _f1_=0;
        if(! (_f2_ < 0))
         {var i=_f1_;
          for(;;)
           {var c=caml_string_unsafe_get(s,i),switcher=c - 48 | 0;
            if(9 < switcher >>> 0)
             put(c);
            else
             {if(0 === left[1]){put(95);left[1] = 3}left[1] += -1;put(c)}
            var _f3_=i + 1 | 0;
            if(_f2_ !== i){var i=_f3_;continue}
            break}}
        return caml_string_of_bytes(buf)}
      return s}
    function convert_int(iconv,n)
     {switch(iconv)
       {case 1:var _fY_=_at_;break;
        case 2:var _fY_=_au_;break;
        case 4:var _fY_=_aw_;break;
        case 5:var _fY_=_ax_;break;
        case 6:var _fY_=_ay_;break;
        case 7:var _fY_=_az_;break;
        case 8:var _fY_=_aA_;break;
        case 9:var _fY_=_aB_;break;
        case 10:var _fY_=_aC_;break;
        case 11:var _fY_=_aD_;break;
        case 0:
        case 13:var _fY_=_as_;break;
        case 3:
        case 14:var _fY_=_av_;break;
        default:var _fY_=_aE_}
      return transform_int_alt(iconv,caml_format_int(_fY_,n))}
    function convert_int32(iconv,n)
     {switch(iconv)
       {case 1:var _fX_=_aT_;break;
        case 2:var _fX_=_aU_;break;
        case 4:var _fX_=_aW_;break;
        case 5:var _fX_=_aX_;break;
        case 6:var _fX_=_aY_;break;
        case 7:var _fX_=_aZ_;break;
        case 8:var _fX_=_a0_;break;
        case 9:var _fX_=_a1_;break;
        case 10:var _fX_=_a2_;break;
        case 11:var _fX_=_a3_;break;
        case 0:
        case 13:var _fX_=_aS_;break;
        case 3:
        case 14:var _fX_=_aV_;break;
        default:var _fX_=_a4_}
      return transform_int_alt(iconv,caml_format_int(_fX_,n))}
    function convert_nativeint(iconv,n)
     {switch(iconv)
       {case 1:var _fW_=_a6_;break;
        case 2:var _fW_=_a7_;break;
        case 4:var _fW_=_a9_;break;
        case 5:var _fW_=_a__;break;
        case 6:var _fW_=_a$_;break;
        case 7:var _fW_=_ba_;break;
        case 8:var _fW_=_bb_;break;
        case 9:var _fW_=_bc_;break;
        case 10:var _fW_=_bd_;break;
        case 11:var _fW_=_be_;break;
        case 0:
        case 13:var _fW_=_a5_;break;
        case 3:
        case 14:var _fW_=_a8_;break;
        default:var _fW_=_bf_}
      return transform_int_alt(iconv,caml_format_int(_fW_,n))}
    function convert_int64(iconv,n)
     {switch(iconv)
       {case 1:var _fV_=_aG_;break;
        case 2:var _fV_=_aH_;break;
        case 4:var _fV_=_aJ_;break;
        case 5:var _fV_=_aK_;break;
        case 6:var _fV_=_aL_;break;
        case 7:var _fV_=_aM_;break;
        case 8:var _fV_=_aN_;break;
        case 9:var _fV_=_aO_;break;
        case 10:var _fV_=_aP_;break;
        case 11:var _fV_=_aQ_;break;
        case 0:
        case 13:var _fV_=_aF_;break;
        case 3:
        case 14:var _fV_=_aI_;break;
        default:var _fV_=_aR_}
      return transform_int_alt(iconv,caml_int64_format(_fV_,n))}
    function convert_float(fconv,prec$0,x)
     {if(6 <= fconv[2])
       {switch(fconv[1])
         {case 0:var sign=45;break;
          case 1:var sign=43;break;
          default:var sign=32}
        var s$0=caml_hexstring_of_float(x,prec$0,sign);
        if(7 <= fconv[2])
         {var s=caml_bytes_of_string(s$0),l=caml_ml_bytes_length(s);
          if(0 === l)
           var _fS_=s;
          else
           {var r=caml_create_bytes(l),_fP_=l - 1 | 0,_fO_=0;
            if(! (_fP_ < 0))
             {var i=_fO_;
              for(;;)
               {var c=caml_bytes_unsafe_get(s,i);
                if(97 <= c)
                 if(122 < c)
                  var switch$0=0;
                 else
                  var _fQ_=c - 32 | 0,switch$0=1;
                else
                 var switch$0=0;
                if(! switch$0)var _fQ_=c;
                caml_bytes_unsafe_set(r,i,_fQ_);
                var _fR_=i + 1 | 0;
                if(_fP_ !== i){var i=_fR_;continue}
                break}}
            var _fS_=r}
          return caml_string_of_bytes(_fS_)}
        return s$0}
      var prec=abs(prec$0);
      if(opt)var sth=opt[1],cF=sth;else var cF=70;
      switch(fconv[2])
       {case 0:var symb=102;break;
        case 1:var symb=101;break;
        case 2:var symb=69;break;
        case 3:var symb=103;break;
        case 4:var symb=71;break;
        case 5:var symb=cF;break;
        case 6:var symb=104;break;
        default:var symb=72}
      var buf=buffer_create(16);
      buffer_add_char(buf,37);
      switch(fconv[1])
       {case 0:break;
        case 1:buffer_add_char(buf,43);break;
        default:buffer_add_char(buf,32)}
      buffer_add_char(buf,46);
      buffer_add_string(buf,caml_new_string("" + prec));
      buffer_add_char(buf,symb);
      var str=caml_format_float(buffer_contents(buf),x);
      if(5 === fconv[2])
       {var len=caml_ml_string_length(str),match$0=caml_classify_float(x);
        if(3 === match$0)return x < 0.?_bg_:_bh_;
        if(4 <= match$0)return _bi_;
        var i$0=0;
        for(;;)
         {if(i$0 === len)
           var _fU_=0;
          else
           {var
             match=caml_string_get(str,i$0),
             _fT_=match - 46 | 0,
             switch$1=
              23 < _fT_ >>> 0?55 === _fT_?1:0:21 < (_fT_ - 1 | 0) >>> 0?1:0;
            if(! switch$1){var i$1=i$0 + 1 | 0,i$0=i$1;continue}
            var _fU_=1}
          return _fU_?str:symbol(str,_bj_)}}
      return str}
    function make_int_padding_precision(k,acc,fmt,pad,match,trans,iconv)
     {if(typeof pad === "number")
       {if(typeof match === "number")
         return 0 === match
                 ?function(x)
                   {var str=caml_call2(trans,iconv,x);
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(p,x)
                   {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)};
        var p=match[1];
        return function(x)
         {var str=fix_int_precision(p,caml_call2(trans,iconv,x));
          return make_printf(k,[4,acc,str],fmt)}}
      else
       {if(0 === pad[0])
         {var _fL_=pad[2],_fM_=pad[1];
          if(typeof match === "number")
           return 0 === match
                   ?function(x)
                     {var str=fix_padding(_fM_,_fL_,caml_call2(trans,iconv,x));
                      return make_printf(k,[4,acc,str],fmt)}
                   :function(p,x)
                     {var
                       str=
                        fix_padding
                         (_fM_,_fL_,fix_int_precision(p,caml_call2(trans,iconv,x)));
                      return make_printf(k,[4,acc,str],fmt)};
          var p$0=match[1];
          return function(x)
           {var
             str=
              fix_padding
               (_fM_,_fL_,fix_int_precision(p$0,caml_call2(trans,iconv,x)));
            return make_printf(k,[4,acc,str],fmt)}}
        var _fN_=pad[1];
        if(typeof match === "number")
         return 0 === match
                 ?function(w,x)
                   {var str=fix_padding(_fN_,w,caml_call2(trans,iconv,x));
                    return make_printf(k,[4,acc,str],fmt)}
                 :function(w,p,x)
                   {var
                     str=
                      fix_padding
                       (_fN_,w,fix_int_precision(p,caml_call2(trans,iconv,x)));
                    return make_printf(k,[4,acc,str],fmt)};
        var p$1=match[1];
        return function(w,x)
         {var
           str=
            fix_padding
             (_fN_,w,fix_int_precision(p$1,caml_call2(trans,iconv,x)));
          return make_printf(k,[4,acc,str],fmt)}}}
    function make_padding(k,acc,fmt,pad,trans)
     {if(typeof pad === "number")
       return function(x)
        {var new_acc=[4,acc,caml_call1(trans,x)];
         return make_printf(k,new_acc,fmt)};
      else
       {if(0 === pad[0])
         {var width=pad[2],padty=pad[1];
          return function(x)
           {var new_acc=[4,acc,fix_padding(padty,width,caml_call1(trans,x))];
            return make_printf(k,new_acc,fmt)}}
        var padty$0=pad[1];
        return function(w,x)
         {var new_acc=[4,acc,fix_padding(padty$0,w,caml_call1(trans,x))];
          return make_printf(k,new_acc,fmt)}}}
    function make_printf$0(counter,k,acc,fmt)
     {var k$0=k,acc$0=acc,fmt$0=fmt;
      for(;;)
       if(typeof fmt$0 === "number")
        return caml_call1(k$0,acc$0);
       else
        switch(fmt$0[0])
         {case 0:
           var rest=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest)};
          case 1:
           var rest$0=fmt$0[1];
           return function(c)
            {if(40 <= c)
              if(92 === c)
               var str=_e_,switch$0=2;
              else
               var switch$0=127 <= c?0:1;
             else
              if(32 <= c)
               if(39 <= c)var str=_f_,switch$0=2;else var switch$0=1;
              else
               if(14 <= c)
                var switch$0=0;
               else
                switch(c)
                 {case 8:var str=_g_,switch$0=2;break;
                  case 9:var str=_h_,switch$0=2;break;
                  case 10:var str=_i_,switch$0=2;break;
                  case 13:var str=_j_,switch$0=2;break;
                  default:var switch$0=0}
             switch(switch$0)
              {case 0:
                var s=caml_create_bytes(4);
                caml_bytes_unsafe_set(s,0,92);
                caml_bytes_unsafe_set(s,1,48 + (c / 100 | 0) | 0);
                caml_bytes_unsafe_set(s,2,48 + ((c / 10 | 0) % 10 | 0) | 0);
                caml_bytes_unsafe_set(s,3,48 + (c % 10 | 0) | 0);
                var str=caml_string_of_bytes(s);
                break;
               case 1:
                var s$0=caml_create_bytes(1);
                caml_bytes_unsafe_set(s$0,0,c);
                var str=caml_string_of_bytes(s$0);
                break
               }
             var l=caml_ml_string_length(str),res=make(l + 2 | 0,39);
             caml_blit_string(str,0,res,1,l);
             var new_acc=[4,acc$0,caml_string_of_bytes(res)];
             return make_printf(k$0,new_acc,rest$0)};
          case 2:
           var rest$1=fmt$0[2],pad=fmt$0[1];
           return make_padding(k$0,acc$0,rest$1,pad,function(str){return str});
          case 3:
           var rest$2=fmt$0[2],pad$0=fmt$0[1];
           return make_padding(k$0,acc$0,rest$2,pad$0,string_to_caml_string);
          case 4:
           var rest$3=fmt$0[4],prec=fmt$0[3],pad$1=fmt$0[2],iconv=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$3,pad$1,prec,convert_int,iconv);
          case 5:
           var
            rest$4=fmt$0[4],
            prec$0=fmt$0[3],
            pad$2=fmt$0[2],
            iconv$0=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$4,pad$2,prec$0,convert_int32,iconv$0);
          case 6:
           var
            rest$5=fmt$0[4],
            prec$1=fmt$0[3],
            pad$3=fmt$0[2],
            iconv$1=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$5,pad$3,prec$1,convert_nativeint,iconv$1);
          case 7:
           var
            rest$6=fmt$0[4],
            prec$2=fmt$0[3],
            pad$4=fmt$0[2],
            iconv$2=fmt$0[1];
           return make_int_padding_precision
                   (k$0,acc$0,rest$6,pad$4,prec$2,convert_int64,iconv$2);
          case 8:
           var rest$7=fmt$0[4],prec$3=fmt$0[3],pad$5=fmt$0[2],fconv=fmt$0[1];
           if(typeof pad$5 === "number")
            {if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(x)
                        {var
                          str=
                           convert_float(fconv,default_float_precision(fconv),x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)}
                      :function(p,x)
                        {var str=convert_float(fconv,p,x);
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p=prec$3[1];
             return function(x)
              {var str=convert_float(fconv,p,x);
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
           else
            {if(0 === pad$5[0])
              {var _fH_=pad$5[2],_fI_=pad$5[1];
               if(typeof prec$3 === "number")
                return 0 === prec$3
                        ?function(x)
                          {var
                            str=convert_float(fconv,default_float_precision(fconv),x),
                            str$0=fix_padding(_fI_,_fH_,str);
                           return make_printf(k$0,[4,acc$0,str$0],rest$7)}
                        :function(p,x)
                          {var str=fix_padding(_fI_,_fH_,convert_float(fconv,p,x));
                           return make_printf(k$0,[4,acc$0,str],rest$7)};
               var p$0=prec$3[1];
               return function(x)
                {var str=fix_padding(_fI_,_fH_,convert_float(fconv,p$0,x));
                 return make_printf(k$0,[4,acc$0,str],rest$7)}}
             var _fJ_=pad$5[1];
             if(typeof prec$3 === "number")
              return 0 === prec$3
                      ?function(w,x)
                        {var
                          str=convert_float(fconv,default_float_precision(fconv),x),
                          str$0=fix_padding(_fJ_,w,str);
                         return make_printf(k$0,[4,acc$0,str$0],rest$7)}
                      :function(w,p,x)
                        {var str=fix_padding(_fJ_,w,convert_float(fconv,p,x));
                         return make_printf(k$0,[4,acc$0,str],rest$7)};
             var p$1=prec$3[1];
             return function(w,x)
              {var str=fix_padding(_fJ_,w,convert_float(fconv,p$1,x));
               return make_printf(k$0,[4,acc$0,str],rest$7)}}
          case 9:
           var rest$8=fmt$0[2],pad$6=fmt$0[1];
           return make_padding(k$0,acc$0,rest$8,pad$6,string_of_bool);
          case 10:
           var fmt$1=fmt$0[1],acc$1=[7,acc$0],acc$0=acc$1,fmt$0=fmt$1;
           continue;
          case 11:
           var
            fmt$2=fmt$0[2],
            str=fmt$0[1],
            acc$2=[2,acc$0,str],
            acc$0=acc$2,
            fmt$0=fmt$2;
           continue;
          case 12:
           var
            fmt$3=fmt$0[2],
            chr=fmt$0[1],
            acc$3=[3,acc$0,chr],
            acc$0=acc$3,
            fmt$0=fmt$3;
           continue;
          case 13:
           var rest$9=fmt$0[3],sub_fmtty=fmt$0[2],buf=buffer_create(16);
           bprint_fmtty(buf,sub_fmtty);
           var ty=buffer_contents(buf);
           return function(str){return make_printf(k$0,[4,acc$0,ty],rest$9)};
          case 14:
           var rest$10=fmt$0[3],fmtty=fmt$0[2];
           return function(param)
            {var
              fmt$0=param[1],
              fmtty$0=erase_rel(symm(fmtty)),
              _fK_=type_format_gen(fmt$0,fmtty$0);
             if(typeof _fK_[2] === "number")
              {var fmt=_fK_[1];
               return make_printf(k$0,acc$0,concat_fmt(fmt,rest$10))}
             throw Type_mismatch};
          case 15:
           var rest$11=fmt$0[1];
           return function(f,x)
            {return make_printf
                     (k$0,
                      [6,acc$0,function(o){return caml_call2(f,o,x)}],
                      rest$11)};
          case 16:
           var rest$12=fmt$0[1];
           return function(f){return make_printf(k$0,[6,acc$0,f],rest$12)};
          case 17:
           var
            fmt$4=fmt$0[2],
            fmting_lit=fmt$0[1],
            acc$4=[0,acc$0,fmting_lit],
            acc$0=acc$4,
            fmt$0=fmt$4;
           continue;
          case 18:
           var _fF_=fmt$0[1];
           if(0 === _fF_[0])
            {var
              rest$13=fmt$0[2],
              match=_fF_[1],
              fmt$5=match[1],
              k$3=
               function(acc,k,rest)
                {function k$0(kacc)
                  {return make_printf(k,[1,acc,[0,kacc]],rest)}
                 return k$0},
              k$1=k$3(acc$0,k$0,rest$13),
              k$0=k$1,
              acc$0=0,
              fmt$0=fmt$5;
             continue}
           var
            rest$14=fmt$0[2],
            match$0=_fF_[1],
            fmt$6=match$0[1],
            k$4=
             function(acc,k,rest)
              {function k$0(kacc){return make_printf(k,[1,acc,[1,kacc]],rest)}
               return k$0},
            k$2=k$4(acc$0,k$0,rest$14),
            k$0=k$2,
            acc$0=0,
            fmt$0=fmt$6;
           continue;
          case 19:throw [0,Assert_failure,_bk_];
          case 20:
           var rest$15=fmt$0[3],new_acc=[8,acc$0,_bl_];
           return function(param){return make_printf(k$0,new_acc,rest$15)};
          case 21:
           var rest$16=fmt$0[2];
           return function(n)
            {var new_acc=[4,acc$0,caml_format_int(_bm_,n)];
             return make_printf(k$0,new_acc,rest$16)};
          case 22:
           var rest$17=fmt$0[1];
           return function(c)
            {var new_acc=[5,acc$0,c];return make_printf(k$0,new_acc,rest$17)};
          case 23:
           var rest$18=fmt$0[2],ign=fmt$0[1];
           if(typeof ign === "number")
            switch(ign)
             {case 0:
               if(counter < 50)
                {var counter$1=counter + 1 | 0;
                 return make_invalid_arg(counter$1,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return make_invalid_arg(counter$2,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:throw [0,Assert_failure,_bn_];
              default:
               if(counter < 50)
                {var counter$3=counter + 1 | 0;
                 return make_invalid_arg(counter$3,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
           else
            switch(ign[0])
             {case 0:
               if(counter < 50)
                {var counter$4=counter + 1 | 0;
                 return make_invalid_arg(counter$4,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 1:
               if(counter < 50)
                {var counter$5=counter + 1 | 0;
                 return make_invalid_arg(counter$5,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 2:
               if(counter < 50)
                {var counter$6=counter + 1 | 0;
                 return make_invalid_arg(counter$6,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 3:
               if(counter < 50)
                {var counter$7=counter + 1 | 0;
                 return make_invalid_arg(counter$7,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 4:
               if(counter < 50)
                {var counter$8=counter + 1 | 0;
                 return make_invalid_arg(counter$8,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 5:
               if(counter < 50)
                {var counter$9=counter + 1 | 0;
                 return make_invalid_arg(counter$9,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 6:
               if(counter < 50)
                {var counter$10=counter + 1 | 0;
                 return make_invalid_arg(counter$10,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 7:
               if(counter < 50)
                {var counter$11=counter + 1 | 0;
                 return make_invalid_arg(counter$11,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 8:
               if(counter < 50)
                {var counter$12=counter + 1 | 0;
                 return make_invalid_arg(counter$12,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              case 9:
               var fmtty$0=ign[2];
               if(counter < 50)
                {var counter$15=counter + 1 | 0;
                 return make_from_fmtty$0
                         (counter$15,k$0,acc$0,fmtty$0,rest$18)}
               return caml_trampoline_return
                       (make_from_fmtty$0,[0,k$0,acc$0,fmtty$0,rest$18]);
              case 10:
               if(counter < 50)
                {var counter$13=counter + 1 | 0;
                 return make_invalid_arg(counter$13,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18]);
              default:
               if(counter < 50)
                {var counter$14=counter + 1 | 0;
                 return make_invalid_arg(counter$14,k$0,acc$0,rest$18)}
               return caml_trampoline_return
                       (make_invalid_arg,[0,k$0,acc$0,rest$18])}
          default:
           var
            rest$19=fmt$0[3],
            f=fmt$0[2],
            arity=fmt$0[1],
            _fG_=caml_call1(f,0);
           if(counter < 50)
            {var counter$0=counter + 1 | 0;
             return make_custom$0(counter$0,k$0,acc$0,rest$19,arity,_fG_)}
           return caml_trampoline_return
                   (make_custom$0,[0,k$0,acc$0,rest$19,arity,_fG_])}}
    function make_from_fmtty$0(counter,k,acc,fmtty,fmt)
     {if(typeof fmtty === "number")
       {if(counter < 50)
         {var counter$0=counter + 1 | 0;
          return make_invalid_arg(counter$0,k,acc,fmt)}
        return caml_trampoline_return(make_invalid_arg,[0,k,acc,fmt])}
      else
       switch(fmtty[0])
        {case 0:
          var rest=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest,fmt)};
         case 1:
          var rest$0=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$0,fmt)};
         case 2:
          var rest$1=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$1,fmt)};
         case 3:
          var rest$2=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$2,fmt)};
         case 4:
          var rest$3=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$3,fmt)};
         case 5:
          var rest$4=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$4,fmt)};
         case 6:
          var rest$5=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$5,fmt)};
         case 7:
          var rest$6=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$6,fmt)};
         case 8:
          var rest$7=fmtty[2];
          return function(param){return make_from_fmtty(k,acc,rest$7,fmt)};
         case 9:
          var
           rest$8=fmtty[3],
           ty2=fmtty[2],
           ty1=fmtty[1],
           ty=trans(symm(ty1),ty2);
          return function(param)
           {return make_from_fmtty(k,acc,concat_fmtty(ty,rest$8),fmt)};
         case 10:
          var rest$9=fmtty[1];
          return function(param,_fE_)
           {return make_from_fmtty(k,acc,rest$9,fmt)};
         case 11:
          var rest$10=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$10,fmt)};
         case 12:
          var rest$11=fmtty[1];
          return function(param){return make_from_fmtty(k,acc,rest$11,fmt)};
         case 13:throw [0,Assert_failure,_bo_];
         default:throw [0,Assert_failure,_bp_]}}
    function make_invalid_arg(counter,k,acc,fmt)
     {var _fD_=[8,acc,_bq_];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_fD_,fmt)}
      return caml_trampoline_return(make_printf$0,[0,k,_fD_,fmt])}
    function make_custom$0(counter,k,acc,rest,arity,f)
     {if(arity)
       {var arity$0=arity[1];
        return function(x)
         {return make_custom(k,acc,rest,arity$0,caml_call1(f,x))}}
      var _fC_=[4,acc,f];
      if(counter < 50)
       {var counter$0=counter + 1 | 0;
        return make_printf$0(counter$0,k,_fC_,rest)}
      return caml_trampoline_return(make_printf$0,[0,k,_fC_,rest])}
    function make_printf(k,acc,fmt)
     {return caml_trampoline(make_printf$0(0,k,acc,fmt))}
    function make_from_fmtty(k,acc,fmtty,fmt)
     {return caml_trampoline(make_from_fmtty$0(0,k,acc,fmtty,fmt))}
    function make_custom(k,acc,rest,arity,f)
     {return caml_trampoline(make_custom$0(0,k,acc,rest,arity,f))}
    function output_acc(o,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           output_acc(o,p);
           return output_string(o,s);
          case 1:
           var _fA_=acc$0[2],_fB_=acc$0[1];
           if(0 === _fA_[0])
            {var acc$1=_fA_[1];
             output_acc(o,_fB_);
             output_string(o,_br_);
             var acc$0=acc$1;
             continue}
           var acc$2=_fA_[1];
           output_acc(o,_fB_);
           output_string(o,_bs_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           output_acc(o,p$2);
           return caml_call1(f,o);
          case 7:var p$3=acc$0[1];output_acc(o,p$3);return caml_ml_flush(o);
          case 8:
           var msg=acc$0[2],p$4=acc$0[1];
           output_acc(o,p$4);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           output_acc(o,p$0);
           return output_string(o,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           output_acc(o,p$1);
           return caml_ml_output_char(o,c)}}
    function strput_acc(b,acc)
     {var acc$0=acc;
      for(;;)
       if(typeof acc$0 === "number")
        return 0;
       else
        switch(acc$0[0])
         {case 0:
           var
            fmting_lit=acc$0[2],
            p=acc$0[1],
            s=string_of_formatting_lit(fmting_lit);
           strput_acc(b,p);
           return add_string(b,s);
          case 1:
           var _fy_=acc$0[2],_fz_=acc$0[1];
           if(0 === _fy_[0])
            {var acc$1=_fy_[1];
             strput_acc(b,_fz_);
             add_string(b,_bt_);
             var acc$0=acc$1;
             continue}
           var acc$2=_fy_[1];
           strput_acc(b,_fz_);
           add_string(b,_bu_);
           var acc$0=acc$2;
           continue;
          case 6:
           var f=acc$0[2],p$2=acc$0[1];
           strput_acc(b,p$2);
           return add_string(b,caml_call1(f,0));
          case 7:var acc$3=acc$0[1],acc$0=acc$3;continue;
          case 8:
           var msg=acc$0[2],p$3=acc$0[1];
           strput_acc(b,p$3);
           return invalid_arg(msg);
          case 2:
          case 4:
           var s$0=acc$0[2],p$0=acc$0[1];
           strput_acc(b,p$0);
           return add_string(b,s$0);
          default:
           var c=acc$0[2],p$1=acc$0[1];
           strput_acc(b,p$1);
           var pos=b[2];
           if(b[3] <= pos)resize(b,1);
           caml_bytes_unsafe_set(b[1],pos,c);
           b[2] = pos + 1 | 0;
           return 0}}
    function fprintf(oc,fmt$0)
     {var fmt=fmt$0[1],_fx_=0;
      return make_printf(function(acc){output_acc(oc,acc);return 0},_fx_,fmt)}
    function ksprintf(k,param)
     {var fmt=param[1];
      function k$0(acc)
       {var
         n$0=64,
         n=max_string_length < 64?max_string_length:n$0,
         s=caml_create_bytes(n),
         buf=[0,s,0,n,s];
        strput_acc(buf,acc);
        return caml_call1(k,sub_string(buf[1],0,buf[2]))}
      return make_printf(k$0,0,fmt)}
    function sprintf(fmt){return ksprintf(function(s){return s},fmt)}
    var printers=[0,0];
    function field(x,i$1)
     {var a=x[1 + i$1];
      if(1 - (typeof a === "number"?1:0))
       {if(caml_obj_tag(a) === 252)return caml_call1(sprintf(_bv_),a);
        if(caml_obj_tag(a) === 253)
         {var s=caml_format_float(_d_,a),l=caml_ml_string_length(s),i=0;
          for(;;)
           {if(l <= i)return symbol(s,_c_);
            var
             match=caml_string_get(s,i),
             switch$0=48 <= match?58 <= match?0:1:45 === match?1:0;
            if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
            return s}}
        return _bw_}
      return caml_call1(sprintf(_bx_),a)}
    function other_fields(x,i)
     {if(x.length - 1 <= i)return _by_;
      var _fv_=other_fields(x,i + 1 | 0),_fw_=field(x,i);
      return caml_call2(sprintf(_bz_),_fw_,_fv_)}
    function to_string(e)
     {function conv(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var tl=param$0[2],hd=param$0[1];
            try
             {var val=caml_call1(hd,e),switch$0=0}
            catch(_fu_){var switch$0=1}
            if(! switch$0)if(val){var s=val[1];return [0,s]}
            var param$0=tl;
            continue}
          return 0}}
      var match$0=conv(printers[1]);
      if(match$0){var s=match$0[1];return s}
      if(e === Out_of_memory)return _bE_;
      if(e === Stack_overflow)return _bF_;
      if(e[1] === Match_failure)
       {var match$1=e[2],char$0=match$1[3],line=match$1[2],file=match$1[1];
        return caml_call5
                (sprintf(locfmt),file,line,char$0,char$0 + 5 | 0,_bG_)}
      if(e[1] === Assert_failure)
       {var
         match$2=e[2],
         char$1=match$2[3],
         line$0=match$2[2],
         file$0=match$2[1];
        return caml_call5
                (sprintf(locfmt),file$0,line$0,char$1,char$1 + 6 | 0,_bH_)}
      if(e[1] === Undefined_recursive_module)
       {var
         match$3=e[2],
         char$2=match$3[3],
         line$1=match$3[2],
         file$1=match$3[1];
        return caml_call5
                (sprintf(locfmt),file$1,line$1,char$2,char$2 + 6 | 0,_bI_)}
      if(0 === caml_obj_tag(e))
       {var constructor=e[1][1],match=e.length - 1;
        if(2 < match >>> 0)
         var
          _fq_=other_fields(e,2),
          _fr_=field(e,1),
          _ft_=caml_call2(sprintf(_bA_),_fr_,_fq_);
        else
         switch(match)
          {case 0:var _ft_=_bB_;break;
           case 1:var _ft_=_bC_;break;
           default:var _fs_=field(e,1),_ft_=caml_call1(sprintf(_bD_),_fs_)}
        return symbol(constructor,_ft_)}
      return e[1]}
    function print_backtrace(outchan)
     {var
       raw_backtrace=caml_get_exception_raw_backtrace(0),
       a=caml_convert_raw_backtrace(raw_backtrace),
       backtrace=[0,a];
      if(backtrace)
       {var _fo_=a.length - 1 - 1 | 0,_fn_=0;
        if(! (_fo_ < 0))
         {var i=_fn_;
          for(;;)
           {var
             slot=caml_check_bound(a,i)[1 + i],
             info$0=
              function(i)
               {function info(is_raise)
                 {return is_raise?0 === i?_bJ_:_bK_:0 === i?_bL_:_bM_}
                return info},
             info=info$0(i);
            if(0 === slot[0])
             var
              _fg_=slot[5],
              _fh_=slot[4],
              _fi_=slot[3],
              _fj_=slot[6]?_bN_:_bP_,
              _fk_=slot[2],
              _fl_=info(slot[1]),
              match=
               [0,caml_call6(sprintf(_bO_),_fl_,_fk_,_fj_,_fi_,_fh_,_fg_)];
            else
             if(slot[1])
              var match=0;
             else
              var _fm_=info(0),match=[0,caml_call1(sprintf(_bQ_),_fm_)];
            if(match){var str=match[1];caml_call1(fprintf(outchan,_bR_),str)}
            var _fp_=i + 1 | 0;
            if(_fo_ !== i){var i=_fp_;continue}
            break}}
        return 0}
      return fprintf(outchan,_bS_)}
    function register_printer(fn){printers[1] = [0,fn,printers[1]];return 0}
    var initial_object_size=2;
    function f(s)
     {var accu=[0,0],_fd_=caml_ml_string_length(s) - 1 | 0,_fc_=0;
      if(! (_fd_ < 0))
       {var i=_fc_;
        for(;;)
         {var _fe_=caml_string_get(s,i);
          accu[1] = (223 * accu[1] | 0) + _fe_ | 0;
          var _ff_=i + 1 | 0;
          if(_fd_ !== i){var i=_ff_;continue}
          break}}
      accu[1] = accu[1] & 2147483647;
      var tag=1073741823 < accu[1]?accu[1] + 2147483648 | 0:accu[1];
      return tag}
    var
     compare=caml_string_compare,
     Vars=_A_([0,compare]),
     compare$0=caml_string_compare,
     Meths=_A_([0,compare$0]),
     compare$1=caml_int_compare,
     Labs=_A_([0,compare$1]),
     table_count=[0,0],
     dummy_met=caml_obj_block(0,0);
    function fit_size(n){return 2 < n?fit_size((n + 1 | 0) / 2 | 0) * 2 | 0:n}
    function new_table(pub_labels)
     {table_count[1]++;
      var
       len=pub_labels.length - 1,
       methods=caml_make_vect((len * 2 | 0) + 2 | 0,dummy_met);
      caml_check_bound(methods,0)[1] = len;
      var _e8_=((fit_size(len) * 32 | 0) / 8 | 0) - 1 | 0;
      caml_check_bound(methods,1)[2] = _e8_;
      var _e__=len - 1 | 0,_e9_=0;
      if(! (_e__ < 0))
       {var i=_e9_;
        for(;;)
         {var
           _fa_=(i * 2 | 0) + 3 | 0,
           _e$_=caml_check_bound(pub_labels,i)[1 + i];
          caml_check_bound(methods,_fa_)[1 + _fa_] = _e$_;
          var _fb_=i + 1 | 0;
          if(_e__ !== i){var i=_fb_;continue}
          break}}
      return [0,initial_object_size,methods,Meths[1],Labs[1],0,0,Vars[1],0]}
    function resize$0(array,new_size)
     {var len=array[2].length - 1,_e5_=len < new_size?1:0;
      if(_e5_)
       {var
         a2=caml_make_vect(new_size,dummy_met),
         _e6_=array[2],
         switch$0=
          0 <= len
           ?(_e6_.length - 1 - len | 0) < 0
             ?0
             :(a2.length - 1 - len | 0) < 0
               ?0
               :(caml_array_blit(_e6_,0,a2,0,len),1)
           :0;
        if(! switch$0)invalid_arg(_o_);
        array[2] = a2;
        var _e7_=0}
      else
       var _e7_=_e5_;
      return _e7_}
    var method_count=[0,0],inst_var_count=[0,0];
    function new_method(table)
     {var index=table[2].length - 1;
      resize$0(table,index + 1 | 0);
      return index}
    function get_method_label(table,name)
     {try
       {var _e3_=caml_call2(Meths[27],name,table[3]);return _e3_}
      catch(_e4_)
       {_e4_ = caml_wrap_exception(_e4_);
        if(_e4_ === Not_found)
         {var label=new_method(table);
          table[3] = caml_call3(Meths[4],name,label,table[3]);
          table[4] = caml_call3(Labs[4],label,1,table[4]);
          return label}
        throw _e4_}}
    function new_slot(table)
     {var index=table[1];table[1] = index + 1 | 0;return index}
    function new_variable(table,name)
     {try
       {var _e1_=caml_call2(Vars[27],name,table[7]);return _e1_}
      catch(_e2_)
       {_e2_ = caml_wrap_exception(_e2_);
        if(_e2_ === Not_found)
         {var index=new_slot(table);
          if(caml_string_notequal(name,_bT_))
           table[7] = caml_call3(Vars[4],name,index,table[7]);
          return index}
        throw _e2_}}
    function new_cache(table)
     {var n=new_method(table);
      if(0 === (n % 2 | 0))
       var switch$0=0;
      else
       if((2 + ((caml_check_bound(table[2],1)[2] * 16 | 0) / 32 | 0) | 0) < n)
        var switch$0=0;
       else
        var n$0=new_method(table),switch$0=1;
      if(! switch$0)var n$0=n;
      caml_check_bound(table[2],n$0)[1 + n$0] = 0;
      return n$0}
    var window=joo_global_object,no_handler=null,t37=undefined;
    function test(x){return 1 - (x == no_handler?1:0)}
    function case$0(x,f,g)
     {return x == no_handler?caml_call1(f,0):caml_call1(g,x)}
    function test$0(x){return x !== t37?1:0}
    function case$1(x,f,g){return x === t37?caml_call1(f,0):caml_call1(g,x)}
    function get(x,f){return x === t37?caml_call1(f,0):x}
    var
     capt=true,
     false$0=false,
     regExp_withFlags=window.RegExp,
     array_length=window.Array,
     date_ms=window.Date,
     Error$0=[248,_b5_,caml_fresh_oo_id(0)],
     exn=[0,Error$0,{}],
     slot=caml_obj_tag(exn) === 248?exn:exn[1];
    caml_register_named_value(caml_new_string("jsError"),slot);
    (function(exn){throw exn});
    register_printer
     (function(param)
       {if(param[1] === Error$0)
         {var e=param[2];return [0,caml_js_to_string(e.toString())]}
        return 0});
    register_printer
     (function(e)
       {return e instanceof array_length?0:[0,caml_js_to_string(e.toString())]});
    function appendChild(p,n){p.appendChild(n);return 0}
    function handler(f)
     {return function(e)
       {if(test(e))
         {var res=caml_call1(f,e);
          if(1 - (res | 0))e.preventDefault();
          return res}
        var e$0=event,res$0=caml_call1(f,e$0);
        if(1 - (res$0 | 0))e$0.returnValue = res$0;
        return res$0}}
    function addEventListenerWithOptions(e,typ,capture,once,passive,h)
     {if(e.addEventListener === t37)
       {var
         ev="on".concat(typ),
         callback=
          function(e)
           {var _eY_=[0,h,e,[0]];
            return function(_eZ_,_e0_){return caml_js_call(_eY_,_eZ_,_e0_)}};
        e.attachEvent(ev,callback);
        return function(param){return e.detachEvent(ev,callback)}}
      var opts={};
      function iter(t,f){if(t){var b=t[1];return caml_call1(f,b)}return 0}
      iter(capture,function(b){return opts.capture = b});
      iter(once,function(b){return opts.once = b});
      iter(passive,function(b){return opts.passive = b});
      e.addEventListener(typ,h,opts);
      return function(param){return e.removeEventListener(typ,h,opts)}}
    function addEventListener(e,typ,h,capt)
     {return addEventListenerWithOptions(e,typ,[0,capt],0,0,h)}
    function f$11(id){return caml_call1(id,0)}
    var
     onIE=caml_js_on_ie(0) | 0,
     mouseup="mouseup",
     mousemove="mousemove",
     mousewheel="mousewheel",
     DOMMouseScroll="DOMMouseScroll",
     d="2d",
     doc=window.document;
    function unsafeCreateElement(doc,name)
     {return doc.createElement(name.toString())}
    function createDiv(doc){return unsafeCreateElement(doc,_b6_)}
    var Canvas_not_available=[248,_b8_,caml_fresh_oo_id(0)];
    function createCanvas(doc)
     {var c=unsafeCreateElement(doc,_b9_);
      if(1 - test(c.getContext))throw Canvas_not_available;
      return c}
    var html_element=window.HTMLElement;
    html_element === t37;
    function elementClientPosition(e)
     {var r=e.getBoundingClientRect(),body=doc.body,html=doc.documentElement;
      return [0,
              ((r.left | 0) - body.clientLeft | 0) - html.clientLeft | 0,
              ((r.top | 0) - body.clientTop | 0) - html.clientTop | 0]}
    var
     requestAnimationFrame=
      caml_js_pure_expr
       (function(param)
         {var
           l=
            [0,
             window.requestAnimationFrame,
             [0,
              window.mozRequestAnimationFrame,
              [0,
               window.webkitRequestAnimationFrame,
               [0,
                window.oRequestAnimationFrame,
                [0,window.msRequestAnimationFrame,0]]]]];
          try
           {var
             req=find(function(c){return test$0(c)},l),
             _eW_=function(callback){return req(callback)};
            return _eW_}
          catch(_eX_)
           {_eX_ = caml_wrap_exception(_eX_);
            if(_eX_ === Not_found)
             {var
               now=function(param){return new date_ms().getTime()},
               last=[0,now(0)];
              return function(callback)
               {var
                 t=now(0),
                 dt=last[1] + 16.6666666666666679 - t,
                 dt$0=dt < 0.?0.:dt;
                last[1] = t;
                window.setTimeout(callback,dt$0);
                return 0}}
            throw _eX_}}),
     overflow_limit=2147483000.;
    function create(param)
     {var
       xmlHttpRequest=window.XMLHttpRequest,
       activeXObject=window.activeXObject;
      try
       {var _eR_=new xmlHttpRequest();return _eR_}
      catch(_eS_)
       {try
         {var _eQ_=new activeXObject("Msxml2.XMLHTTP");return _eQ_}
        catch(_eT_)
         {try
           {var _eP_=new activeXObject("Msxml3.XMLHTTP");return _eP_}
          catch(_eU_)
           {try
             {var _eO_=new activeXObject("Microsoft.XMLHTTP");return _eO_}
            catch(_eV_){throw [0,Assert_failure,_b__]}}}}}
    function regexp(s)
     {return new regExp_withFlags(caml_jsbytes_of_string(s),"g")}
    new regExp_withFlags("[$]","g");
    var quote_re=regexp(_b$_),Local_exn=[248,_ca_,caml_fresh_oo_id(0)];
    function interrupt(param){throw Local_exn}
    regexp
     (caml_js_to_byte_string
       (caml_jsbytes_of_string(s$0).replace(quote_re,"\\$&")));
    var plus_re_js_string=new regExp_withFlags("\\+","g");
    function urldecode_js_string_string(s$0)
     {plus_re_js_string.lastIndex = 0;
      var s=s$0.replace(plus_re_js_string," ");
      return caml_js_to_byte_string(window.unescape(s))}
    caml_fresh_oo_id(0);
    new regExp_withFlags(caml_jsbytes_of_string(_ce_));
    new regExp_withFlags(caml_jsbytes_of_string(_cf_));
    if(test$0(window.location))
     var _cg_=window.location;
    else
     var
      t29="",
      t40=function(param,_eN_){return 0},
      t39=function(param,_eM_){return 0},
      t38=function(param){return 0},
      _cg_=
       {"href":t29,
        "protocol":t29,
        "host":t29,
        "hostname":t29,
        "port":t29,
        "pathname":t29,
        "search":t29,
        "hash":t29,
        "origin":t37,
        "reload":caml_js_wrap_meth_callback(t38),
        "replace":caml_js_wrap_meth_callback(t39),
        "assign":caml_js_wrap_meth_callback(t40)};
    urldecode_js_string_string(_cg_.hostname);
    urldecode_js_string_string(_cg_.protocol);
    var _ch_=0;
    (function(param)
       {try
         {var _eK_=[0,caml_int_of_string(caml_js_to_byte_string(_cg_.port))];
          return _eK_}
        catch(_eL_)
         {_eL_ = caml_wrap_exception(_eL_);
          if(_eL_[1] === Failure)return 0;
          throw _eL_}}
      (_ch_));
    var
     s$1=urldecode_js_string_string(_cg_.pathname),
     l$0=caml_ml_string_length(s$1);
    function aux(i)
     {try
       {var _eI_=index_from(s$1,i,47),j=_eI_}
      catch(_eJ_)
       {_eJ_ = caml_wrap_exception(_eJ_);
        if(_eJ_ !== Not_found)throw _eJ_;
        var j=l$0}
      var word=sub$0(s$1,i,j - i | 0);
      return l$0 <= j?[0,word,0]:[0,word,aux(j + 1 | 0)]}
    var a$0=aux(0);
    if(a$0)
     if(caml_string_notequal(a$0[1],_cb_))
      var switch$0=0;
     else
      var
       _cc_=a$0[2],
       switch$0=_cc_?caml_string_notequal(_cc_[1],_cd_)?0:_cc_[2]?0:1:1;
    else
     var switch$0=0;
    var
     _ci_=_cg_.search.charAt(0) === "?"?_cg_.search.slice(1):_cg_.search,
     arr=_ci_.split(make$0(1,38).toString()),
     len$0=arr.length;
    function aux$0(acc,idx)
     {var idx$0=idx;
      for(;;)
       {if(idx$0 < 0)return acc;
        try
         {var
           _eA_=idx$0 - 1 | 0,
           _eB_=
            function(s)
             {function _eG_(param)
               {var y=param[2],x=param[1],_eH_=urldecode_js_string_string(y);
                return [0,urldecode_js_string_string(x),_eH_]}
              var index=s.indexOf(make$0(1,61).toString());
              if(index < 0)
               var _eF_=t37;
              else
               var _eE_=s.slice(index + 1 | 0),_eF_=[0,s.slice(0,index),_eE_];
              return case$1(_eF_,interrupt,_eG_)},
           _eC_=aux$0([0,case$1(arr[idx$0],interrupt,_eB_),acc],_eA_);
          return _eC_}
        catch(_eD_)
         {_eD_ = caml_wrap_exception(_eD_);
          if(_eD_ === Local_exn){var idx$1=idx$0 - 1 | 0,idx$0=idx$1;continue}
          throw _eD_}}}
    aux$0(0,len$0 - 1 | 0);
    urldecode_js_string_string(_cg_.href);
    symbol(s$2,symbol(_c9_,git_version));
    var console=caml_js_get_console(0);
    caml_fresh_oo_id(0);
    function create$0(param)
     {var seq=[];caml_update_dummy(seq,[0,seq,seq]);return seq}
    var compare$2=caml_compare,Storage_map=_A_([0,compare$2]);
    function underlying(p)
     {var _ez_=p[1];
      switch(_ez_[0])
       {case 0:return p;
        case 1:return p;
        case 2:return p;
        default:
         var p$0=_ez_[1],p$1=underlying(p$0);
         if(1 - (p$1 === p$0?1:0))p[1] = [3,p$1];
         return p$1}}
    function set_promise_state(p,state){p[1] = state;return p}
    var current_storage=[0,Storage_map[1]];
    function concat_regular_callbacks(l1,l2)
     {return typeof l1 === "number"?l2:typeof l2 === "number"?l1:[0,l1,l2]}
    function clean_up_callback_cells(callbacks)
     {if(typeof callbacks !== "number")
       switch(callbacks[0])
        {case 0:
          var
           l2=callbacks[2],
           l1=callbacks[1],
           l1$0=clean_up_callback_cells(l1),
           l2$0=clean_up_callback_cells(l2);
          return concat_regular_callbacks(l1$0,l2$0);
         case 2:if(! callbacks[1][1])return 0;break
         }
      return callbacks}
    var
     async_exception_hook=
      [0,
       function(exn)
        {prerr_string(_cj_);
         prerr_string(to_string(exn));
         caml_ml_output_char(stderr,10);
         print_backtrace(stderr);
         caml_ml_flush(stderr);
         do_at_exit(0);
         return caml_sys_exit(2)}];
    function handle_with_async_exception_hook(f,v)
     {try
       {var _ey_=caml_call1(f,v);return _ey_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call1(async_exception_hook[1],exn)}}
    var Canceled=[248,_ck_,caml_fresh_oo_id(0)];
    function run_callbacks(callbacks,result)
     {if(1 === result[0])
       var _ew_=result[1] === Canceled?1:0,is_canceled=_ew_;
      else
       var is_canceled=0;
      if(is_canceled)
       {var
         _eu_=callbacks[2],
         iter_callback_list$2=
          function(counter,fs,rest)
           {var fs$0=fs,rest$0=rest;
            for(;;)
             if(typeof fs$0 === "number")
              {if(counter < 50)
                {var counter$0=counter + 1 | 0;
                 return iter_list$0(counter$0,rest$0)}
               return caml_trampoline_return(iter_list$0,[0,rest$0])}
             else
              switch(fs$0[0])
               {case 0:
                 var
                  fs$1=fs$0[2],
                  fs$2=fs$0[1],
                  rest$1=[0,fs$1,rest$0],
                  fs$0=fs$2,
                  rest$0=rest$1;
                 continue;
                case 1:
                 var f=fs$0[2],storage=fs$0[1];
                 current_storage[1] = storage;
                 handle_with_async_exception_hook(f,0);
                 if(counter < 50)
                  {var counter$1=counter + 1 | 0;
                   return iter_list$0(counter$1,rest$0)}
                 return caml_trampoline_return(iter_list$0,[0,rest$0]);
                default:
                 var node=fs$0[1];
                 if(node[4])
                  {node[4] = 0;node[1][2] = node[2];node[2][1] = node[1]}
                 if(counter < 50)
                  {var counter$2=counter + 1 | 0;
                   return iter_list$0(counter$2,rest$0)}
                 return caml_trampoline_return(iter_list$0,[0,rest$0])}},
         iter_list$0=
          function(counter,rest)
           {if(rest)
             {var rest$0=rest[2],fs=rest[1];
              if(counter < 50)
               {var counter$0=counter + 1 | 0;
                return iter_callback_list$2(counter$0,fs,rest$0)}
              return caml_trampoline_return
                      (iter_callback_list$2,[0,fs,rest$0])}
            return 0},
         iter_callback_list=
          function(fs,rest)
           {return caml_trampoline(iter_callback_list$2(0,fs,rest))};
        iter_callback_list(_eu_,0)}
      var _ev_=callbacks[1];
      function iter_callback_list$1(counter,fs,rest)
       {var fs$0=fs,rest$0=rest;
        for(;;)
         if(typeof fs$0 === "number")
          {if(counter < 50)
            {var counter$0=counter + 1 | 0;return iter_list(counter$0,rest$0)}
           return caml_trampoline_return(iter_list,[0,rest$0])}
         else
          switch(fs$0[0])
           {case 0:
             var
              fs$1=fs$0[2],
              fs$2=fs$0[1],
              rest$1=[0,fs$1,rest$0],
              fs$0=fs$2,
              rest$0=rest$1;
             continue;
            case 1:
             var f=fs$0[1];
             caml_call1(f,result);
             if(counter < 50)
              {var counter$1=counter + 1 | 0;
               return iter_list(counter$1,rest$0)}
             return caml_trampoline_return(iter_list,[0,rest$0]);
            default:
             var _ex_=fs$0[1][1];
             if(_ex_)
              {var f$0=_ex_[1];
               caml_call1(f$0,result);
               if(counter < 50)
                {var counter$2=counter + 1 | 0;
                 return iter_list(counter$2,rest$0)}
               return caml_trampoline_return(iter_list,[0,rest$0])}
             if(counter < 50)
              {var counter$3=counter + 1 | 0;
               return iter_list(counter$3,rest$0)}
             return caml_trampoline_return(iter_list,[0,rest$0])}}
      function iter_list(counter,rest)
       {if(rest)
         {var rest$0=rest[2],fs=rest[1];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;
            return iter_callback_list$1(counter$0,fs,rest$0)}
          return caml_trampoline_return(iter_callback_list$1,[0,fs,rest$0])}
        return 0}
      function iter_callback_list$0(fs,rest)
       {return caml_trampoline(iter_callback_list$1(0,fs,rest))}
      return iter_callback_list$0(_ev_,0)}
    var
     current_callback_nesting_depth=[0,0],
     deferred_callbacks=[0,0,0,0],
     default_maximum_callback_nesting_depth=42;
    function run_in_resolution_loop(f)
     {current_callback_nesting_depth[1]
      =
      current_callback_nesting_depth[1]
      +
      1
      |
      0;
      var storage_snapshot=current_storage[1],result$0=caml_call1(f,0);
      if(1 === current_callback_nesting_depth[1])
       for(;;)
        {if(0 !== deferred_callbacks[1])
          {var _er_=deferred_callbacks[2];
           if(_er_)
            {var _es_=_er_[1],_et_=_er_[2];
             if(_et_)
              {deferred_callbacks[1] = deferred_callbacks[1] - 1 | 0;
               deferred_callbacks[2] = _et_}
             else
              {deferred_callbacks[1] = 0;
               deferred_callbacks[2] = 0;
               deferred_callbacks[3] = 0}
             var result=_es_[2],callbacks=_es_[1];
             run_callbacks(callbacks,result);
             continue}
           throw Empty}
         break}
      current_callback_nesting_depth[1]
      =
      current_callback_nesting_depth[1]
      -
      1
      |
      0;
      current_storage[1] = storage_snapshot;
      return result$0}
    function resolve
     (allow_deferring$0,maximum_callback_nesting_depth$0,p,result)
     {var match=p[1],callbacks=match[1],p$0=set_promise_state(p,result);
      if(allow_deferring$0)
       var sth=allow_deferring$0[1],allow_deferring=sth;
      else
       var allow_deferring=1;
      if(maximum_callback_nesting_depth$0)
       var
        sth$0=maximum_callback_nesting_depth$0[1],
        maximum_callback_nesting_depth=sth$0;
      else
       var
        maximum_callback_nesting_depth=
         default_maximum_callback_nesting_depth;
      var
       should_defer=
        allow_deferring
         ?maximum_callback_nesting_depth <= current_callback_nesting_depth[1]
           ?1
           :0
         :allow_deferring;
      if(should_defer)
       add([0,callbacks,result],deferred_callbacks);
      else
       run_in_resolution_loop
        (function(param){return run_callbacks(callbacks,result)});
      return p$0}
    function run_callback_or_defer_it(opt,f,if_deferred)
     {if(opt)
       var sth=opt[1],run_immediately_and_ensure_tail_call=sth;
      else
       var run_immediately_and_ensure_tail_call=0;
      if(run_immediately_and_ensure_tail_call)return caml_call1(f,0);
      var should_defer=42 <= current_callback_nesting_depth[1]?1:0;
      if(should_defer)
       {var
         match=caml_call1(if_deferred,0),
         deferred_result=match[3],
         deferred_callback=match[2],
         immediate_result=match[1],
         deferred_record=[0,[1,deferred_callback],0,0,0];
        add([0,deferred_record,deferred_result],deferred_callbacks);
        return immediate_result}
      return run_in_resolution_loop(function(param){return caml_call1(f,0)})}
    function wakeup_general(api_function_name,p,result)
     {var p$0=underlying(p),_eq_=p$0[1];
      switch(_eq_[0])
       {case 1:
         return _eq_[1] === Canceled
                 ?0
                 :caml_call1(ksprintf(invalid_arg,_cm_),api_function_name);
        case 2:
         if(0 === result[0])
          var x=result[1],result$0=[0,x];
         else
          var exn=result[1],result$0=[1,exn];
         resolve(_cn_,0,p$0,result$0);
         return 0;
        default:
         return caml_call1(ksprintf(invalid_arg,_cl_),api_function_name)}}
    function wakeup(r,v){return wakeup_general(_co_,r,[0,v])}
    function return$0(v){return [0,[0,v]]}
    function fail(exn){return [0,[1,exn]]}
    function new_pending(how_to_cancel)
     {var state=[2,[0,0,0,how_to_cancel,0]];return [0,state]}
    function task(param){var p=new_pending(1);return [0,p,p]}
    function make_into_proxy(outer_promise,user_provided_promise)
     {var p=underlying(user_provided_promise);
      if(p === outer_promise)return p;
      var _ep_=p[1];
      switch(_ep_[0])
       {case 1:return resolve(_cr_,0,outer_promise,p[1]);
        case 2:
         var
          p_callbacks=_ep_[1],
          match=outer_promise[1],
          outer_callbacks=match[1],
          regular_callbacks=
           concat_regular_callbacks(outer_callbacks[1],p_callbacks[1]),
          cleanups_deferred=outer_callbacks[4] + p_callbacks[4] | 0;
         if(42 < cleanups_deferred)
          var
           regular_callbacks$0=clean_up_callback_cells(regular_callbacks),
           cleanups_deferred$0=0;
         else
          var
           regular_callbacks$0=regular_callbacks,
           cleanups_deferred$0=cleanups_deferred;
         var
          _en_=p_callbacks[2],
          _eo_=outer_callbacks[2],
          cancel_callbacks=
           typeof _eo_ === "number"
            ?_en_
            :typeof _en_ === "number"?_eo_:[0,_eo_,_en_];
         outer_callbacks[1] = regular_callbacks$0;
         outer_callbacks[2] = cancel_callbacks;
         outer_callbacks[4] = cleanups_deferred$0;
         outer_callbacks[3] = p_callbacks[3];
         set_promise_state(p,[3,outer_promise]);
         return outer_promise;
        default:return resolve(_cq_,0,outer_promise,p[1])}}
    function symbol_bind(p,f)
     {var p$0=underlying(p);
      function create_result_promise_and_callback_if_deferred(param)
       {var p=new_pending([0,p$0]),saved_storage=current_storage[1];
        function callback(p_result)
         {if(1 === p_result[0])
           {var p$2=underlying(p);resolve(_cs_,0,p$2,p_result);return 0}
          var v=p_result[1];
          current_storage[1] = saved_storage;
          try
           {var _em_=caml_call1(f,v),p$0=_em_}
          catch(exn){exn = caml_wrap_exception(exn);var p$0=fail(exn)}
          var p$1=underlying(p);
          make_into_proxy(p$1,p$0);
          return 0}
        return [0,p,callback]}
      var _ek_=p$0[1];
      switch(_ek_[0])
       {case 1:return [0,_ek_];
        case 2:
         var
          p_callbacks=_ek_[1],
          match=create_result_promise_and_callback_if_deferred(0),
          callback=match[2],
          p$1=match[1],
          node$0=[1,callback],
          _ej_=p_callbacks[1],
          node=typeof _ej_ === "number"?node$0:[0,node$0,_ej_];
         p_callbacks[1] = node;
         return p$1;
        default:
         var
          v=_ek_[1],
          _el_=
           function(param)
            {var
              match=create_result_promise_and_callback_if_deferred(0),
              callback=match[2],
              p=match[1];
             return [0,p,callback,p$0[1]]};
         return run_callback_or_defer_it
                 (_ct_,function(param){return caml_call1(f,v)},_el_)}}
    function on_cancel(p,f)
     {var p$0=underlying(p),_eh_=p$0[1];
      switch(_eh_[0])
       {case 1:
         if(_eh_[1] === Canceled)
          {var
            _ei_=
             function(param)
              {return [0,
                       0,
                       function(param)
                        {return handle_with_async_exception_hook(f,0)},
                       _cu_]};
           return run_callback_or_defer_it
                   (_cv_,
                    function(param)
                     {return handle_with_async_exception_hook(f,0)},
                    _ei_)}
         return 0;
        case 2:
         var
          callbacks=_eh_[1],
          node=[1,current_storage[1],f],
          node$0=typeof callbacks[2] === "number"?node:[0,node,callbacks[2]];
         callbacks[2] = node$0;
         return 0;
        default:return 0}}
    var pause_hook=[0,function(_eg_){return 0}],s1=create$0(0),_cw_=[0,0];
    function wakeup_paused(param)
     {if(s1[2] === s1){_cw_[1] = 0;return 0}
      var seq=create$0(0);
      seq[1][2] = s1[2];
      s1[2][1] = seq[1];
      seq[1] = s1[1];
      s1[1][2] = seq;
      s1[1] = s1;
      s1[2] = s1;
      _cw_[1] = 0;
      var curr=seq[2];
      for(;;)
       {var _ef_=curr !== seq?1:0;
        if(_ef_)
         {if(curr[4])wakeup(curr[3],0);
          var curr$0=curr[2],curr=curr$0;
          continue}
        return _ef_}}
    var Wrong_headers=[248,_cx_,caml_fresh_oo_id(0)];
    function f$12(param)
     {return 1 === param
              ?(window.setTimeout(caml_js_wrap_callback(wakeup_paused),0.),0)
              :0}
    pause_hook[1] = f$12;
    function prerr_string$0(s){return console.log(s.toString())}
    async_exception_hook[1]
    =
    function(exn)
     {prerr_string$0(_cz_);
      prerr_string$0(to_string(exn));
      return print_backtrace(stderr)};
    var white="white";
    function fill(ctx,c){ctx.fillStyle = c;return ctx.fill()}
    function get_drawable(w)
     {var ctx=w.getContext(d);ctx.lineWidth = 2.;return [0,w,ctx]}
    function put_pixmap(param,x,y,xsrc,ysrc,width,height,_ee_)
     {var p=_ee_[1],c=param[2];
      return c.drawImage(p,xsrc,ysrc,width,height,x,y,width,height)}
    function get_pixmap(pm)
     {var _ed_=pm[1];
      if(_ed_){var p=_ed_[1];return p}
      throw [0,Assert_failure,_cA_]}
    function perform_draw(ctx,fill$0,stroke)
     {if(fill$0){var c=fill$0[1];fill(ctx,c)}
      if(stroke){var c$0=stroke[1];ctx.strokeStyle = c$0;return ctx.stroke()}
      return 0}
    function _cB_(st,scale,x$2,y$2,x$1,y$1,w,h)
     {var ctx=get_pixmap(st[8])[2];
      ctx.save();
      var
       _d__=0 === st[1].length - 1?1:0,
       _d$_=_d__?0 < st[2].length - 1?1:0:_d__;
      if(_d$_)throw [0,Assert_failure,_cH_];
      ctx.beginPath();
      ctx.rect(x$1,y$1,w,h);
      fill(ctx,white);
      ctx.clip();
      var x$3=x$2 / scale,y$3=y$2 / scale;
      ctx.scale(scale,scale);
      ctx.translate(- st[4] - x$3,- st[5] - y$3);
      var
       x3$0=st[4] + x$3 + x$1 / scale,
       y3$0=st[5] + y$3 + y$1 / scale,
       y4=y3$0 + st[8][3] / scale,
       x4=x3$0 + st[8][2] / scale,
       _eb_=st[2].length - 1 - 1 | 0,
       _ea_=0;
      if(! (_eb_ < 0))
       {var i$0=_ea_;
        for(;;)
         {var
           param=caml_check_bound(st[1],i$0)[1 + i$0],
           e=caml_check_bound(st[2],i$0)[1 + i$0],
           y2$0=param[4],
           x2$0=param[3],
           y1$0=param[2],
           x1$0=param[1],
           _d6_=x1$0 <= x4?1:0;
          if(_d6_)
           {var _d7_=y1$0 <= y4?1:0;
            if(_d7_)
             var _d8_=x3$0 <= x2$0?1:0,_d9_=_d8_?y3$0 <= y2$0?1:0:_d8_;
            else
             var _d9_=_d7_}
          else
           var _d9_=_d6_;
          if(_d9_)
           {ctx.beginPath();
            switch(e[0])
             {case 0:
               var
                stroke=e[3],
                fill$0=e[2],
                cmd=e[1],
                _d4_=cmd.length - 1 - 1 | 0,
                _d3_=0;
               if(! (_d4_ < 0))
                {var i=_d3_;
                 for(;;)
                  {var c=cmd[1 + i];
                   if(0 === c[0])
                    {var y=c[2],x=c[1];ctx.moveTo(x,y)}
                   else
                    {var y3=c[6],x3=c[5],y2=c[4],x2=c[3],y1=c[2],x1=c[1];
                     ctx.bezierCurveTo(x1,y1,x2,y2,x3,y3)}
                   var _d5_=i + 1 | 0;
                   if(_d4_ !== i){var i=_d5_;continue}
                   break}}
               perform_draw(ctx,fill$0,stroke);
               break;
              case 1:
               var stroke$0=e[3],fill$1=e[2],points=e[1];
               iteri
                (function(i,param)
                  {var y=param[2],x=param[1];
                   return 0 === i?ctx.moveTo(x,y):ctx.lineTo(x,y)},
                 points);
               ctx.closePath();
               perform_draw(ctx,fill$1,stroke$0);
               break;
              case 2:
               var stroke$1=e[6],fill$2=e[5],ry=e[4],rx=e[3],cy=e[2],cx=e[1];
               ctx.save();
               ctx.translate(cx,cy);
               ctx.scale(rx,ry);
               ctx.arc(0.,0.,1.,0.,6.28318530717958623,capt);
               ctx.restore();
               perform_draw(ctx,fill$2,stroke$1);
               break;
              default:
               var
                stroke$2=e[6],
                fill$3=e[5],
                font=e[4],
                txt=e[3],
                y$0=e[2],
                x$0=e[1];
               ctx.font = font;
               ctx.textAlign = "center";
               ctx.textBaseline = "middle";
               if(fill$3)
                {var c$0=fill$3[1];
                 ctx.fillStyle = c$0;
                 ctx.fillText(txt,x$0,y$0)}
               if(stroke$2)
                {var c$1=stroke$2[1];
                 ctx.strokeStyle = c$1;
                 ctx.strokeText(txt,x$0,y$0)}}}
          var _ec_=i$0 + 1 | 0;
          if(_eb_ !== i$0){var i$0=_ec_;continue}
          break}}
      return ctx.restore()}
    var json=JSON;
    function http_get(url)
     {var opt=[0,0];
      function _dV_(param)
       {var msg=param[4],cod=param[2];
        if(0 !== cod)if(200 !== cod){var p=new_pending(0);return p}
        return return$0(msg)}
      var
       content_type$0=0,
       sth=0,
       _dU_=[0,0],
       headers=opt?sth:0,
       match=task(0),
       w=match[2],
       res=match[1],
       req=create(0);
      req.open("GET",url.toString(),capt);
      req.responseType = "";
      if(content_type$0)
       {var content_type=content_type$0[1];
        req.setRequestHeader("Content-type",content_type.toString())}
      var param=headers;
      for(;;)
       {if(param)
         {var l=param[2],a=param[1],v=a[2],n=a[1];
          req.setRequestHeader(n.toString(),v.toString());
          var param=l;
          continue}
        var
         headers$0=
          function(s)
           {function _d1_(v){return [0,caml_js_to_string(v)]}
            function _d2_(param){return 0}
            return case$0
                    (req.getResponseHeader(caml_jsbytes_of_string(s)),_d2_,_d1_)},
         st=[0,382334108],
         do_check_headers=
          function(param)
           {if(382334108 === st[1])
             if(1)
              st[1] = 583419792;
             else
              {var exn=[0,Wrong_headers,[0,req.status,headers$0]];
               wakeup_general(_cp_,w,[1,exn]);
               st[1] = 479410653;
               req.abort()}
            return 479410653 !== st[1]?1:0};
        req.onreadystatechange
        =
        caml_js_wrap_callback
         (function(param)
           {var match=req.readyState;
            switch(match)
             {case 2:if(! onIE){do_check_headers(0);return 0}break;
              case 3:if(onIE){do_check_headers(0);return 0}break;
              case 4:
               var _dZ_=do_check_headers(0);
               if(_dZ_)
                {var
                  code=req.status,
                  _dW_=
                   function(param)
                    {var x=req.responseXML;
                     function _d0_(x){return [0,x]}
                     var match=case$0(x,function(param){return 0},_d0_);
                     if(match)
                      {var doc=match[1];
                       return doc.documentElement === no_handler?0:[0,doc]}
                     return 0},
                  _dX_=caml_js_to_string,
                  _dY_=function(param){return _cy_},
                  response=
                   [0,
                    url,
                    code,
                    headers$0,
                    case$0(req.responseText,_dY_,_dX_),
                    _dW_];
                 return wakeup(w,response)}
               return _dZ_
              }
            return 0});
        var x=req.upload;
        x !== t37;
        req.send(no_handler);
        on_cancel(res,function(param){return req.abort()});
        return symbol_bind(res,_dV_)}}
    function getfile(f)
     {try
       {var _dS_=return$0(caml_read_file_content(f));return _dS_}
      catch(_dT_)
       {_dT_ = caml_wrap_exception(_dT_);
        if(_dT_ === Not_found)return http_get(f);
        throw _dT_}}
    if(0 === public_methods)
     var table$0=new_table([0]);
    else
     {var l=public_methods.length - 1;
      if(0 === l)
       var tags=[0];
      else
       {var r=caml_make_vect(l,f(public_methods[1])),_q_=l - 1 | 0,_p_=1;
        if(! (_q_ < 1))
         {var i=_p_;
          for(;;)
           {r[1 + i] = f(public_methods[1 + i]);
            var _r_=i + 1 | 0;
            if(_q_ !== i){var i=_r_;continue}
            break}}
        var tags=r}
      var table=new_table(tags);
      iteri
       (function(i,met)
         {var lab=(i * 2 | 0) + 2 | 0;
          table[3] = caml_call3(Meths[4],met,lab,table[3]);
          table[4] = caml_call3(Labs[4],lab,1,table[4]);
          return 0},
        public_methods);
      var table$0=table}
    var
     nmeths=meths.length - 1,
     nvals=vals.length - 1,
     res=caml_make_vect(nmeths + nvals | 0,0),
     _bV_=nmeths - 1 | 0,
     _bU_=0;
    if(! (_bV_ < 0))
     {var i$1=_bU_;
      for(;;)
       {var
         _b1_=
          get_method_label(table$0,caml_check_bound(meths,i$1)[1 + i$1]);
        caml_check_bound(res,i$1)[1 + i$1] = _b1_;
        var _b2_=i$1 + 1 | 0;
        if(_bV_ !== i$1){var i$1=_b2_;continue}
        break}}
    var _bX_=nvals - 1 | 0,_bW_=0;
    if(! (_bX_ < 0))
     {var i$0=_bW_;
      for(;;)
       {var
         _bZ_=i$0 + nmeths | 0,
         _bY_=new_variable(table$0,caml_check_bound(vals,i$0)[1 + i$0]);
        caml_check_bound(res,_bZ_)[1 + _bZ_] = _bY_;
        var _b0_=i$0 + 1 | 0;
        if(_bX_ !== i$0){var i$0=_b0_;continue}
        break}}
    var
     _cQ_=res[9],
     _cR_=res[10],
     _cS_=res[11],
     _cT_=res[12],
     _cU_=res[13],
     _cV_=res[14],
     _cI_=res[1],
     _cJ_=res[2],
     _cK_=res[3],
     _cL_=res[4],
     _cM_=res[5],
     _cN_=res[6],
     _cO_=res[7],
     _cP_=res[8];
    function _cW_(self_1,lower,upper,step_incr,page_incr,page_size,param)
     {if(lower){var v=lower[1];self_1[1 + _cR_] = v}
      if(upper){var v$0=upper[1];self_1[1 + _cS_] = v$0}
      if(step_incr){var v$1=step_incr[1];self_1[1 + _cT_] = v$1}
      if(page_incr){var v$2=page_incr[1];self_1[1 + _cU_] = v$2}
      if(page_size){var v$3=page_size[1];self_1[1 + _cV_] = v$3;return 0}
      return 0}
    function _cX_(self_1,v){self_1[1 + _cQ_] = v;return 0}
    function _cY_(self_1){return self_1[1 + _cV_]}
    function _cZ_(self_1){return self_1[1 + _cU_]}
    function _c0_(self_1){return self_1[1 + _cT_]}
    function _c1_(self_1){return self_1[1 + _cS_]}
    function _c2_(self_1){return self_1[1 + _cR_]}
    var
     methods=
      [0,
       _cI_,
       function(self_1){return self_1[1 + _cQ_]},
       _cP_,
       _c2_,
       _cJ_,
       _c1_,
       _cK_,
       _c0_,
       _cO_,
       _cZ_,
       _cN_,
       _cY_,
       _cL_,
       _cX_,
       _cM_,
       _cW_],
     len=methods.length - 1,
     i$2=[0,0];
    for(;;)
     {if(i$2[1] < len)
       {var
         _b4_=i$2[1],
         label=caml_check_bound(methods,_b4_)[1 + _b4_],
         next=
          function(param)
           {i$2[1]++;
            var _dR_=i$2[1];
            return caml_check_bound(methods,_dR_)[1 + _dR_]},
         clo=next(0);
        if(typeof clo === "number")
         switch(clo)
          {case 0:
            var
             x=next(0),
             clo$0=function(x){return function(obj){return x}}(x);
            break;
           case 1:
            var
             n=next(0),
             clo$0=function(n){return function(obj){return obj[1 + n]}}(n);
            break;
           case 2:
            var
             e=next(0),
             n$0=next(0),
             clo$0=
              function(e,n){return function(obj){return obj[1 + e][1 + n]}}
               (e,n$0);
            break;
           case 3:
            var
             n$1=next(0),
             clo$0=
              function(n)
                {return function(obj){return caml_call1(obj[1][1 + n],obj)}}
               (n$1);
            break;
           case 4:
            var
             n$2=next(0),
             clo$0=
              function(n){return function(obj,x){obj[1 + n] = x;return 0}}
               (n$2);
            break;
           case 5:
            var
             f$0=next(0),
             x$0=next(0),
             clo$0=
              function(f,x){return function(obj){return caml_call1(f,x)}}
               (f$0,x$0);
            break;
           case 6:
            var
             f$1=next(0),
             n$3=next(0),
             clo$0=
              function(f,n)
                {return function(obj){return caml_call1(f,obj[1 + n])}}
               (f$1,n$3);
            break;
           case 7:
            var
             f$2=next(0),
             e$0=next(0),
             n$4=next(0),
             clo$0=
              function(f,e,n)
                {return function(obj){return caml_call1(f,obj[1 + e][1 + n])}}
               (f$2,e$0,n$4);
            break;
           case 8:
            var
             f$3=next(0),
             n$5=next(0),
             clo$0=
              function(f,n)
                {return function(obj)
                  {return caml_call1(f,caml_call1(obj[1][1 + n],obj))}}
               (f$3,n$5);
            break;
           case 9:
            var
             f$4=next(0),
             x$1=next(0),
             y=next(0),
             clo$0=
              function(f,x,y){return function(obj){return caml_call2(f,x,y)}}
               (f$4,x$1,y);
            break;
           case 10:
            var
             f$5=next(0),
             x$2=next(0),
             n$6=next(0),
             clo$0=
              function(f,x,n)
                {return function(obj){return caml_call2(f,x,obj[1 + n])}}
               (f$5,x$2,n$6);
            break;
           case 11:
            var
             f$6=next(0),
             x$3=next(0),
             e$1=next(0),
             n$7=next(0),
             clo$0=
              function(f,x,e,n)
                {return function(obj)
                  {return caml_call2(f,x,obj[1 + e][1 + n])}}
               (f$6,x$3,e$1,n$7);
            break;
           case 12:
            var
             f$7=next(0),
             x$4=next(0),
             n$8=next(0),
             clo$0=
              function(f,x,n)
                {return function(obj)
                  {return caml_call2(f,x,caml_call1(obj[1][1 + n],obj))}}
               (f$7,x$4,n$8);
            break;
           case 13:
            var
             f$8=next(0),
             n$9=next(0),
             x$5=next(0),
             clo$0=
              function(f,n,x)
                {return function(obj){return caml_call2(f,obj[1 + n],x)}}
               (f$8,n$9,x$5);
            break;
           case 14:
            var
             f$9=next(0),
             e$2=next(0),
             n$10=next(0),
             x$6=next(0),
             clo$0=
              function(f,e,n,x)
                {return function(obj)
                  {return caml_call2(f,obj[1 + e][1 + n],x)}}
               (f$9,e$2,n$10,x$6);
            break;
           case 15:
            var
             f$10=next(0),
             n$11=next(0),
             x$7=next(0),
             clo$0=
              function(f,n,x)
                {return function(obj)
                  {return caml_call2(f,caml_call1(obj[1][1 + n],obj),x)}}
               (f$10,n$11,x$7);
            break;
           case 16:
            var
             n$12=next(0),
             x$8=next(0),
             clo$0=
              function(n,x)
                {return function(obj){return caml_call2(obj[1][1 + n],obj,x)}}
               (n$12,x$8);
            break;
           case 17:
            var
             n$13=next(0),
             m=next(0),
             clo$0=
              function(n,m)
                {return function(obj)
                  {return caml_call2(obj[1][1 + n],obj,obj[1 + m])}}
               (n$13,m);
            break;
           case 18:
            var
             n$14=next(0),
             e$3=next(0),
             m$0=next(0),
             clo$0=
              function(n,e,m)
                {return function(obj)
                  {return caml_call2(obj[1][1 + n],obj,obj[1 + e][1 + m])}}
               (n$14,e$3,m$0);
            break;
           case 19:
            var
             n$15=next(0),
             m$1=next(0),
             clo$0=
              function(n,m)
                {return function(obj)
                  {var _dP_=caml_call1(obj[1][1 + m],obj);
                   return caml_call2(obj[1][1 + n],obj,_dP_)}}
               (n$15,m$1);
            break;
           case 20:
            var
             m$2=next(0),
             x$9=next(0),
             c=new_cache(table$0),
             clo$0=
              function(m,x,c)
                {return function(obj)
                  {return caml_call2(caml_get_public_method(x,m,0),x,c)}}
               (m$2,x$9,c);
            break;
           case 21:
            var
             m$3=next(0),
             n$16=next(0),
             c$0=new_cache(table$0),
             clo$0=
              function(m,n,c)
                {return function(obj)
                  {var _dO_=obj[1 + n];
                   return caml_call2(caml_get_public_method(_dO_,m,0),_dO_,c)}}
               (m$3,n$16,c$0);
            break;
           case 22:
            var
             m$4=next(0),
             e$4=next(0),
             n$17=next(0),
             c$1=new_cache(table$0),
             clo$0=
              function(m,e,n,c)
                {return function(obj)
                  {var _dN_=obj[1 + e][1 + n];
                   return caml_call2(caml_get_public_method(_dN_,m,0),_dN_,c)}}
               (m$4,e$4,n$17,c$1);
            break;
           default:
            var
             m$5=next(0),
             n$18=next(0),
             c$2=new_cache(table$0),
             clo$0=
              function(m,n,c)
                {return function(obj)
                  {var _dQ_=caml_call1(obj[1][1 + n],obj);
                   return caml_call2(caml_get_public_method(_dQ_,m,0),_dQ_,c)}}
               (m$5,n$18,c$2)}
        else
         var clo$0=clo;
        method_count[1]++;
        if(caml_call2(Labs[27],label,table$0[4]))
         {resize$0(table$0,label + 1 | 0);
          caml_check_bound(table$0[2],label)[1 + label] = clo$0}
        else
         table$0[6] = [0,[0,label,clo$0],table$0[6]];
        i$2[1]++;
        continue}
      inst_var_count[1] = (inst_var_count[1] + table$0[1] | 0) - 1 | 0;
      var l1=table$0[8],l2=0;
      for(;;)
       {if(l1){var l1$0=l1[2],a=l1[1],l2$0=[0,a,l2],l1=l1$0,l2=l2$0;continue}
        table$0[8] = l2;
        resize$0
         (table$0,
          3 + ((caml_check_bound(table$0[2],1)[2] * 16 | 0) / 32 | 0) | 0);
        var
         _b3_=
          function(obj_0,opt)
           {if(opt)var sth=opt[1],sth$0=sth;else var sth$0=0.;
            return function(opt)
             {if(opt)var sth=opt[1],sth$1=sth;else var sth$1=0.;
              return function(opt)
               {if(opt)var sth=opt[1],sth$2=sth;else var sth$2=100.;
                return function(opt)
                 {if(opt)var sth=opt[1],sth$3=sth;else var sth$3=1.;
                  return function(opt)
                   {if(opt)var sth=opt[1],sth$4=sth;else var sth$4=10.;
                    return function(opt)
                     {if(opt)var sth=opt[1],sth$5=sth;else var sth$5=10.;
                      return function(_dL_)
                       {if(obj_0)
                         var _dM_=obj_0;
                        else
                         {var obj=caml_obj_block(248,table$0[1]);
                          obj[1] = table$0[2];
                          var _dM_=caml_set_oo_id(obj)}
                        _dM_[1 + _cQ_] = sth$0;
                        _dM_[1 + _cR_] = sth$1;
                        _dM_[1 + _cS_] = sth$2;
                        _dM_[1 + _cT_] = sth$3;
                        _dM_[1 + _cU_] = sth$4;
                        _dM_[1 + _cV_] = sth$5;
                        return _dM_}}}}}}},
         handle_drag=
          function(element,f)
           {var mx=[0,0],my=[0,0];
            return element.onmousedown
                   =
                   handler
                    (function(ev)
                      {mx[1] = ev.clientX;
                       my[1] = ev.clientY;
                       element.style.cursor = "move";
                       var
                        c1=
                         addEventListener
                          (doc,
                           mousemove,
                           handler
                            (function(ev)
                              {var x=ev.clientX,y=ev.clientY,x$0=mx[1],y$0=my[1];
                               mx[1] = x;
                               my[1] = y;
                               caml_call2(f,x - x$0 | 0,y - y$0 | 0);
                               return capt}),
                           capt),
                        c2=[0,no_handler];
                       c2[1]
                       =
                       addEventListener
                        (doc,
                         mouseup,
                         handler
                          (function(param)
                            {f$11(c1);
                             var _dK_=c2[1];
                             if(1 - (_dK_ == no_handler?1:0))f$11(_dK_);
                             element.style.cursor = "";
                             return capt}),
                         capt);
                       return capt})};
        window.onload
        =
        handler
         (function(param)
           {var page=doc.documentElement;
            page.style.overflow = "hidden";
            doc.body.style.overflow = "hidden";
            doc.body.style.margin = "0px";
            var started=[0,0],p=unsafeCreateElement(doc,_b7_);
            p.innerHTML = "Loading graph...";
            p.style.display = "none";
            appendChild(doc.body,p);
            function _c__(param)
             {if(1 - started[1])p.style.display = "inline";return return$0(0)}
            var match=task(0),w=match[2],t=match[1],d=500.;
            function callback(_dJ_){return wakeup(w,_dJ_)}
            var id=[0,0];
            function loop(step,param)
             {if(2147483000. < step)
               var step$0=overflow_limit,remain=step - 2147483000.;
              else
               var step$0=step,remain=0.;
              var
               cb=
                remain == 0.?callback:function(_dI_){return loop(remain,_dI_)};
              id[1] = [0,window.setTimeout(caml_js_wrap_callback(cb),step$0)];
              return 0}
            loop(d,0);
            on_cancel
             (t,
              function(param)
               {var _dH_=id[1];
                if(_dH_)
                 {var x=_dH_[1];id[1] = 0;return window.clearTimeout(x)}
                return 0});
            symbol_bind(t,_c__);
            function _c$_(s)
             {var
               _da_=json.parse(s.toString()),
               scene=_da_[3],
               bboxes=_da_[2],
               match=_da_[1],
               y2=match[4],
               x2=match[3],
               y1=match[2],
               x1=match[1];
              started[1] = 1;
              var p$0=doc.body;
              p$0.removeChild(p);
              var
               st=
                [0,
                 bboxes,
                 scene,
                 0.05,
                 x1,
                 y1,
                 x2 - x1,
                 y2 - y1,
                 [0,0,0,0,empty_rectangle]],
               h=page.clientHeight,
               w=page.clientWidth,
               window$0=createCanvas(doc);
              window$0.width = w;
              window$0.height = h;
              appendChild(doc.body,window$0);
              function allocation(param)
               {return [0,0,0,window$0.width,window$0.height]}
              var
               hadj=caml_call6(_b3_(0,0),0,0,0,0,0,0),
               vadj=caml_call6(_b3_(0,0),0,0,0,0,0,0),
               sadj=caml_call6(_b3_(0,0),0,_c6_,_c5_,_c4_,_c3_,0);
              function get_scale(param)
               {var _dG_=st[3];
                return Math.pow
                        (2.,
                         caml_call1(caml_get_public_method(sadj,834174833,373),sadj)
                         /
                         8.)
                       /
                       _dG_}
              var redraw_queued=[0,0];
              function update_view(force)
               {var
                 a=allocation(0),
                 scale=get_scale(0),
                 aw=Math.ceil(a[3] / scale),
                 ah=Math.ceil(a[4] / scale),
                 _dr_=[0,min(aw,st[6])];
                caml_call7
                 (caml_get_public_method(hadj,-635267918,374),
                  hadj,
                  0,
                  [0,st[6]],
                  [0,aw / 20.],
                  [0,aw / 2.],
                  _dr_,
                  0);
                var
                 _ds_=
                  caml_call1(caml_get_public_method(hadj,307110897,375),hadj),
                 mv=st[6] - _ds_;
                if
                 (caml_call1(caml_get_public_method(hadj,834174833,376),hadj)
                  <
                  0.)
                 caml_call2
                  (caml_get_public_method(hadj,-659372076,377),hadj,0.);
                if
                 (mv
                  <
                  caml_call1(caml_get_public_method(hadj,834174833,378),hadj))
                 caml_call2
                  (caml_get_public_method(hadj,-659372076,379),hadj,mv);
                var _dt_=[0,min(ah,st[7])];
                caml_call7
                 (caml_get_public_method(vadj,-635267918,380),
                  vadj,
                  0,
                  [0,st[7]],
                  [0,ah / 20.],
                  [0,ah / 2.],
                  _dt_,
                  0);
                var
                 _du_=
                  caml_call1(caml_get_public_method(vadj,307110897,381),vadj),
                 mv$0=st[7] - _du_;
                if
                 (caml_call1(caml_get_public_method(vadj,834174833,382),vadj)
                  <
                  0.)
                 caml_call2
                  (caml_get_public_method(vadj,-659372076,383),vadj,0.);
                if
                 (mv$0
                  <
                  caml_call1(caml_get_public_method(vadj,834174833,384),vadj))
                 caml_call2
                  (caml_get_public_method(vadj,-659372076,385),vadj,mv$0);
                var _dv_=1 - redraw_queued[1];
                return _dv_
                        ?(redraw_queued[1]
                          =
                          1,
                          caml_call1
                           (requestAnimationFrame,
                            caml_js_wrap_callback
                             (function(param)
                               {redraw_queued[1] = 0;
                                var
                                 y0$2=
                                  caml_call1(caml_get_public_method(vadj,834174833,386),vadj),
                                 x0$2=
                                  caml_call1(caml_get_public_method(hadj,834174833,387),hadj),
                                 scale=get_scale(0),
                                 width$1=window$0.width,
                                 height$1=window$0.height,
                                 pm=st[8],
                                 width=max(width$1,pm[2]),
                                 height=max(height$1,pm[3]),
                                 _dy_=pm[2] < width?1:0,
                                 y$0=0,
                                 x$0=0,
                                 _dz_=_dy_ || (pm[3] < height?1:0);
                                if(_dz_)
                                 {var old_p=pm[1],c=createCanvas(doc);
                                  c.width = width;
                                  c.height = height;
                                  var p$0=get_drawable(c),r=pm[4];
                                  if(old_p)
                                   {var old_p$0=old_p[1];
                                    put_pixmap(p$0,0,0,0,0,r[3],r[4],old_p$0)}
                                  pm[1] = [0,p$0];
                                  pm[2] = width;
                                  pm[3] = height}
                                function round(x){return x * scale + 0.5 | 0}
                                var
                                 x0=round(x0$2),
                                 x0$0=round((width$1 / scale - st[6]) / 2.),
                                 x0$1=0 < x0$0?- x0$0 | 0:x0,
                                 y0=round(y0$2),
                                 y0$0=round((height$1 / scale - st[7]) / 2.),
                                 y0$1=0 < y0$0?- y0$0 | 0:y0,
                                 dx=pm[4][1] - x0$1 | 0,
                                 dy=pm[4][2] - y0$1 | 0,
                                 switch$0=0 < dx?(pm[4][3] + dx | 0) < width$1?1:0:0;
                                if(switch$0)
                                 var switch$1=0;
                                else
                                 {if(0 < dy)
                                   if((pm[4][4] + dy | 0) < height$1)
                                    var switch$1=0,switch$2=0;
                                   else
                                    var switch$2=1;
                                  else
                                   var switch$2=1;
                                  if(switch$2)
                                   {var
                                     _dD_=pm[4],
                                     _dw_=0 === _dD_[3]?1:0,
                                     _dx_=_dw_ || (0 === _dD_[4]?1:0);
                                    if(1 - _dx_)
                                     {var
                                       p=get_pixmap(pm),
                                       r$1=pm[4],
                                       _dE_=0 !== dx?1:0,
                                       _dF_=_dE_ || (0 !== dy?1:0);
                                      if(_dF_)put_pixmap(p,dx,dy,0,0,r$1[3],r$1[4],p);
                                      var
                                       offset=
                                        function(p,l,d,m)
                                         {return 0 < ((p + d | 0) + l | 0)
                                                  ?0 <= (p + d | 0)
                                                    ?m <= (p + d | 0)
                                                      ?[0,m,0]
                                                      :m < ((p + d | 0) + l | 0)
                                                        ?[0,p + d | 0,(m - p | 0) - d | 0]
                                                        :[0,p + d | 0,l]
                                                    :[0,0,(l + p | 0) + d | 0]
                                                  :_cC_},
                                       match=offset(0,r$1[3],dx,pm[2]),
                                       width$0=match[2],
                                       x=match[1],
                                       match$0=offset(0,r$1[4],dy,pm[3]),
                                       height$0=match$0[2],
                                       y=match$0[1];
                                      if(0 < height$0)
                                       if(0 < x)
                                        {if(! (width$1 <= (x + width$0 | 0)))
                                          throw [0,Assert_failure,_cF_];
                                         _cB_(st,scale,x0$1,y0$1,0,y,x,height$0)}
                                       else
                                        {if(0 !== x)throw [0,Assert_failure,_cG_];
                                         if(width$0 < width$1)
                                          _cB_
                                           (st,
                                            scale,
                                            x0$1,
                                            y0$1,
                                            width$0,
                                            y,
                                            width$1 - width$0 | 0,
                                            height$0)}
                                      if(0 < y)
                                       {if(! (height$1 <= (y + height$0 | 0)))
                                         throw [0,Assert_failure,_cD_];
                                        _cB_(st,scale,x0$1,y0$1,0,0,width$1,y)}
                                      else
                                       {if(0 !== y)throw [0,Assert_failure,_cE_];
                                        if(height$0 < height$1)
                                         _cB_
                                          (st,
                                           scale,
                                           x0$1,
                                           y0$1,
                                           0,
                                           height$0,
                                           width$1,
                                           height$1 - height$0 | 0)}
                                      pm[4] = [0,x0$1,y0$1,width$1,height$1];
                                      var switch$1=1}
                                    else
                                     var switch$1=1}}
                                if(! switch$1)pm[4] = empty_rectangle;
                                var
                                 r$0=pm[4],
                                 _dC_=r$0[3] < (width$1 | 0)?1:0,
                                 _dA_=_dC_ || (r$0[4] < (height$1 | 0)?1:0);
                                if(_dA_)
                                 {_cB_(st,scale,x0$1,y0$1,0,0,width$1,height$1);
                                  pm[4] = [0,x0$1,y0$1,width$1,height$1]}
                                var _dB_=get_pixmap(pm);
                                return put_pixmap
                                        (get_drawable(window$0),
                                         x$0,
                                         y$0,
                                         x$0,
                                         y$0,
                                         width$1,
                                         height$1,
                                         _dB_)})))
                        :_dv_}
              var
               a=allocation(0),
               f$0=max(st[6] / a[3],st[7] / a[4]),
               count=Math.ceil(Math.log(f$0) / 0.693147180559945286 * 8.),
               f=Math.pow(2.,count / 8.);
              caml_call7
               (caml_get_public_method(sadj,-635267918,372),
                sadj,
                0,
                [0,count],
                0,
                0,
                0,
                0);
              st[3] = f;
              var prev_scale=[0,get_scale(0)];
              function rescale(x,y)
               {var
                 scale=get_scale(0),
                 r=1. - prev_scale[1] / scale,
                 _dp_=
                  caml_call1(caml_get_public_method(hadj,307110897,388),hadj)
                  *
                  r
                  *
                  x;
                caml_call2
                 (caml_get_public_method(hadj,-659372076,390),
                  hadj,
                  caml_call1(caml_get_public_method(hadj,834174833,389),hadj)
                  +
                  _dp_);
                var
                 _dq_=
                  caml_call1(caml_get_public_method(vadj,307110897,391),vadj)
                  *
                  r
                  *
                  y;
                caml_call2
                 (caml_get_public_method(vadj,-659372076,393),
                  vadj,
                  caml_call1(caml_get_public_method(vadj,834174833,392),vadj)
                  +
                  _dq_);
                prev_scale[1] = scale;
                st[8][4] = empty_rectangle;
                return update_view(0)}
              var size=16,height=284;
              function points(d)
               {return caml_call1(sprintf(_c7_),d).toString()}
              var
               size_px=points(size),
               pos=[0,height],
               thumb=createDiv(doc),
               style=thumb.style;
              style.position = "absolute";
              style.width = size_px;
              style.height = size_px;
              style.top = points(pos[1]);
              style.left = "0px";
              style.margin = "1px";
              style.backgroundColor = "black";
              var slider=createDiv(doc),style$0=slider.style;
              style$0.position = "absolute";
              style$0.width = size_px;
              style$0.height = points(300);
              style$0.border = "2px solid black";
              style$0.padding = "1px";
              style$0.top = "10px";
              style$0.left = "10px";
              appendChild(slider,thumb);
              appendChild(doc.body,slider);
              function set_slider_position(pos$0)
               {var _dn_=pos$0 !== pos[1]?1:0;
                if(_dn_)
                 {var _do_=points(pos$0);
                  thumb.style.top = _do_;
                  pos[1] = pos$0;
                  caml_call2
                   (caml_get_public_method(sadj,-659372076,414),
                    sadj,
                    (284 - pos$0 | 0)
                    *
                    caml_call1(caml_get_public_method(sadj,675223906,413),sadj)
                    /
                    284);
                  return rescale(0.5,0.5)}
                return _dn_}
              handle_drag
               (thumb,
                function(dx,dy)
                 {return set_slider_position
                          (min(height,max(0,pos[1] + dy | 0)))});
              slider.onmousedown
              =
              handler
               (function(ev)
                 {var
                   ey=ev.clientY,
                   match=elementClientPosition(slider),
                   sy=match[2];
                  set_slider_position
                   (max(0,min(height,(ey - sy | 0) - 8 | 0)));
                  return false$0});
              window.onresize
              =
              handler
               (function(param)
                 {var page=doc.documentElement;
                  window$0.width = page.clientWidth;
                  window$0.height = page.clientHeight;
                  update_view(1);
                  return capt});
              handle_drag
               (window$0,
                function(dx,dy)
                 {var scale=get_scale(0);
                  function offset(a,d)
                   {var
                     _dl_=caml_call1(caml_get_public_method(a,307110897,427),a),
                     _dm_=
                      caml_call1(caml_get_public_method(a,675223906,428),a)
                      -
                      _dl_;
                    return caml_call2
                            (caml_get_public_method(a,-659372076,430),
                             a,
                             min
                              (caml_call1(caml_get_public_method(a,834174833,429),a)
                               -
                               d
                               /
                               scale,
                               _dm_))}
                  offset(hadj,dx);
                  offset(vadj,dy);
                  return update_view(1)});
              function bump_scale(x,y,v)
               {var
                 a=allocation(0),
                 x$0=x / a[3],
                 y$0=y / a[4],
                 prev=
                  caml_call1(caml_get_public_method(sadj,834174833,431),sadj),
                 _dj_=
                  prev
                  +
                  v
                  *
                  caml_call1(caml_get_public_method(sadj,-292814788,432),sadj),
                 _dk_=
                  max
                   (caml_call1
                     (caml_get_public_method(sadj,-117442047,433),sadj),
                    _dj_),
                 vl=
                  min
                   (caml_call1(caml_get_public_method(sadj,675223906,434),sadj),
                    _dk_);
                if(vl != prev)
                 {caml_call2
                   (caml_get_public_method(sadj,-659372076,435),sadj,vl);
                  var
                   _dh_=
                    caml_call1(caml_get_public_method(sadj,675223906,417),sadj),
                   pos$0=
                    284
                    -
                    (caml_call1(caml_get_public_method(sadj,834174833,418),sadj)
                     *
                     284
                     /
                     _dh_
                     +
                     0.5
                     |
                     0)
                    |
                    0,
                   _di_=points(pos$0);
                  thumb.style.top = _di_;
                  pos[1] = pos$0;
                  var
                   switch$0=
                    0. <= x$0
                     ?x$0 <= 1.?0. <= y$0?y$0 <= 1.?(rescale(x$0,y$0),1):0:0:0
                     :0;
                  if(! switch$0)rescale(0.5,0.5)}
                return false$0}
              function h$0(ev,param,dy)
               {var
                 match=elementClientPosition(window$0),
                 ey=match[2],
                 ex=match[1],
                 x=ev.clientX - ex | 0,
                 y=ev.clientY - ey | 0;
                return 0 <= dy
                        ?0 < dy?bump_scale(x,y,-1.):false$0
                        :bump_scale(x,y,1.)}
              var capture=[0,capt],d=createDiv(doc);
              d.setAttribute("onmousewheel","return;");
              var passive=0,once=0;
              if(typeof d.onmousewheel === "function")
               addEventListenerWithOptions
                (window$0,
                 mousewheel,
                 capture,
                 once,
                 passive,
                 handler
                  (function(e)
                    {function _df_(param){return 0}
                     var dx=(- get(e.wheelDeltaX,_df_) | 0) / 40 | 0;
                     function _dg_(param){return e.wheelDelta}
                     var dy=(- get(e.wheelDeltaY,_dg_) | 0) / 40 | 0;
                     return h$0(e,dx,dy)}));
              else
               addEventListenerWithOptions
                (window$0,
                 DOMMouseScroll,
                 capture,
                 once,
                 passive,
                 handler
                  (function(e)
                    {var d=e.detail;
                     return e.axis === e.HORIZONTAL?h$0(e,d,0):h$0(e,0,d)}));
              function handle_key_event(ev)
               {var match=ev.keyCode,switcher=match - 37 | 0;
                if(3 < switcher >>> 0)return capt;
                switch(switcher)
                 {case 0:
                   var
                    _db_=
                     caml_call1(caml_get_public_method(hadj,-292814788,439),hadj);
                   caml_call2
                    (caml_get_public_method(hadj,-659372076,441),
                     hadj,
                     caml_call1(caml_get_public_method(hadj,834174833,440),hadj)
                     -
                     _db_);
                   update_view(0);
                   return false$0;
                  case 1:
                   var
                    _dc_=
                     caml_call1(caml_get_public_method(vadj,-292814788,442),vadj);
                   caml_call2
                    (caml_get_public_method(vadj,-659372076,444),
                     vadj,
                     caml_call1(caml_get_public_method(vadj,834174833,443),vadj)
                     -
                     _dc_);
                   update_view(0);
                   return false$0;
                  case 2:
                   var
                    _dd_=
                     caml_call1(caml_get_public_method(hadj,-292814788,445),hadj);
                   caml_call2
                    (caml_get_public_method(hadj,-659372076,447),
                     hadj,
                     caml_call1(caml_get_public_method(hadj,834174833,446),hadj)
                     +
                     _dd_);
                   update_view(0);
                   return false$0;
                  default:
                   var
                    _de_=
                     caml_call1(caml_get_public_method(vadj,-292814788,448),vadj);
                   caml_call2
                    (caml_get_public_method(vadj,-659372076,450),
                     vadj,
                     caml_call1(caml_get_public_method(vadj,834174833,449),vadj)
                     +
                     _de_);
                   update_view(0);
                   return false$0}}
              var ignored_keycode=[0,-1];
              doc.onkeydown
              =
              handler
               (function(e)
                 {ignored_keycode[1] = e.keyCode;return handle_key_event(e)});
              doc.onkeypress
              =
              handler
               (function(e)
                 {var k=ignored_keycode[1];
                  ignored_keycode[1] = -1;
                  return e.keyCode === k?capt:handle_key_event(e)});
              update_view(1);
              return return$0(0)}
            symbol_bind(getfile(_c8_),_c$_);
            return false$0});
        do_at_exit(0);
        return}}}
  (function(){return this}()));

//# sourceMappingURL=viewer_js.map
